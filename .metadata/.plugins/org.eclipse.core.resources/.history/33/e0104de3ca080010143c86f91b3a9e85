#include "LTC.h"
#include <stdio.h>
#define HIGH_BYTE(opcode) ((opcode >> 8) & 0xFF)
#define LOW_BYTE(opcode)  (opcode & 0xFF)
extern SPI_HandleTypeDef hspi2;
extern UART_HandleTypeDef huart2;
#define CRC15_POLY 0x4599


//Chip Select
void LTC6804_Select(void) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Set PA0 low
}



//Chip Deselect
void LTC6804_DeSelect(void) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Set PA0 high
}



// Function to calculate the PEC (Packet Error Code)

#define CRC15_POLY 0x4599

uint16_t pec15Table[256];  // Changed from int16_t to uint16_t (still 16-bit)

void init_PEC15_Table(void)
{
    for (uint16_t i = 0; i < 256; i++)  // Changed int to uint16_t
    {
        uint16_t remainder = i << 7;  // Changed from int16_t to uint16_t
        for (uint8_t bit = 8; bit > 0; --bit)  // Changed int to uint8_t
        {
            if (remainder & 0x4000) {
                remainder = (remainder << 1) ^ CRC15_POLY;
            }
            else {
                remainder = (remainder << 1);
            }
        }
        pec15Table[i] = remainder & 0x7FFF; // CRC15 is 15 bits (unchanged)
    }
}

uint16_t LTC6804_CalculatePEC(uint8_t *data, uint8_t len)  // Changed int to uint16_t
{
    uint16_t remainder = 16; // PEC seed (changed from int16_t to uint16_t)
    for (uint16_t i = 0; i < len; i++)  // Changed int to uint16_t
    {
        uint8_t address = ((remainder >> 7) ^ data[i]) & 0xFF;  // Unchanged
        remainder = (remainder << 8) ^ pec15Table[address];  // Unchanged
    }
    return (remainder * 2);  // Unchanged (still multiply by 2)
}



//Function to wait till ADC conversion is done
void LTC6804_PollTillAdcComplete(void){
	while(LTC6804_PollADCStatus()!=0x04){
		HAL_Delay(100);
	}
}



uint8_t LTC6804_PollADCStatus(void) {
    uint8_t status[3]; // Status response is 3 bytes (2 bytes status + 1 byte PEC)

    // Send the PLADC command
    LTC6804_SendCommand(CMD_PLADC);

    // Enable CS (assert low)
    LTC6804_Select();

    // Read the ADC status (3 bytes: 2 bytes status + 1 byte PEC)
    HAL_SPI_Receive(&hspi2, status, 3, HAL_MAX_DELAY);

    // Disable CS (deassert high)
    LTC6804_DeSelect();
    status[0] = status[0]&0x04;
    // Return the ADC status (first byte)
    return status[0];

}



// Function to send a command to the LTC6804
void LTC6804_SendCommand(uint16_t opcode) {
    uint8_t cmd[4]; // Command is 2 bytes, PEC is 2 bytes
    uint16_t pec;

    // Split the opcode into high and low bytes
    cmd[0] = HIGH_BYTE(opcode); // High byte of the opcode
    cmd[1] = LOW_BYTE(opcode);  // Low byte of the opcode

    // Calculate the PEC for the command
    pec = LTC6804_CalculatePEC(cmd, 2);

    // Append the PEC to the command
    cmd[2] = HIGH_BYTE(pec); // High byte of the PEC
    cmd[3] = LOW_BYTE(pec);  // Low byte of the PEC
	LTC6804_Select();
    // Send the command and PEC over SPI
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
	LTC6804_DeSelect();

}



void LTC6804_ReceiveData(uint8_t *data_buffer, uint8_t data_length) {
    // Enable CS (assert low)
    LTC6804_Select();

    // Receive data using polling
    HAL_SPI_Receive(&hspi2, data_buffer, data_length, HAL_MAX_DELAY);

    // Disable CS (deassert high)
    LTC6804_DeSelect();
}



void LTC6804_Init(void) {
    // Step 1: Set up the configuration registers
    uint8_t config_reg[6] = {0}; // Configuration register group (6 bytes)

    // Byte 0: Configuration Register 1
    config_reg[0] = (REFON << 7) | (ADCOPT << 6) | (GPIO5 << 5) | (GPIO4 << 4) | (GPIO3 << 3) | (GPIO2 << 2) | (GPIO1 << 1);

    // Byte 1: Configuration Register 2 (VUV lower byte)
    config_reg[1] = VUV & 0xFF;

    // Byte 2: Configuration Register 3 (VUV upper 4 bits and VOV lower 4 bits)
    config_reg[2] = ((VUV >> 8) & 0x0F) | ((VOV & 0x0F) << 4);

    // Byte 3: Configuration Register 4 (VOV upper byte)
    config_reg[3] = (VOV >> 4) & 0xFF;

    // Byte 4: Configuration Register 5 (reserved, set to 0)
    config_reg[4] = 0x00;

    // Byte 5: Configuration Register 6 (reserved, set to 0)
    config_reg[5] = 0x00;

    // Step 2: Write the configuration registers to the LTC6804
    LTC6804_SendCommand(CMD_WRCFG); // Send the Write Configuration command
    LTC6804_Select();
    HAL_SPI_Transmit(&hspi2, config_reg, 6, HAL_MAX_DELAY);
    LTC6804_DeSelect();
}



void LTC6804_SerialWake(){
    uint32_t twake = 1;  // Example: twake = 10 ms (adjust based on your devices)
    uint32_t tready = 1;
    HAL_Delay(twake);
    // Step 3: Send a dummy byte
    uint8_t dummy_byte = 0xFF;
    HAL_SPI_Transmit(&hspi2, &dummy_byte, 1, HAL_MAX_DELAY);
    // Step 4: Wait for 3 * TREADY
    HAL_Delay(tready);
}


//READ All Cell Voltages
void LTC6804_ReadAllCellVoltage(void){
	LTC6804_SendCommand(CMD_ADCV);	//Start Cell Voltage Conversion
	LTC6804_PollTillAdcComplete();	//Poll TIll ADC conversion is completed
	uint16_t cmd[4] = {CMD_RDCVA,CMD_RDCVB,CMD_RDCVC,CMD_RDCVD};	//Array With commands to send
	uint8_t Temp_Voltage_Buffer[8];
	uint16_t voltages[12];
	static float voltage_readings[12] = {0.0f}; // Initialize all 12 elements to 0.0
	for (int i = 0; i < 4; i++) {
	        // Read data for the current command
	        LTC6804_SendCommand(cmd[i]);
	        LTC6804_ReceiveData(Temp_Voltage_Buffer, 7);
	        // Combine two 8-bit values into one 16-bit value for each cell voltage
	        for (int j = 0; j < 3; j++) {
	            // Combine high byte and low byte into a 16-bit value
	            voltages[3 * i + j] = (Temp_Voltage_Buffer[2 * j + 1] << 8) | Temp_Voltage_Buffer[2 * j];
	            voltage_readings[3* i + j] = voltages[3 * i + j]*0.0000762955f;
	        }
	    }
//	return (&voltage_readings);
}



void Transmit(void){
	uint16_t voltages[12];

	LTC6804_ReadAllCellVoltage();
	uint16_t sum = 0;
	for(int i=0;i<12;i++){
		sum+=voltages[i];
	}
	char buffer[10]; // Buffer to hold the string representation of the sum
	int length = snprintf(buffer, sizeof(buffer), "%u\n", sum); // Convert sum to string

	// Transmit the string over UART2
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, length, HAL_MAX_DELAY);
}
