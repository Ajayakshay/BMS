#include "LTC.h"
#define HIGH_BYTE(opcode) ((opcode >> 8) & 0xFF)
#define LOW_BYTE(opcode)  (opcode & 0xFF)
extern SPI_HandleTypeDef hspi2;



//Chip Select
void LTC6804_Select(void) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Set PA0 low
}



//Chip Deselect
void LTC6804_DeSelect(void) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Set PA0 high
}



// Function to calculate the PEC (Packet Error Code)
uint16_t LTC6804_CalculatePEC(uint8_t *data, uint8_t len) {
    uint16_t pec = 0x0010; // Initial PEC value
    for (uint8_t i = 0; i < len; i++) {
        pec ^= (uint16_t)data[i];
        for (uint8_t j = 0; j < 8; j++) {
            if (pec & 0x0001) {
                pec = (pec >> 1) ^ 0x8408; // PEC polynomial
            } else {
                pec >>= 1;
            }
        }
    }
    return pec;
}



//Function to wait till ADC conversion is done
void LTC6804_PollTillAdcComplete(void){
	while(LTC6804_PollADCStatus()!=0x04){
		HAL_Delay(100);
	}
}



uint8_t LTC6804_PollADCStatus(void) {
    uint8_t status[3]; // Status response is 3 bytes (2 bytes status + 1 byte PEC)

    // Send the PLADC command
    LTC6804_SendCommand(CMD_PLADC);

    // Enable CS (assert low)
    LTC6804_Select();

    // Read the ADC status (3 bytes: 2 bytes status + 1 byte PEC)
    HAL_SPI_Receive(&hspi2, status, 3, HAL_MAX_DELAY);

    // Disable CS (deassert high)
    LTC6804_DeSelect();
    status[0] = status[0]&&0x04;
    // Return the ADC status (first byte)
    return status[0];

}



// Function to send a command to the LTC6804
void LTC6804_SendCommand(uint16_t opcode) {
    uint8_t cmd[4]; // Command is 2 bytes, PEC is 2 bytes
    uint16_t pec;

    // Split the opcode into high and low bytes
    cmd[0] = HIGH_BYTE(opcode); // High byte of the opcode
    cmd[1] = LOW_BYTE(opcode);  // Low byte of the opcode

    // Calculate the PEC for the command
    pec = LTC6804_CalculatePEC(cmd, 2);

    // Append the PEC to the command
    cmd[2] = HIGH_BYTE(pec); // High byte of the PEC
    cmd[3] = LOW_BYTE(pec);  // Low byte of the PEC
	LTC6804_Select();
    // Send the command and PEC over SPI
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
	LTC6804_DeSelect();

}



void LTC6804_ReceiveData(uint8_t *data_buffer, uint8_t data_length) {
    // Enable CS (assert low)
    LTC6804_Select();

    // Receive data using polling
    HAL_SPI_Receive(&hspi2, data_buffer, data_length, HAL_MAX_DELAY);

    // Disable CS (deassert high)
    LTC6804_DeSelect();
}



void LTC6804_Init(void) {
    // Step 1: Set up the configuration registers
    uint8_t config_reg[6] = {0}; // Configuration register group (6 bytes)

    // Byte 0: Configuration Register 1
    config_reg[0] = (REFON << 7) | (ADCOPT << 6) | (GPIO5 << 5) | (GPIO4 << 4) | (GPIO3 << 3) | (GPIO2 << 2) | (GPIO1 << 1);

    // Byte 1: Configuration Register 2 (VUV lower byte)
    config_reg[1] = VUV & 0xFF;

    // Byte 2: Configuration Register 3 (VUV upper 4 bits and VOV lower 4 bits)
    config_reg[2] = ((VUV >> 8) & 0x0F) | ((VOV & 0x0F) << 4);

    // Byte 3: Configuration Register 4 (VOV upper byte)
    config_reg[3] = (VOV >> 4) & 0xFF;

    // Byte 4: Configuration Register 5 (reserved, set to 0)
    config_reg[4] = 0x00;

    // Byte 5: Configuration Register 6 (reserved, set to 0)
    config_reg[5] = 0x00;

    // Step 2: Write the configuration registers to the LTC6804
    LTC6804_SendCommand(CMD_WRCFG); // Send the Write Configuration command
    LTC6804_Select();
    HAL_SPI_Transmit(&hspi2, config_reg, 6, HAL_MAX_DELAY);
    LTC6804_DeSelect();
}



void LTC6804_SerialWake(){
    uint32_t twake = 1;  // Example: twake = 10 ms (adjust based on your devices)
    uint32_t tready = 1;
    HAL_Delay(twake);
    // Step 3: Send a dummy byte
    uint8_t dummy_byte = 0xFF;
    HAL_SPI_Transmit(&hspi2, &dummy_byte, 1, HAL_MAX_DELAY);
    // Step 4: Wait for 3 * TREADY
    HAL_Delay(tready);
}
void LTC6804_ReadCellVoltage(){
	LTC6804_SendCommand(CMD_ADCV);
	LTC6804_PollTillAdcComplete();
}

// Wait for ADC conversion to complete
//LTC6804_PollTillAdcComplete();
