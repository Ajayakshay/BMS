
bmsinnicleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008370  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08008500  08008500  00009500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e0  080088e0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080088e0  080088e0  000098e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088e8  080088e8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088e8  080088e8  000098e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088ec  080088ec  000098ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080088f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  200001d4  08008ac4  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  08008ac4  0000a6ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130e0  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276a  00000000  00000000  0001d2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0001fa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e10  00000000  00000000  00020c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283c8  00000000  00000000  00021a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015462  00000000  00000000  00049e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f68e9  00000000  00000000  0005f292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155b7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da0  00000000  00000000  00155bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084e8 	.word	0x080084e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080084e8 	.word	0x080084e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <print_hex>:
extern SPI_HandleTypeDef hspi2;
extern UART_HandleTypeDef huart2;
#define CRC15_POLY 0x4599
extern TIM_HandleTypeDef htim6;

void print_hex(uint8_t *data, uint8_t len) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
    char buf[4];
    for (int i=0; i<len; i++) {
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e014      	b.n	8000ed4 <print_hex+0x3c>
        snprintf(buf, sizeof(buf), "%02X ", data[i]);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	f107 0008 	add.w	r0, r7, #8
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <print_hex+0x5c>)
 8000eb8:	2104      	movs	r1, #4
 8000eba:	f005 f9d5 	bl	8006268 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, 3, HAL_MAX_DELAY);
 8000ebe:	f107 0108 	add.w	r1, r7, #8
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <print_hex+0x60>)
 8000eca:	f003 ff57 	bl	8004d7c <HAL_UART_Transmit>
    for (int i=0; i<len; i++) {
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbe6      	blt.n	8000eaa <print_hex+0x12>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	4906      	ldr	r1, [pc, #24]	@ (8000efc <print_hex+0x64>)
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <print_hex+0x60>)
 8000ee6:	f003 ff49 	bl	8004d7c <HAL_UART_Transmit>
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08008500 	.word	0x08008500
 8000ef8:	200004d0 	.word	0x200004d0
 8000efc:	08008508 	.word	0x08008508

08000f00 <LTC6804_ReadConfig>:
void LTC6804_ReadConfig(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
    uint8_t rx_data[8];
    LTC6804_SendCommand(CMD_RDCFG);
 8000f06:	2002      	movs	r0, #2
 8000f08:	f000 f8ee 	bl	80010e8 <LTC6804_SendCommand>
    LTC6804_ReceiveData(rx_data, 8);
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2108      	movs	r1, #8
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f921 	bl	8001158 <LTC6804_ReceiveData>
    print_hex(rx_data, 8);
 8000f16:	463b      	mov	r3, r7
 8000f18:	2108      	movs	r1, #8
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ffbc 	bl	8000e98 <print_hex>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HIGH_BYTE>:

uint8_t HIGH_BYTE(uint16_t opcode){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
	return ((opcode>>8) & 0xFF);
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LOW_BYTE>:

uint8_t LOW_BYTE(uint16_t opcode){
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	80fb      	strh	r3, [r7, #6]
	return ((opcode) & 0xFF);
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	b2db      	uxtb	r3, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <delay_us>:

void delay_us(uint16_t delay)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6, 0);
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <delay_us+0x40>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
    while(__HAL_TIM_GET_COUNTER(&htim6) < delay) {
 8000f72:	e007      	b.n	8000f84 <delay_us+0x24>
        if (__HAL_TIM_GET_COUNTER(&htim6) > (delay + 1000)) {
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <delay_us+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d806      	bhi.n	8000f92 <delay_us+0x32>
    while(__HAL_TIM_GET_COUNTER(&htim6) < delay) {
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <delay_us+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3f1      	bcc.n	8000f74 <delay_us+0x14>
            break;
        }
    }
}
 8000f90:	e000      	b.n	8000f94 <delay_us+0x34>
            break;
 8000f92:	bf00      	nop
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	20000484 	.word	0x20000484

08000fa4 <delay_ms>:
void delay_ms(uint16_t delay){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<delay;i++){
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e006      	b.n	8000fc2 <delay_ms+0x1e>
		delay_us(1000);
 8000fb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fb8:	f7ff ffd2 	bl	8000f60 <delay_us>
	for(int i=0;i<delay;i++){
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dbf4      	blt.n	8000fb4 <delay_ms+0x10>
	}
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <LTC6804_Select>:
//Chip Select
void LTC6804_Select(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Set PA0 low
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe0:	f001 f918 	bl	8002214 <HAL_GPIO_WritePin>
    delay_ms(10);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f7ff ffdd 	bl	8000fa4 <delay_ms>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}

08000fee <LTC6804_DeSelect>:



//Chip Deselect
void LTC6804_DeSelect(void) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Set PA0 high
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffa:	f001 f90b 	bl	8002214 <HAL_GPIO_WritePin>
    delay_ms(10);
 8000ffe:	200a      	movs	r0, #10
 8001000:	f7ff ffd0 	bl	8000fa4 <delay_ms>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <init_PEC15_Table>:
#define CRC15_POLY 0x4599

uint16_t pec15Table[256];

void init_PEC15_Table(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < 256; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	e028      	b.n	8001066 <init_PEC15_Table+0x5e>
    {
        uint16_t remainder = i << 7;
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	01db      	lsls	r3, r3, #7
 8001018:	80bb      	strh	r3, [r7, #4]
        for (uint8_t bit = 8; bit > 0; --bit)
 800101a:	2308      	movs	r3, #8
 800101c:	70fb      	strb	r3, [r7, #3]
 800101e:	e014      	b.n	800104a <init_PEC15_Table+0x42>
        {
            if (remainder & 0x4000) {
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d009      	beq.n	800103e <init_PEC15_Table+0x36>
                remainder = (remainder << 1) ^ CRC15_POLY;
 800102a:	88bb      	ldrh	r3, [r7, #4]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	b21b      	sxth	r3, r3
 8001030:	f483 438b 	eor.w	r3, r3, #17792	@ 0x4580
 8001034:	f083 0319 	eor.w	r3, r3, #25
 8001038:	b21b      	sxth	r3, r3
 800103a:	80bb      	strh	r3, [r7, #4]
 800103c:	e002      	b.n	8001044 <init_PEC15_Table+0x3c>
            }
            else {
                remainder = (remainder << 1);
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	80bb      	strh	r3, [r7, #4]
        for (uint8_t bit = 8; bit > 0; --bit)
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	3b01      	subs	r3, #1
 8001048:	70fb      	strb	r3, [r7, #3]
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1e7      	bne.n	8001020 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0x7FFF;
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	88ba      	ldrh	r2, [r7, #4]
 8001054:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001058:	b291      	uxth	r1, r2
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <init_PEC15_Table+0x74>)
 800105c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint16_t i = 0; i < 256; i++)
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	3301      	adds	r3, #1
 8001064:	80fb      	strh	r3, [r7, #6]
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	2bff      	cmp	r3, #255	@ 0xff
 800106a:	d9d3      	bls.n	8001014 <init_PEC15_Table+0xc>
    }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200001f0 	.word	0x200001f0

08001080 <LTC6804_CalculatePEC>:

uint16_t LTC6804_CalculatePEC(uint8_t *data, uint8_t len)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
    uint16_t remainder = 16;
 800108c:	2310      	movs	r3, #16
 800108e:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	81bb      	strh	r3, [r7, #12]
 8001094:	e017      	b.n	80010c6 <LTC6804_CalculatePEC+0x46>
    {
        uint8_t address = ((remainder >> 7) ^ data[i]) & 0xFF;
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	09db      	lsrs	r3, r3, #7
 800109a:	b29b      	uxth	r3, r3
 800109c:	b2da      	uxtb	r2, r3
 800109e:	89bb      	ldrh	r3, [r7, #12]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	440b      	add	r3, r1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4053      	eors	r3, r2
 80010a8:	72fb      	strb	r3, [r7, #11]
        remainder = (remainder << 8) ^ pec15Table[address];
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	7afb      	ldrb	r3, [r7, #11]
 80010b2:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <LTC6804_CalculatePEC+0x64>)
 80010b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4053      	eors	r3, r2
 80010bc:	b21b      	sxth	r3, r3
 80010be:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++)
 80010c0:	89bb      	ldrh	r3, [r7, #12]
 80010c2:	3301      	adds	r3, #1
 80010c4:	81bb      	strh	r3, [r7, #12]
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	89ba      	ldrh	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d3e2      	bcc.n	8001096 <LTC6804_CalculatePEC+0x16>
    }
    return (remainder * 2);
 80010d0:	89fb      	ldrh	r3, [r7, #14]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b29b      	uxth	r3, r3
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200001f0 	.word	0x200001f0

080010e8 <LTC6804_SendCommand>:
}



// Function to send a command to the LTC6804
void LTC6804_SendCommand(uint16_t opcode) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4]; // Command is 2 bytes, PEC is 2 bytes
    uint16_t pec;

    // Split the opcode into high and low bytes
    cmd[0] = HIGH_BYTE(opcode); // High byte of the opcode
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff17 	bl	8000f28 <HIGH_BYTE>
 80010fa:	4603      	mov	r3, r0
 80010fc:	723b      	strb	r3, [r7, #8]
    cmd[1] = LOW_BYTE(opcode);  // Low byte of the opcode
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff20 	bl	8000f46 <LOW_BYTE>
 8001106:	4603      	mov	r3, r0
 8001108:	727b      	strb	r3, [r7, #9]

    // Calculate the PEC for the command
    pec = LTC6804_CalculatePEC(cmd, 2);
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2102      	movs	r1, #2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ffb5 	bl	8001080 <LTC6804_CalculatePEC>
 8001116:	4603      	mov	r3, r0
 8001118:	81fb      	strh	r3, [r7, #14]

    // Append the PEC to the command
    cmd[2] = HIGH_BYTE(pec); // High byte of the PEC
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff03 	bl	8000f28 <HIGH_BYTE>
 8001122:	4603      	mov	r3, r0
 8001124:	72bb      	strb	r3, [r7, #10]
    cmd[3] = LOW_BYTE(pec);  // Low byte of the PEC
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff0c 	bl	8000f46 <LOW_BYTE>
 800112e:	4603      	mov	r3, r0
 8001130:	72fb      	strb	r3, [r7, #11]
	LTC6804_Select();
 8001132:	f7ff ff4f 	bl	8000fd4 <LTC6804_Select>
    // Send the command and PEC over SPI
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	2204      	movs	r2, #4
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <LTC6804_SendCommand+0x6c>)
 8001142:	f002 fc42 	bl	80039ca <HAL_SPI_Transmit>
	LTC6804_DeSelect();
 8001146:	f7ff ff52 	bl	8000fee <LTC6804_DeSelect>

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000420 	.word	0x20000420

08001158 <LTC6804_ReceiveData>:



void LTC6804_ReceiveData(uint8_t *data_buffer, uint8_t data_length) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
    // Enable CS (assert low)
    LTC6804_Select();
 8001164:	f7ff ff36 	bl	8000fd4 <LTC6804_Select>

    // Receive data using polling
    HAL_SPI_Receive(&hspi2, data_buffer, data_length, HAL_MAX_DELAY);
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	b29a      	uxth	r2, r3
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4804      	ldr	r0, [pc, #16]	@ (8001184 <LTC6804_ReceiveData+0x2c>)
 8001174:	f002 fd9f 	bl	8003cb6 <HAL_SPI_Receive>

    // Disable CS (deassert high)
    LTC6804_DeSelect();
 8001178:	f7ff ff39 	bl	8000fee <LTC6804_DeSelect>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000420 	.word	0x20000420

08001188 <LTC6804_Init>:



void LTC6804_Init(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
    // Step 1: Set up the configuration registers
    uint8_t config_reg[6] = {0}; // Configuration register group (6 bytes)
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	2300      	movs	r3, #0
 8001194:	80bb      	strh	r3, [r7, #4]

    // Byte 0: Configuration Register 1
    config_reg[0] = (REFON << 7) | (ADCOPT << 6) | (GPIO5 << 5) | (GPIO4 << 4) | (GPIO3 << 3) | (GPIO2 << 2) | (GPIO1 << 1);
 8001196:	2380      	movs	r3, #128	@ 0x80
 8001198:	703b      	strb	r3, [r7, #0]

    // Byte 1: Configuration Register 2 (VUV lower byte)
    config_reg[1] = VUV & 0xFF;
 800119a:	2300      	movs	r3, #0
 800119c:	707b      	strb	r3, [r7, #1]

    // Byte 2: Configuration Register 3 (VUV upper 4 bits and VOV lower 4 bits)
    config_reg[2] = ((VUV >> 8) & 0x0F) | ((VOV & 0x0F) << 4);
 800119e:	2300      	movs	r3, #0
 80011a0:	70bb      	strb	r3, [r7, #2]

    // Byte 3: Configuration Register 4 (VOV upper byte)
    config_reg[3] = (VOV >> 4) & 0xFF;
 80011a2:	2300      	movs	r3, #0
 80011a4:	70fb      	strb	r3, [r7, #3]

    // Byte 4: Configuration Register 5 (reserved, set to 0)
    config_reg[4] = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	713b      	strb	r3, [r7, #4]

    // Byte 5: Configuration Register 6 (reserved, set to 0)
    config_reg[5] = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	717b      	strb	r3, [r7, #5]

    // Step 2: Write the configuration registers to the LTC6804
    LTC6804_SendCommand(CMD_WRCFG); // Send the Write Configuration command
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff ff9a 	bl	80010e8 <LTC6804_SendCommand>
    LTC6804_Select();
 80011b4:	f7ff ff0e 	bl	8000fd4 <LTC6804_Select>
    HAL_SPI_Transmit(&hspi2, config_reg, 6, HAL_MAX_DELAY);
 80011b8:	4639      	mov	r1, r7
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	2206      	movs	r2, #6
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <LTC6804_Init+0x4c>)
 80011c2:	f002 fc02 	bl	80039ca <HAL_SPI_Transmit>
    LTC6804_DeSelect();
 80011c6:	f7ff ff12 	bl	8000fee <LTC6804_DeSelect>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000420 	.word	0x20000420

080011d8 <LTC6804_SerialWake>:



void LTC6804_SerialWake(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
//    uint32_t twake = 1;  // Example: twake = 10 ms (adjust based on your devices)
//    uint32_t tready = 1;
    // Step 3: Send a dummy byte
    uint8_t dummy_byte = 0xFF;
 80011de:	23ff      	movs	r3, #255	@ 0xff
 80011e0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &dummy_byte, 1, HAL_MAX_DELAY);
 80011e2:	1df9      	adds	r1, r7, #7
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	2201      	movs	r2, #1
 80011ea:	480b      	ldr	r0, [pc, #44]	@ (8001218 <LTC6804_SerialWake+0x40>)
 80011ec:	f002 fbed 	bl	80039ca <HAL_SPI_Transmit>
    // Step 4: Wait for 3 * TREADY
    delay_us(300);
 80011f0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011f4:	f7ff feb4 	bl	8000f60 <delay_us>
    HAL_SPI_Transmit(&hspi2, &dummy_byte, 1, HAL_MAX_DELAY);
 80011f8:	1df9      	adds	r1, r7, #7
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	2201      	movs	r2, #1
 8001200:	4805      	ldr	r0, [pc, #20]	@ (8001218 <LTC6804_SerialWake+0x40>)
 8001202:	f002 fbe2 	bl	80039ca <HAL_SPI_Transmit>
	delay_us(300);
 8001206:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800120a:	f7ff fea9 	bl	8000f60 <delay_us>


}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000420 	.word	0x20000420

0800121c <LTC6804_ReadAllCellVoltage>:


//READ All Cell Voltages
float* LTC6804_ReadAllCellVoltage(void){
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	@ 0x30
 8001220:	af00      	add	r7, sp, #0
	LTC6804_SendCommand(CMD_ADCV);	//Start Cell Voltage Conversion
 8001222:	f44f 7058 	mov.w	r0, #864	@ 0x360
 8001226:	f7ff ff5f 	bl	80010e8 <LTC6804_SendCommand>
	delay_ms(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff feba 	bl	8000fa4 <delay_ms>
//	LTC6804_PollTillAdcComplete();	//Poll TIll ADC conversion is completed
	uint16_t cmd[4] = {CMD_RDCVA,CMD_RDCVB,CMD_RDCVC,CMD_RDCVD};	//Array With commands to send
 8001230:	4a34      	ldr	r2, [pc, #208]	@ (8001304 <LTC6804_ReadAllCellVoltage+0xe8>)
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	e892 0003 	ldmia.w	r2, {r0, r1}
 800123a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t Temp_Voltage_Buffer[8];
	uint16_t voltages[12];
	static float voltage_readings[12] = {0.0f}; // Initialize all 12 elements to 0.0
	for (int i = 0; i < 4; i++) {
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001242:	e056      	b.n	80012f2 <LTC6804_ReadAllCellVoltage+0xd6>
	        // Read data for the current command
	        LTC6804_SendCommand(cmd[i]);
 8001244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	3330      	adds	r3, #48	@ 0x30
 800124a:	443b      	add	r3, r7
 800124c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff49 	bl	80010e8 <LTC6804_SendCommand>
	        LTC6804_ReceiveData(Temp_Voltage_Buffer, 8);
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	2108      	movs	r1, #8
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff7b 	bl	8001158 <LTC6804_ReceiveData>
	        // Combine two 8-bit values into one 16-bit value for each cell voltage
	        for (int j = 0; j < 3; j++) {
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001266:	e03e      	b.n	80012e6 <LTC6804_ReadAllCellVoltage+0xca>
	            // Combine high byte and low byte into a 16-bit value
	            voltages[3 * i + j] = (Temp_Voltage_Buffer[2 * j + 1] << 8) | Temp_Voltage_Buffer[2 * j];
 8001268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	3301      	adds	r3, #1
 800126e:	3330      	adds	r3, #48	@ 0x30
 8001270:	443b      	add	r3, r7
 8001272:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	3330      	adds	r3, #48	@ 0x30
 8001280:	443b      	add	r3, r7
 8001282:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b219      	sxth	r1, r3
 800128c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	441a      	add	r2, r3
 8001294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001296:	4413      	add	r3, r2
 8001298:	b28a      	uxth	r2, r1
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	3330      	adds	r3, #48	@ 0x30
 800129e:	443b      	add	r3, r7
 80012a0:	f823 2c30 	strh.w	r2, [r3, #-48]
//	            HAL_UART_Transmit(&huart2, voltages[3*i + j], 6 , HAL_MAX_DELAY);
	            voltage_readings[3* i + j] = voltages[3 * i + j]*0.0001f;
 80012a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	441a      	add	r2, r3
 80012ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	3330      	adds	r3, #48	@ 0x30
 80012b4:	443b      	add	r3, r7
 80012b6:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	441a      	add	r2, r3
 80012ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012cc:	4413      	add	r3, r2
 80012ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001308 <LTC6804_ReadAllCellVoltage+0xec>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	4a0d      	ldr	r2, [pc, #52]	@ (800130c <LTC6804_ReadAllCellVoltage+0xf0>)
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	edc3 7a00 	vstr	s15, [r3]
	        for (int j = 0; j < 3; j++) {
 80012e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e2:	3301      	adds	r3, #1
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	ddbd      	ble.n	8001268 <LTC6804_ReadAllCellVoltage+0x4c>
	for (int i = 0; i < 4; i++) {
 80012ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ee:	3301      	adds	r3, #1
 80012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	dda5      	ble.n	8001244 <LTC6804_ReadAllCellVoltage+0x28>
	        }
	    }
	return (voltage_readings);
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <LTC6804_ReadAllCellVoltage+0xf0>)
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3730      	adds	r7, #48	@ 0x30
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	0800850c 	.word	0x0800850c
 8001308:	38d1b717 	.word	0x38d1b717
 800130c:	200003f0 	.word	0x200003f0

08001310 <Transmit>:



void Transmit(void){
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b08f      	sub	sp, #60	@ 0x3c
 8001314:	af02      	add	r7, sp, #8
//	uint16_t voltages[12];
	float* cell_voltages = LTC6804_ReadAllCellVoltage();
 8001316:	f7ff ff81 	bl	800121c <LTC6804_ReadAllCellVoltage>
 800131a:	62b8      	str	r0, [r7, #40]	@ 0x28
	for(int i = 0; i < 12; i++) {
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001320:	e022      	b.n	8001368 <Transmit+0x58>
	    char line[32];
	    int len = snprintf(line, sizeof(line), "Cell %d: %.4f V\r", i+1, cell_voltages[i]);
 8001322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001324:	1c5c      	adds	r4, r3, #1
 8001326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800132c:	4413      	add	r3, r2
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f909 	bl	8000548 <__aeabi_f2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	1d38      	adds	r0, r7, #4
 800133c:	e9cd 2300 	strd	r2, r3, [sp]
 8001340:	4623      	mov	r3, r4
 8001342:	4a10      	ldr	r2, [pc, #64]	@ (8001384 <Transmit+0x74>)
 8001344:	2120      	movs	r1, #32
 8001346:	f004 ff8f 	bl	8006268 <sniprintf>
 800134a:	6278      	str	r0, [r7, #36]	@ 0x24
	    HAL_UART_Transmit(&huart2, (uint8_t*)line, len, HAL_MAX_DELAY);
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	b29a      	uxth	r2, r3
 8001350:	1d39      	adds	r1, r7, #4
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	480c      	ldr	r0, [pc, #48]	@ (8001388 <Transmit+0x78>)
 8001358:	f003 fd10 	bl	8004d7c <HAL_UART_Transmit>
	    delay_ms(10);  // Small delay between transmissions if needed
 800135c:	200a      	movs	r0, #10
 800135e:	f7ff fe21 	bl	8000fa4 <delay_ms>
	for(int i = 0; i < 12; i++) {
 8001362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001364:	3301      	adds	r3, #1
 8001366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136a:	2b0b      	cmp	r3, #11
 800136c:	ddd9      	ble.n	8001322 <Transmit+0x12>

	}
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	2202      	movs	r2, #2
 8001374:	4905      	ldr	r1, [pc, #20]	@ (800138c <Transmit+0x7c>)
 8001376:	4804      	ldr	r0, [pc, #16]	@ (8001388 <Transmit+0x78>)
 8001378:	f003 fd00 	bl	8004d7c <HAL_UART_Transmit>
}
 800137c:	bf00      	nop
 800137e:	3734      	adds	r7, #52	@ 0x34
 8001380:	46bd      	mov	sp, r7
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	08008514 	.word	0x08008514
 8001388:	200004d0 	.word	0x200004d0
 800138c:	08008508 	.word	0x08008508

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001394:	f000 fbc6 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001398:	f000 f81e 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139c:	f000 f910 	bl	80015c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013a0:	f000 f8de 	bl	8001560 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80013a4:	f000 f868 	bl	8001478 <MX_SPI2_Init>
  MX_TIM6_Init();
 80013a8:	f000 f8a4 	bl	80014f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 80013ac:	4809      	ldr	r0, [pc, #36]	@ (80013d4 <main+0x44>)
 80013ae:	f003 fb01 	bl	80049b4 <HAL_TIM_Base_Start>

	LTC6804_SerialWake();
 80013b2:	f7ff ff11 	bl	80011d8 <LTC6804_SerialWake>
	LTC6804_Init();
 80013b6:	f7ff fee7 	bl	8001188 <LTC6804_Init>
	init_PEC15_Table();
 80013ba:	f7ff fe25 	bl	8001008 <init_PEC15_Table>
	LTC6804_ReadConfig();
 80013be:	f7ff fd9f 	bl	8000f00 <LTC6804_ReadConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Transmit();
 80013c2:	f7ff ffa5 	bl	8001310 <Transmit>
	  delay_ms(1000);
 80013c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ca:	f7ff fdeb 	bl	8000fa4 <delay_ms>
	  Transmit();
 80013ce:	bf00      	nop
 80013d0:	e7f7      	b.n	80013c2 <main+0x32>
 80013d2:	bf00      	nop
 80013d4:	20000484 	.word	0x20000484

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b096      	sub	sp, #88	@ 0x58
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2244      	movs	r2, #68	@ 0x44
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 ffb5 	bl	8006356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013fe:	f000 ff2f 	bl	8002260 <HAL_PWREx_ControlVoltageScaling>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001408:	f000 f940 	bl	800168c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140c:	2301      	movs	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001410:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001414:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001416:	2302      	movs	r3, #2
 8001418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141a:	2303      	movs	r3, #3
 800141c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800141e:	2301      	movs	r3, #1
 8001420:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001422:	2308      	movs	r3, #8
 8001424:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001426:	2307      	movs	r3, #7
 8001428:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800142a:	2302      	movs	r3, #2
 800142c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800142e:	2302      	movs	r3, #2
 8001430:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4618      	mov	r0, r3
 8001438:	f000 ff68 	bl	800230c <HAL_RCC_OscConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001442:	f000 f923 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001446:	230f      	movs	r3, #15
 8001448:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144a:	2303      	movs	r3, #3
 800144c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800145a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fb2f 	bl	8002ac4 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800146c:	f000 f90e 	bl	800168c <Error_Handler>
  }
}
 8001470:	bf00      	nop
 8001472:	3758      	adds	r7, #88	@ 0x58
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <MX_SPI2_Init+0x74>)
 800147e:	4a1c      	ldr	r2, [pc, #112]	@ (80014f0 <MX_SPI2_Init+0x78>)
 8001480:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001482:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <MX_SPI2_Init+0x74>)
 8001484:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001488:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800148a:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <MX_SPI2_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001490:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <MX_SPI2_Init+0x74>)
 8001492:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001496:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_SPI2_Init+0x74>)
 800149a:	2202      	movs	r2, #2
 800149c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <MX_SPI2_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_SPI2_Init+0x74>)
 80014a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_SPI2_Init+0x74>)
 80014ae:	2238      	movs	r2, #56	@ 0x38
 80014b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <MX_SPI2_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <MX_SPI2_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <MX_SPI2_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <MX_SPI2_Init+0x74>)
 80014c6:	2207      	movs	r2, #7
 80014c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <MX_SPI2_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <MX_SPI2_Init+0x74>)
 80014d2:	2208      	movs	r2, #8
 80014d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_SPI2_Init+0x74>)
 80014d8:	f002 f9d4 	bl	8003884 <HAL_SPI_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014e2:	f000 f8d3 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000420 	.word	0x20000420
 80014f0:	40003800 	.word	0x40003800

080014f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001504:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <MX_TIM6_Init+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32-1;
 800150a:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_TIM6_Init+0x64>)
 800150c:	221f      	movs	r2, #31
 800150e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001518:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800151c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001526:	f003 f9ed 	bl	8004904 <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001530:	f000 f8ac 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001542:	f003 fb45 	bl	8004bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800154c:	f000 f89e 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000484 	.word	0x20000484
 800155c:	40001000 	.word	0x40001000

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001566:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <MX_USART2_UART_Init+0x5c>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 80015a4:	f003 fb9c 	bl	8004ce0 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015ae:	f000 f86d 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200004d0 	.word	0x200004d0
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <MX_GPIO_Init+0xc4>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	4a2a      	ldr	r2, [pc, #168]	@ (8001684 <MX_GPIO_Init+0xc4>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e2:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <MX_GPIO_Init+0xc4>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <MX_GPIO_Init+0xc4>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	4a24      	ldr	r2, [pc, #144]	@ (8001684 <MX_GPIO_Init+0xc4>)
 80015f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fa:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <MX_GPIO_Init+0xc4>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <MX_GPIO_Init+0xc4>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <MX_GPIO_Init+0xc4>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <MX_GPIO_Init+0xc4>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <MX_GPIO_Init+0xc4>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	4a18      	ldr	r2, [pc, #96]	@ (8001684 <MX_GPIO_Init+0xc4>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <MX_GPIO_Init+0xc4>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2121      	movs	r1, #33	@ 0x21
 800163a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163e:	f000 fde9 	bl	8002214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001642:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001648:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	480b      	ldr	r0, [pc, #44]	@ (8001688 <MX_GPIO_Init+0xc8>)
 800165a:	f000 fc31 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 800165e:	2321      	movs	r3, #33	@ 0x21
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001678:	f000 fc22 	bl	8001ec0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	@ 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	48000800 	.word	0x48000800

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <Error_Handler+0x8>

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <HAL_MspInit+0x44>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a2:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <HAL_MspInit+0x44>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <HAL_MspInit+0x44>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <HAL_MspInit+0x44>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <HAL_MspInit+0x44>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_MspInit+0x44>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	@ 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a29      	ldr	r2, [pc, #164]	@ (80017a4 <HAL_SPI_MspInit+0xc4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d14c      	bne.n	800179c <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001702:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <HAL_SPI_MspInit+0xc8>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	4a28      	ldr	r2, [pc, #160]	@ (80017a8 <HAL_SPI_MspInit+0xc8>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800170c:	6593      	str	r3, [r2, #88]	@ 0x58
 800170e:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <HAL_SPI_MspInit+0xc8>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <HAL_SPI_MspInit+0xc8>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <HAL_SPI_MspInit+0xc8>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <HAL_SPI_MspInit+0xc8>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <HAL_SPI_MspInit+0xc8>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <HAL_SPI_MspInit+0xc8>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <HAL_SPI_MspInit+0xc8>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800174a:	230c      	movs	r3, #12
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800175a:	2305      	movs	r3, #5
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4811      	ldr	r0, [pc, #68]	@ (80017ac <HAL_SPI_MspInit+0xcc>)
 8001766:	f000 fbab 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800176a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800177c:	2305      	movs	r3, #5
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	480a      	ldr	r0, [pc, #40]	@ (80017b0 <HAL_SPI_MspInit+0xd0>)
 8001788:	f000 fb9a 	bl	8001ec0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2024      	movs	r0, #36	@ 0x24
 8001792:	f000 fb1e 	bl	8001dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001796:	2024      	movs	r0, #36	@ 0x24
 8001798:	f000 fb37 	bl	8001e0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	@ 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40003800 	.word	0x40003800
 80017a8:	40021000 	.word	0x40021000
 80017ac:	48000800 	.word	0x48000800
 80017b0:	48000400 	.word	0x48000400

080017b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_TIM_Base_MspInit+0x38>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10b      	bne.n	80017de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_TIM_Base_MspInit+0x3c>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <HAL_TIM_Base_MspInit+0x3c>)
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <HAL_TIM_Base_MspInit+0x3c>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40001000 	.word	0x40001000
 80017f0:	40021000 	.word	0x40021000

080017f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0ac      	sub	sp, #176	@ 0xb0
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2288      	movs	r2, #136	@ 0x88
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fd9e 	bl	8006356 <memset>
  if(huart->Instance==USART2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a21      	ldr	r2, [pc, #132]	@ (80018a4 <HAL_UART_MspInit+0xb0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d13b      	bne.n	800189c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001824:	2302      	movs	r3, #2
 8001826:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001828:	2300      	movs	r3, #0
 800182a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4618      	mov	r0, r3
 8001832:	f001 fb6b 	bl	8002f0c <HAL_RCCEx_PeriphCLKConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800183c:	f7ff ff26 	bl	800168c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <HAL_UART_MspInit+0xb4>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001844:	4a18      	ldr	r2, [pc, #96]	@ (80018a8 <HAL_UART_MspInit+0xb4>)
 8001846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184a:	6593      	str	r3, [r2, #88]	@ 0x58
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <HAL_UART_MspInit+0xb4>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <HAL_UART_MspInit+0xb4>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185c:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <HAL_UART_MspInit+0xb4>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001864:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <HAL_UART_MspInit+0xb4>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001870:	230c      	movs	r3, #12
 8001872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001888:	2307      	movs	r3, #7
 800188a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001898:	f000 fb12 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800189c:	bf00      	nop
 800189e:	37b0      	adds	r7, #176	@ 0xb0
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40004400 	.word	0x40004400
 80018a8:	40021000 	.word	0x40021000

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <NMI_Handler+0x4>

080018b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <MemManage_Handler+0x4>

080018c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001902:	f000 f96b 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <SPI2_IRQHandler+0x10>)
 8001912:	f002 fd27 	bl	8004364 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000420 	.word	0x20000420

08001920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_kill>:

int _kill(int pid, int sig)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800193a:	f004 fd5f 	bl	80063fc <__errno>
 800193e:	4603      	mov	r3, r0
 8001940:	2216      	movs	r2, #22
 8001942:	601a      	str	r2, [r3, #0]
  return -1;
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_exit>:

void _exit (int status)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffe7 	bl	8001930 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001962:	bf00      	nop
 8001964:	e7fd      	b.n	8001962 <_exit+0x12>

08001966 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e00a      	b.n	800198e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001978:	f3af 8000 	nop.w
 800197c:	4601      	mov	r1, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	60ba      	str	r2, [r7, #8]
 8001984:	b2ca      	uxtb	r2, r1
 8001986:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	dbf0      	blt.n	8001978 <_read+0x12>
  }

  return len;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e009      	b.n	80019c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	60ba      	str	r2, [r7, #8]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbf1      	blt.n	80019b2 <_write+0x12>
  }
  return len;
 80019ce:	687b      	ldr	r3, [r7, #4]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_close>:

int _close(int file)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a00:	605a      	str	r2, [r3, #4]
  return 0;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_isatty>:

int _isatty(int file)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	@ (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f004 fcc4 	bl	80063fc <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	@ (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20018000 	.word	0x20018000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	20000558 	.word	0x20000558
 8001aa8:	200006b0 	.word	0x200006b0

08001aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad4:	f7ff ffea 	bl	8001aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001ada:	490d      	ldr	r1, [pc, #52]	@ (8001b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001adc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b14 <LoopForever+0xe>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af0:	4c0a      	ldr	r4, [pc, #40]	@ (8001b1c <LoopForever+0x16>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afe:	f004 fc83 	bl	8006408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b02:	f7ff fc45 	bl	8001390 <main>

08001b06 <LoopForever>:

LoopForever:
    b LoopForever
 8001b06:	e7fe      	b.n	8001b06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b14:	080088f0 	.word	0x080088f0
  ldr r2, =_sbss
 8001b18:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b1c:	200006ac 	.word	0x200006ac

08001b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC1_2_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <HAL_Init+0x3c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <HAL_Init+0x3c>)
 8001b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	f000 f93e 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b40:	2000      	movs	r0, #0
 8001b42:	f000 f80f 	bl	8001b64 <HAL_InitTick>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	71fb      	strb	r3, [r7, #7]
 8001b50:	e001      	b.n	8001b56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b52:	f7ff fda1 	bl	8001698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40022000 	.word	0x40022000

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b70:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <HAL_InitTick+0x6c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d023      	beq.n	8001bc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <HAL_InitTick+0x70>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <HAL_InitTick+0x6c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f949 	bl	8001e26 <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10f      	bne.n	8001bba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d809      	bhi.n	8001bb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 f913 	bl	8001dd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bac:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <HAL_InitTick+0x74>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e007      	b.n	8001bc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e004      	b.n	8001bc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e001      	b.n	8001bc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001be0:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_IncTick+0x20>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_IncTick+0x24>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <HAL_IncTick+0x24>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2000055c 	.word	0x2000055c

08001c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return uwTick;
 8001c08:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <HAL_GetTick+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	2000055c 	.word	0x2000055c

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	@ (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	@ (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d88:	d301      	bcc.n	8001d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00f      	b.n	8001dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <SysTick_Config+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d96:	210f      	movs	r1, #15
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f7ff ff8e 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <SysTick_Config+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <SysTick_Config+0x40>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff29 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001de4:	f7ff ff3e 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff8e 	bl	8001d10 <NVIC_EncodePriority>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff31 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffa2 	bl	8001d78 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d005      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e029      	b.n	8001eb6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 020e 	bic.w	r2, r2, #14
 8001e70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f003 021c 	and.w	r2, r3, #28
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	2101      	movs	r1, #1
 8001e90:	fa01 f202 	lsl.w	r2, r1, r2
 8001e94:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	4798      	blx	r3
    }
  }
  return status;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ece:	e17f      	b.n	80021d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8171 	beq.w	80021ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d005      	beq.n	8001f00 <HAL_GPIO_Init+0x40>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d130      	bne.n	8001f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f36:	2201      	movs	r2, #1
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	f003 0201 	and.w	r2, r3, #1
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d118      	bne.n	8001fa0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f74:	2201      	movs	r2, #1
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	f003 0201 	and.w	r2, r3, #1
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d017      	beq.n	8001fdc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d123      	bne.n	8002030 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	6939      	ldr	r1, [r7, #16]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80ac 	beq.w	80021ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	4b5f      	ldr	r3, [pc, #380]	@ (80021f0 <HAL_GPIO_Init+0x330>)
 8002074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002076:	4a5e      	ldr	r2, [pc, #376]	@ (80021f0 <HAL_GPIO_Init+0x330>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6613      	str	r3, [r2, #96]	@ 0x60
 800207e:	4b5c      	ldr	r3, [pc, #368]	@ (80021f0 <HAL_GPIO_Init+0x330>)
 8002080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800208a:	4a5a      	ldr	r2, [pc, #360]	@ (80021f4 <HAL_GPIO_Init+0x334>)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020b4:	d025      	beq.n	8002102 <HAL_GPIO_Init+0x242>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4f      	ldr	r2, [pc, #316]	@ (80021f8 <HAL_GPIO_Init+0x338>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <HAL_GPIO_Init+0x23e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4e      	ldr	r2, [pc, #312]	@ (80021fc <HAL_GPIO_Init+0x33c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x23a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002200 <HAL_GPIO_Init+0x340>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x236>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002204 <HAL_GPIO_Init+0x344>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x232>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002208 <HAL_GPIO_Init+0x348>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x22e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4a      	ldr	r2, [pc, #296]	@ (800220c <HAL_GPIO_Init+0x34c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x22a>
 80020e6:	2306      	movs	r3, #6
 80020e8:	e00c      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e00a      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020ee:	2305      	movs	r3, #5
 80020f0:	e008      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020f2:	2304      	movs	r3, #4
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020f6:	2303      	movs	r3, #3
 80020f8:	e004      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_Init+0x244>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_GPIO_Init+0x244>
 8002102:	2300      	movs	r3, #0
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	f002 0203 	and.w	r2, r2, #3
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	4093      	lsls	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002114:	4937      	ldr	r1, [pc, #220]	@ (80021f4 <HAL_GPIO_Init+0x334>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002122:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <HAL_GPIO_Init+0x350>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002146:	4a32      	ldr	r2, [pc, #200]	@ (8002210 <HAL_GPIO_Init+0x350>)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800214c:	4b30      	ldr	r3, [pc, #192]	@ (8002210 <HAL_GPIO_Init+0x350>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002170:	4a27      	ldr	r2, [pc, #156]	@ (8002210 <HAL_GPIO_Init+0x350>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002176:	4b26      	ldr	r3, [pc, #152]	@ (8002210 <HAL_GPIO_Init+0x350>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800219a:	4a1d      	ldr	r2, [pc, #116]	@ (8002210 <HAL_GPIO_Init+0x350>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <HAL_GPIO_Init+0x350>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021c4:	4a12      	ldr	r2, [pc, #72]	@ (8002210 <HAL_GPIO_Init+0x350>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3301      	adds	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f47f ae78 	bne.w	8001ed0 <HAL_GPIO_Init+0x10>
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010000 	.word	0x40010000
 80021f8:	48000400 	.word	0x48000400
 80021fc:	48000800 	.word	0x48000800
 8002200:	48000c00 	.word	0x48000c00
 8002204:	48001000 	.word	0x48001000
 8002208:	48001400 	.word	0x48001400
 800220c:	48001800 	.word	0x48001800
 8002210:	40010400 	.word	0x40010400

08002214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
 8002220:	4613      	mov	r3, r2
 8002222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002224:	787b      	ldrb	r3, [r7, #1]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002230:	e002      	b.n	8002238 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <HAL_PWREx_GetVoltageRange+0x18>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40007000 	.word	0x40007000

08002260 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800226e:	d130      	bne.n	80022d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002270:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800227c:	d038      	beq.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800227e:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002286:	4a1e      	ldr	r2, [pc, #120]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002288:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800228e:	4b1d      	ldr	r3, [pc, #116]	@ (8002304 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2232      	movs	r2, #50	@ 0x32
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	4a1b      	ldr	r2, [pc, #108]	@ (8002308 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	3301      	adds	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a4:	e002      	b.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b8:	d102      	bne.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f2      	bne.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022cc:	d110      	bne.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e00f      	b.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022de:	d007      	beq.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022e0:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022e8:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40007000 	.word	0x40007000
 8002304:	20000000 	.word	0x20000000
 8002308:	431bde83 	.word	0x431bde83

0800230c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e3ca      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231e:	4b97      	ldr	r3, [pc, #604]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002328:	4b94      	ldr	r3, [pc, #592]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80e4 	beq.w	8002508 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <HAL_RCC_OscConfig+0x4a>
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	f040 808b 	bne.w	8002464 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b01      	cmp	r3, #1
 8002352:	f040 8087 	bne.w	8002464 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002356:	4b89      	ldr	r3, [pc, #548]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x62>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e3a2      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1a      	ldr	r2, [r3, #32]
 8002372:	4b82      	ldr	r3, [pc, #520]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <HAL_RCC_OscConfig+0x7c>
 800237e:	4b7f      	ldr	r3, [pc, #508]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002386:	e005      	b.n	8002394 <HAL_RCC_OscConfig+0x88>
 8002388:	4b7c      	ldr	r3, [pc, #496]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800238a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002394:	4293      	cmp	r3, r2
 8002396:	d223      	bcs.n	80023e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fd55 	bl	8002e4c <RCC_SetFlashLatencyFromMSIRange>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e383      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ac:	4b73      	ldr	r3, [pc, #460]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a72      	ldr	r2, [pc, #456]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b70      	ldr	r3, [pc, #448]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	496d      	ldr	r1, [pc, #436]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ca:	4b6c      	ldr	r3, [pc, #432]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	4968      	ldr	r1, [pc, #416]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
 80023de:	e025      	b.n	800242c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e0:	4b66      	ldr	r3, [pc, #408]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a65      	ldr	r2, [pc, #404]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023e6:	f043 0308 	orr.w	r3, r3, #8
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b63      	ldr	r3, [pc, #396]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4960      	ldr	r1, [pc, #384]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023fe:	4b5f      	ldr	r3, [pc, #380]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	495b      	ldr	r1, [pc, #364]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fd15 	bl	8002e4c <RCC_SetFlashLatencyFromMSIRange>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e343      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800242c:	f000 fc4a 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002430:	4602      	mov	r2, r0
 8002432:	4b52      	ldr	r3, [pc, #328]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	4950      	ldr	r1, [pc, #320]	@ (8002580 <HAL_RCC_OscConfig+0x274>)
 800243e:	5ccb      	ldrb	r3, [r1, r3]
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	4a4e      	ldr	r2, [pc, #312]	@ (8002584 <HAL_RCC_OscConfig+0x278>)
 800244a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800244c:	4b4e      	ldr	r3, [pc, #312]	@ (8002588 <HAL_RCC_OscConfig+0x27c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fb87 	bl	8001b64 <HAL_InitTick>
 8002456:	4603      	mov	r3, r0
 8002458:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d052      	beq.n	8002506 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	e327      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d032      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800246c:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a42      	ldr	r2, [pc, #264]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002478:	f7ff fbc4 	bl	8001c04 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002480:	f7ff fbc0 	bl	8001c04 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e310      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002492:	4b3a      	ldr	r3, [pc, #232]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249e:	4b37      	ldr	r3, [pc, #220]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a36      	ldr	r2, [pc, #216]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b34      	ldr	r3, [pc, #208]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4931      	ldr	r1, [pc, #196]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024bc:	4b2f      	ldr	r3, [pc, #188]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	492c      	ldr	r1, [pc, #176]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e01a      	b.n	8002508 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024d2:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a29      	ldr	r2, [pc, #164]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024de:	f7ff fb91 	bl	8001c04 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e6:	f7ff fb8d 	bl	8001c04 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e2dd      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f8:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x1da>
 8002504:	e000      	b.n	8002508 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002506:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d074      	beq.n	80025fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b08      	cmp	r3, #8
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x21a>
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d10e      	bne.n	800253e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d10b      	bne.n	800253e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002526:	4b15      	ldr	r3, [pc, #84]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d064      	beq.n	80025fc <HAL_RCC_OscConfig+0x2f0>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d160      	bne.n	80025fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e2ba      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x24a>
 8002548:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0b      	ldr	r2, [pc, #44]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e026      	b.n	80025a4 <HAL_RCC_OscConfig+0x298>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800255e:	d115      	bne.n	800258c <HAL_RCC_OscConfig+0x280>
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a05      	ldr	r2, [pc, #20]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002566:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a02      	ldr	r2, [pc, #8]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e014      	b.n	80025a4 <HAL_RCC_OscConfig+0x298>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	08008528 	.word	0x08008528
 8002584:	20000000 	.word	0x20000000
 8002588:	20000004 	.word	0x20000004
 800258c:	4ba0      	ldr	r3, [pc, #640]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a9f      	ldr	r2, [pc, #636]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b9d      	ldr	r3, [pc, #628]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a9c      	ldr	r2, [pc, #624]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800259e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff fb2a 	bl	8001c04 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7ff fb26 	bl	8001c04 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	@ 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e276      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c6:	4b92      	ldr	r3, [pc, #584]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x2a8>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7ff fb16 	bl	8001c04 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7ff fb12 	bl	8001c04 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	@ 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e262      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ee:	4b88      	ldr	r3, [pc, #544]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x2d0>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d060      	beq.n	80026cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d005      	beq.n	800261c <HAL_RCC_OscConfig+0x310>
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d119      	bne.n	800264a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d116      	bne.n	800264a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800261c:	4b7c      	ldr	r3, [pc, #496]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_OscConfig+0x328>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e23f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b76      	ldr	r3, [pc, #472]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	061b      	lsls	r3, r3, #24
 8002642:	4973      	ldr	r1, [pc, #460]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002648:	e040      	b.n	80026cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d023      	beq.n	800269a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002652:	4b6f      	ldr	r3, [pc, #444]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6e      	ldr	r2, [pc, #440]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7ff fad1 	bl	8001c04 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7ff facd 	bl	8001c04 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e21d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002678:	4b65      	ldr	r3, [pc, #404]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b62      	ldr	r3, [pc, #392]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	495f      	ldr	r1, [pc, #380]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
 8002698:	e018      	b.n	80026cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269a:	4b5d      	ldr	r3, [pc, #372]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a5c      	ldr	r2, [pc, #368]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80026a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7ff faad 	bl	8001c04 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ae:	f7ff faa9 	bl	8001c04 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1f9      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c0:	4b53      	ldr	r3, [pc, #332]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d03c      	beq.n	8002752 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01c      	beq.n	800271a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7ff fa88 	bl	8001c04 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7ff fa84 	bl	8001c04 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1d4      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270a:	4b41      	ldr	r3, [pc, #260]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800270c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ef      	beq.n	80026f8 <HAL_RCC_OscConfig+0x3ec>
 8002718:	e01b      	b.n	8002752 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271a:	4b3d      	ldr	r3, [pc, #244]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800271c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002720:	4a3b      	ldr	r2, [pc, #236]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7ff fa6b 	bl	8001c04 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002732:	f7ff fa67 	bl	8001c04 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1b7      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002744:	4b32      	ldr	r3, [pc, #200]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ef      	bne.n	8002732 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80a6 	beq.w	80028ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002760:	2300      	movs	r3, #0
 8002762:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002764:	4b2a      	ldr	r3, [pc, #168]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10d      	bne.n	800278c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002770:	4b27      	ldr	r3, [pc, #156]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002774:	4a26      	ldr	r2, [pc, #152]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277a:	6593      	str	r3, [r2, #88]	@ 0x58
 800277c:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002788:	2301      	movs	r3, #1
 800278a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278c:	4b21      	ldr	r3, [pc, #132]	@ (8002814 <HAL_RCC_OscConfig+0x508>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d118      	bne.n	80027ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002798:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <HAL_RCC_OscConfig+0x508>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1d      	ldr	r2, [pc, #116]	@ (8002814 <HAL_RCC_OscConfig+0x508>)
 800279e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a4:	f7ff fa2e 	bl	8001c04 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ac:	f7ff fa2a 	bl	8001c04 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e17a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <HAL_RCC_OscConfig+0x508>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d108      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4d8>
 80027d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027e2:	e029      	b.n	8002838 <HAL_RCC_OscConfig+0x52c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d115      	bne.n	8002818 <HAL_RCC_OscConfig+0x50c>
 80027ec:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f2:	4a07      	ldr	r2, [pc, #28]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027fc:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002802:	4a03      	ldr	r2, [pc, #12]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800280c:	e014      	b.n	8002838 <HAL_RCC_OscConfig+0x52c>
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	40007000 	.word	0x40007000
 8002818:	4b9c      	ldr	r3, [pc, #624]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281e:	4a9b      	ldr	r2, [pc, #620]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002828:	4b98      	ldr	r3, [pc, #608]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282e:	4a97      	ldr	r2, [pc, #604]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002830:	f023 0304 	bic.w	r3, r3, #4
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d016      	beq.n	800286e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7ff f9e0 	bl	8001c04 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002846:	e00a      	b.n	800285e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002848:	f7ff f9dc 	bl	8001c04 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e12a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ed      	beq.n	8002848 <HAL_RCC_OscConfig+0x53c>
 800286c:	e015      	b.n	800289a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7ff f9c9 	bl	8001c04 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7ff f9c5 	bl	8001c04 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e113      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800288c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ed      	bne.n	8002876 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800289a:	7ffb      	ldrb	r3, [r7, #31]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d105      	bne.n	80028ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a0:	4b7a      	ldr	r3, [pc, #488]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	4a79      	ldr	r2, [pc, #484]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80028a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80fe 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	f040 80d0 	bne.w	8002a60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028c0:	4b72      	ldr	r3, [pc, #456]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d130      	bne.n	8002936 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	3b01      	subs	r3, #1
 80028e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d127      	bne.n	8002936 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d11f      	bne.n	8002936 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002900:	2a07      	cmp	r2, #7
 8002902:	bf14      	ite	ne
 8002904:	2201      	movne	r2, #1
 8002906:	2200      	moveq	r2, #0
 8002908:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800290a:	4293      	cmp	r3, r2
 800290c:	d113      	bne.n	8002936 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	3b01      	subs	r3, #1
 800291c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d109      	bne.n	8002936 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	3b01      	subs	r3, #1
 8002930:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d06e      	beq.n	8002a14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b0c      	cmp	r3, #12
 800293a:	d069      	beq.n	8002a10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800293c:	4b53      	ldr	r3, [pc, #332]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002948:	4b50      	ldr	r3, [pc, #320]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0ad      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002958:	4b4c      	ldr	r3, [pc, #304]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800295e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002962:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002964:	f7ff f94e 	bl	8001c04 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7ff f94a 	bl	8001c04 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e09a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297e:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298a:	4b40      	ldr	r3, [pc, #256]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	4b40      	ldr	r3, [pc, #256]	@ (8002a90 <HAL_RCC_OscConfig+0x784>)
 8002990:	4013      	ands	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800299a:	3a01      	subs	r2, #1
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029a4:	0212      	lsls	r2, r2, #8
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029ac:	0852      	lsrs	r2, r2, #1
 80029ae:	3a01      	subs	r2, #1
 80029b0:	0552      	lsls	r2, r2, #21
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029b8:	0852      	lsrs	r2, r2, #1
 80029ba:	3a01      	subs	r2, #1
 80029bc:	0652      	lsls	r2, r2, #25
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029c4:	0912      	lsrs	r2, r2, #4
 80029c6:	0452      	lsls	r2, r2, #17
 80029c8:	430a      	orrs	r2, r1
 80029ca:	4930      	ldr	r1, [pc, #192]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029d0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80029e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e8:	f7ff f90c 	bl	8001c04 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7ff f908 	bl	8001c04 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e058      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a02:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a0e:	e050      	b.n	8002ab2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e04f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a14:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d148      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a2c:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a16      	ldr	r2, [pc, #88]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a38:	f7ff f8e4 	bl	8001c04 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff f8e0 	bl	8001c04 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e030      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x734>
 8002a5e:	e028      	b.n	8002ab2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d023      	beq.n	8002aae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a08      	ldr	r2, [pc, #32]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7ff f8c7 	bl	8001c04 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a78:	e00c      	b.n	8002a94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7ff f8c3 	bl	8001c04 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d905      	bls.n	8002a94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e013      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_RCC_OscConfig+0x7b0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ec      	bne.n	8002a7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_RCC_OscConfig+0x7b0>)
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	4905      	ldr	r1, [pc, #20]	@ (8002abc <HAL_RCC_OscConfig+0x7b0>)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_RCC_OscConfig+0x7b4>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60cb      	str	r3, [r1, #12]
 8002aac:	e001      	b.n	8002ab2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	feeefffc 	.word	0xfeeefffc

08002ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0e7      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b75      	ldr	r3, [pc, #468]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b72      	ldr	r3, [pc, #456]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	4970      	ldr	r1, [pc, #448]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b6e      	ldr	r3, [pc, #440]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0cf      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d010      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b66      	ldr	r3, [pc, #408]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d908      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b63      	ldr	r3, [pc, #396]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4960      	ldr	r1, [pc, #384]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04c      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d121      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e0a6      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b62:	4b54      	ldr	r3, [pc, #336]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d115      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e09a      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e08e      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e086      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b46      	ldr	r3, [pc, #280]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4943      	ldr	r1, [pc, #268]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7ff f82a 	bl	8001c04 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7ff f826 	bl	8001c04 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e06e      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	4b31      	ldr	r3, [pc, #196]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d208      	bcs.n	8002c0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	492b      	ldr	r1, [pc, #172]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0a:	4b29      	ldr	r3, [pc, #164]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d210      	bcs.n	8002c3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c18:	4b25      	ldr	r3, [pc, #148]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 0207 	bic.w	r2, r3, #7
 8002c20:	4923      	ldr	r1, [pc, #140]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c28:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e036      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c46:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4918      	ldr	r1, [pc, #96]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d009      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4910      	ldr	r1, [pc, #64]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c78:	f000 f824 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	490b      	ldr	r1, [pc, #44]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f4>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
 8002c94:	4a09      	ldr	r2, [pc, #36]	@ (8002cbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe ff61 	bl	8001b64 <HAL_InitTick>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	08008528 	.word	0x08008528
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	@ 0x24
 8002cc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d121      	bne.n	8002d36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d11e      	bne.n	8002d36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cf8:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d04:	4b31      	ldr	r3, [pc, #196]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e005      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d14:	4b2d      	ldr	r3, [pc, #180]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d20:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d102      	bne.n	8002d42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d3c:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	e004      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d48:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d134      	bne.n	8002dbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d003      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0xac>
 8002d68:	e005      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d6c:	617b      	str	r3, [r7, #20]
      break;
 8002d6e:	e005      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d72:	617b      	str	r3, [r7, #20]
      break;
 8002d74:	e002      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	617b      	str	r3, [r7, #20]
      break;
 8002d7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d7c:	4b13      	ldr	r3, [pc, #76]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	3301      	adds	r3, #1
 8002d88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d8a:	4b10      	ldr	r3, [pc, #64]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	fb03 f202 	mul.w	r2, r3, r2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002da2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	0e5b      	lsrs	r3, r3, #25
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	3301      	adds	r3, #1
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dbc:	69bb      	ldr	r3, [r7, #24]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	@ 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08008540 	.word	0x08008540
 8002dd4:	00f42400 	.word	0x00f42400
 8002dd8:	007a1200 	.word	0x007a1200

08002ddc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000000 	.word	0x20000000

08002df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002df8:	f7ff fff0 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4904      	ldr	r1, [pc, #16]	@ (8002e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08008538 	.word	0x08008538

08002e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e24:	f7ff ffda 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	0adb      	lsrs	r3, r3, #11
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4904      	ldr	r1, [pc, #16]	@ (8002e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e36:	5ccb      	ldrb	r3, [r1, r3]
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08008538 	.word	0x08008538

08002e4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e58:	4b2a      	ldr	r3, [pc, #168]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e64:	f7ff f9ee 	bl	8002244 <HAL_PWREx_GetVoltageRange>
 8002e68:	6178      	str	r0, [r7, #20]
 8002e6a:	e014      	b.n	8002e96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e6c:	4b25      	ldr	r3, [pc, #148]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e70:	4a24      	ldr	r2, [pc, #144]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e78:	4b22      	ldr	r3, [pc, #136]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e84:	f7ff f9de 	bl	8002244 <HAL_PWREx_GetVoltageRange>
 8002e88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e9c:	d10b      	bne.n	8002eb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b80      	cmp	r3, #128	@ 0x80
 8002ea2:	d919      	bls.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ea8:	d902      	bls.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eaa:	2302      	movs	r3, #2
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e013      	b.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	e010      	b.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b80      	cmp	r3, #128	@ 0x80
 8002eba:	d902      	bls.n	8002ec2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	e00a      	b.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b80      	cmp	r3, #128	@ 0x80
 8002ec6:	d102      	bne.n	8002ece <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ec8:	2302      	movs	r3, #2
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	e004      	b.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b70      	cmp	r3, #112	@ 0x70
 8002ed2:	d101      	bne.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 0207 	bic.w	r2, r3, #7
 8002ee0:	4909      	ldr	r1, [pc, #36]	@ (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ee8:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40022000 	.word	0x40022000

08002f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f14:	2300      	movs	r3, #0
 8002f16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f18:	2300      	movs	r3, #0
 8002f1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d041      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f30:	d02a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f36:	d824      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f42:	d81e      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f4e:	e018      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f50:	4b86      	ldr	r3, [pc, #536]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a85      	ldr	r2, [pc, #532]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f5c:	e015      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fabb 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f6e:	e00c      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3320      	adds	r3, #32
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fba6 	bl	80036c8 <RCCEx_PLLSAI2_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f80:	e003      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	74fb      	strb	r3, [r7, #19]
      break;
 8002f86:	e000      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f90:	4b76      	ldr	r3, [pc, #472]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f9e:	4973      	ldr	r1, [pc, #460]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fa6:	e001      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d041      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fc0:	d02a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fc6:	d824      	bhi.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fcc:	d008      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fd2:	d81e      	bhi.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fdc:	d010      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fde:	e018      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fe0:	4b62      	ldr	r3, [pc, #392]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4a61      	ldr	r2, [pc, #388]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fec:	e015      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fa73 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ffe:	e00c      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3320      	adds	r3, #32
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fb5e 	bl	80036c8 <RCCEx_PLLSAI2_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003010:	e003      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	74fb      	strb	r3, [r7, #19]
      break;
 8003016:	e000      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800301a:	7cfb      	ldrb	r3, [r7, #19]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10b      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003020:	4b52      	ldr	r3, [pc, #328]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003026:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800302e:	494f      	ldr	r1, [pc, #316]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003036:	e001      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a0 	beq.w	800318a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800304e:	4b47      	ldr	r3, [pc, #284]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b41      	ldr	r3, [pc, #260]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	4a40      	ldr	r2, [pc, #256]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003070:	4b3e      	ldr	r3, [pc, #248]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307c:	2301      	movs	r3, #1
 800307e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003080:	4b3b      	ldr	r3, [pc, #236]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a3a      	ldr	r2, [pc, #232]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800308c:	f7fe fdba 	bl	8001c04 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003092:	e009      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003094:	f7fe fdb6 	bl	8001c04 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d902      	bls.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	74fb      	strb	r3, [r7, #19]
        break;
 80030a6:	e005      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030a8:	4b31      	ldr	r3, [pc, #196]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ef      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d15c      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030ba:	4b2c      	ldr	r3, [pc, #176]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01f      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d019      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030d8:	4b24      	ldr	r3, [pc, #144]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030e4:	4b21      	ldr	r3, [pc, #132]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ea:	4a20      	ldr	r2, [pc, #128]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030f4:	4b1d      	ldr	r3, [pc, #116]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fa:	4a1c      	ldr	r2, [pc, #112]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003104:	4a19      	ldr	r2, [pc, #100]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe fd75 	bl	8001c04 <HAL_GetTick>
 800311a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311c:	e00b      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7fe fd71 	bl	8001c04 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d902      	bls.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	74fb      	strb	r3, [r7, #19]
            break;
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003136:	4b0d      	ldr	r3, [pc, #52]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ec      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800315a:	4904      	ldr	r1, [pc, #16]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003162:	e009      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003178:	7c7b      	ldrb	r3, [r7, #17]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317e:	4b9e      	ldr	r3, [pc, #632]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	4a9d      	ldr	r2, [pc, #628]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003188:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003196:	4b98      	ldr	r3, [pc, #608]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319c:	f023 0203 	bic.w	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a4:	4994      	ldr	r1, [pc, #592]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b8:	4b8f      	ldr	r3, [pc, #572]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031be:	f023 020c 	bic.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c6:	498c      	ldr	r1, [pc, #560]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031da:	4b87      	ldr	r3, [pc, #540]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	4983      	ldr	r1, [pc, #524]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031fc:	4b7e      	ldr	r3, [pc, #504]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	497b      	ldr	r1, [pc, #492]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800321e:	4b76      	ldr	r3, [pc, #472]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003224:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800322c:	4972      	ldr	r1, [pc, #456]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003240:	4b6d      	ldr	r3, [pc, #436]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324e:	496a      	ldr	r1, [pc, #424]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003262:	4b65      	ldr	r3, [pc, #404]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003270:	4961      	ldr	r1, [pc, #388]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003284:	4b5c      	ldr	r3, [pc, #368]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	4959      	ldr	r1, [pc, #356]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032a6:	4b54      	ldr	r3, [pc, #336]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b4:	4950      	ldr	r1, [pc, #320]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032c8:	4b4b      	ldr	r3, [pc, #300]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d6:	4948      	ldr	r1, [pc, #288]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ea:	4b43      	ldr	r3, [pc, #268]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	493f      	ldr	r1, [pc, #252]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d028      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800330c:	4b3a      	ldr	r3, [pc, #232]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800331a:	4937      	ldr	r1, [pc, #220]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800332a:	d106      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800332c:	4b32      	ldr	r3, [pc, #200]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a31      	ldr	r2, [pc, #196]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003336:	60d3      	str	r3, [r2, #12]
 8003338:	e011      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800333e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003342:	d10c      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	2101      	movs	r1, #1
 800334a:	4618      	mov	r0, r3
 800334c:	f000 f8c8 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d028      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800336a:	4b23      	ldr	r3, [pc, #140]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003370:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	491f      	ldr	r1, [pc, #124]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003388:	d106      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800338a:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	4a1a      	ldr	r2, [pc, #104]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003394:	60d3      	str	r3, [r2, #12]
 8003396:	e011      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f899 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02b      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d6:	4908      	ldr	r1, [pc, #32]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033e6:	d109      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e8:	4b03      	ldr	r3, [pc, #12]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a02      	ldr	r2, [pc, #8]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033f2:	60d3      	str	r3, [r2, #12]
 80033f4:	e014      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003400:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003404:	d10c      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	2101      	movs	r1, #1
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f867 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02f      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800342c:	4b2b      	ldr	r3, [pc, #172]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003432:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800343a:	4928      	ldr	r1, [pc, #160]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003446:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800344a:	d10d      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	2102      	movs	r1, #2
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f844 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d014      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	74bb      	strb	r3, [r7, #18]
 8003466:	e011      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800346c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003470:	d10c      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3320      	adds	r3, #32
 8003476:	2102      	movs	r1, #2
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f925 	bl	80036c8 <RCCEx_PLLSAI2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003498:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034a6:	490d      	ldr	r1, [pc, #52]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034ba:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ca:	4904      	ldr	r1, [pc, #16]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000

080034e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ee:	4b75      	ldr	r3, [pc, #468]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d018      	beq.n	800352c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034fa:	4b72      	ldr	r3, [pc, #456]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0203 	and.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d10d      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
       ||
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003512:	4b6c      	ldr	r3, [pc, #432]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
       ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d047      	beq.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e044      	b.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d018      	beq.n	8003566 <RCCEx_PLLSAI1_Config+0x86>
 8003534:	2b03      	cmp	r3, #3
 8003536:	d825      	bhi.n	8003584 <RCCEx_PLLSAI1_Config+0xa4>
 8003538:	2b01      	cmp	r3, #1
 800353a:	d002      	beq.n	8003542 <RCCEx_PLLSAI1_Config+0x62>
 800353c:	2b02      	cmp	r3, #2
 800353e:	d009      	beq.n	8003554 <RCCEx_PLLSAI1_Config+0x74>
 8003540:	e020      	b.n	8003584 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003542:	4b60      	ldr	r3, [pc, #384]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11d      	bne.n	800358a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003552:	e01a      	b.n	800358a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003554:	4b5b      	ldr	r3, [pc, #364]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003564:	e013      	b.n	800358e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003566:	4b57      	ldr	r3, [pc, #348]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003572:	4b54      	ldr	r3, [pc, #336]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003582:	e006      	b.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e004      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800358a:	bf00      	nop
 800358c:	e002      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003592:	bf00      	nop
    }

    if(status == HAL_OK)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10d      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800359a:	4b4a      	ldr	r3, [pc, #296]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	430b      	orrs	r3, r1
 80035b0:	4944      	ldr	r1, [pc, #272]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d17d      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035bc:	4b41      	ldr	r3, [pc, #260]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a40      	ldr	r2, [pc, #256]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c8:	f7fe fb1c 	bl	8001c04 <HAL_GetTick>
 80035cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ce:	e009      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d0:	f7fe fb18 	bl	8001c04 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d902      	bls.n	80035e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	73fb      	strb	r3, [r7, #15]
        break;
 80035e2:	e005      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035e4:	4b37      	ldr	r3, [pc, #220]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ef      	bne.n	80035d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d160      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d111      	bne.n	8003620 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035fc:	4b31      	ldr	r3, [pc, #196]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	0211      	lsls	r1, r2, #8
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68d2      	ldr	r2, [r2, #12]
 8003612:	0912      	lsrs	r2, r2, #4
 8003614:	0452      	lsls	r2, r2, #17
 8003616:	430a      	orrs	r2, r1
 8003618:	492a      	ldr	r1, [pc, #168]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	610b      	str	r3, [r1, #16]
 800361e:	e027      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d112      	bne.n	800364c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003626:	4b27      	ldr	r3, [pc, #156]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800362e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6892      	ldr	r2, [r2, #8]
 8003636:	0211      	lsls	r1, r2, #8
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6912      	ldr	r2, [r2, #16]
 800363c:	0852      	lsrs	r2, r2, #1
 800363e:	3a01      	subs	r2, #1
 8003640:	0552      	lsls	r2, r2, #21
 8003642:	430a      	orrs	r2, r1
 8003644:	491f      	ldr	r1, [pc, #124]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	610b      	str	r3, [r1, #16]
 800364a:	e011      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800364c:	4b1d      	ldr	r3, [pc, #116]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003654:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6892      	ldr	r2, [r2, #8]
 800365c:	0211      	lsls	r1, r2, #8
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6952      	ldr	r2, [r2, #20]
 8003662:	0852      	lsrs	r2, r2, #1
 8003664:	3a01      	subs	r2, #1
 8003666:	0652      	lsls	r2, r2, #25
 8003668:	430a      	orrs	r2, r1
 800366a:	4916      	ldr	r1, [pc, #88]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003670:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a13      	ldr	r2, [pc, #76]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003676:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800367a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fe fac2 	bl	8001c04 <HAL_GetTick>
 8003680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003682:	e009      	b.n	8003698 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003684:	f7fe fabe 	bl	8001c04 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	73fb      	strb	r3, [r7, #15]
          break;
 8003696:	e005      	b.n	80036a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003698:	4b0a      	ldr	r3, [pc, #40]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ef      	beq.n	8003684 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	4904      	ldr	r1, [pc, #16]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000

080036c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036e2:	4b67      	ldr	r3, [pc, #412]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d10d      	bne.n	800370e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
       ||
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036fa:	4b61      	ldr	r3, [pc, #388]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
       ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d047      	beq.n	800379e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e044      	b.n	800379e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d018      	beq.n	800374e <RCCEx_PLLSAI2_Config+0x86>
 800371c:	2b03      	cmp	r3, #3
 800371e:	d825      	bhi.n	800376c <RCCEx_PLLSAI2_Config+0xa4>
 8003720:	2b01      	cmp	r3, #1
 8003722:	d002      	beq.n	800372a <RCCEx_PLLSAI2_Config+0x62>
 8003724:	2b02      	cmp	r3, #2
 8003726:	d009      	beq.n	800373c <RCCEx_PLLSAI2_Config+0x74>
 8003728:	e020      	b.n	800376c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800372a:	4b55      	ldr	r3, [pc, #340]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11d      	bne.n	8003772 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373a:	e01a      	b.n	8003772 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800373c:	4b50      	ldr	r3, [pc, #320]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374c:	e013      	b.n	8003776 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800374e:	4b4c      	ldr	r3, [pc, #304]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800375a:	4b49      	ldr	r3, [pc, #292]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800376a:	e006      	b.n	800377a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e004      	b.n	800377c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800377a:	bf00      	nop
    }

    if(status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10d      	bne.n	800379e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003782:	4b3f      	ldr	r3, [pc, #252]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	430b      	orrs	r3, r1
 8003798:	4939      	ldr	r1, [pc, #228]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	4313      	orrs	r3, r2
 800379c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d167      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037a4:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a35      	ldr	r2, [pc, #212]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fe fa28 	bl	8001c04 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037b6:	e009      	b.n	80037cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037b8:	f7fe fa24 	bl	8001c04 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	73fb      	strb	r3, [r7, #15]
        break;
 80037ca:	e005      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ef      	bne.n	80037b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d14a      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037e4:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	0211      	lsls	r1, r2, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	0912      	lsrs	r2, r2, #4
 80037fc:	0452      	lsls	r2, r2, #17
 80037fe:	430a      	orrs	r2, r1
 8003800:	491f      	ldr	r1, [pc, #124]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003802:	4313      	orrs	r3, r2
 8003804:	614b      	str	r3, [r1, #20]
 8003806:	e011      	b.n	800382c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003808:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003810:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6892      	ldr	r2, [r2, #8]
 8003818:	0211      	lsls	r1, r2, #8
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6912      	ldr	r2, [r2, #16]
 800381e:	0852      	lsrs	r2, r2, #1
 8003820:	3a01      	subs	r2, #1
 8003822:	0652      	lsls	r2, r2, #25
 8003824:	430a      	orrs	r2, r1
 8003826:	4916      	ldr	r1, [pc, #88]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003828:	4313      	orrs	r3, r2
 800382a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800382c:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a13      	ldr	r2, [pc, #76]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe f9e4 	bl	8001c04 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800383e:	e009      	b.n	8003854 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003840:	f7fe f9e0 	bl	8001c04 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	73fb      	strb	r3, [r7, #15]
          break;
 8003852:	e005      	b.n	8003860 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	4904      	ldr	r1, [pc, #16]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	4313      	orrs	r3, r2
 8003872:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000

08003884 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e095      	b.n	80039c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	d108      	bne.n	80038b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038a6:	d009      	beq.n	80038bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]
 80038ae:	e005      	b.n	80038bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd ff02 	bl	80016e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038fc:	d902      	bls.n	8003904 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	e002      	b.n	800390a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003908:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003912:	d007      	beq.n	8003924 <HAL_SPI_Init+0xa0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800391c:	d002      	beq.n	8003924 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003966:	ea42 0103 	orr.w	r1, r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	f003 0204 	and.w	r2, r3, #4
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80039a0:	ea42 0103 	orr.w	r1, r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b088      	sub	sp, #32
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039da:	f7fe f913 	bl	8001c04 <HAL_GetTick>
 80039de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d001      	beq.n	80039f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
 80039f2:	e15c      	b.n	8003cae <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_SPI_Transmit+0x36>
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e154      	b.n	8003cae <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_SPI_Transmit+0x48>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e14d      	b.n	8003cae <HAL_SPI_Transmit+0x2e4>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a64:	d10f      	bne.n	8003a86 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a90:	2b40      	cmp	r3, #64	@ 0x40
 8003a92:	d007      	beq.n	8003aa4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003aac:	d952      	bls.n	8003b54 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_SPI_Transmit+0xf2>
 8003ab6:	8b7b      	ldrh	r3, [r7, #26]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d145      	bne.n	8003b48 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac0:	881a      	ldrh	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ae0:	e032      	b.n	8003b48 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d112      	bne.n	8003b16 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	881a      	ldrh	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	1c9a      	adds	r2, r3, #2
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b14:	e018      	b.n	8003b48 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b16:	f7fe f875 	bl	8001c04 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d803      	bhi.n	8003b2e <HAL_SPI_Transmit+0x164>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d102      	bne.n	8003b34 <HAL_SPI_Transmit+0x16a>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d109      	bne.n	8003b48 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e0b2      	b.n	8003cae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1c7      	bne.n	8003ae2 <HAL_SPI_Transmit+0x118>
 8003b52:	e083      	b.n	8003c5c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_SPI_Transmit+0x198>
 8003b5c:	8b7b      	ldrh	r3, [r7, #26]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d177      	bne.n	8003c52 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d912      	bls.n	8003b92 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b02      	subs	r3, #2
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b90:	e05f      	b.n	8003c52 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003bb8:	e04b      	b.n	8003c52 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d12b      	bne.n	8003c20 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d912      	bls.n	8003bf8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd6:	881a      	ldrh	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b02      	subs	r3, #2
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bf6:	e02c      	b.n	8003c52 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	7812      	ldrb	r2, [r2, #0]
 8003c04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c1e:	e018      	b.n	8003c52 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c20:	f7fd fff0 	bl	8001c04 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d803      	bhi.n	8003c38 <HAL_SPI_Transmit+0x26e>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c36:	d102      	bne.n	8003c3e <HAL_SPI_Transmit+0x274>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e02d      	b.n	8003cae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ae      	bne.n	8003bba <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	6839      	ldr	r1, [r7, #0]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fe09 	bl	8004878 <SPI_EndRxTxTransaction>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b088      	sub	sp, #32
 8003cba:	af02      	add	r7, sp, #8
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e123      	b.n	8003f1e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cde:	d112      	bne.n	8003d06 <HAL_SPI_Receive+0x50>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10e      	bne.n	8003d06 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2204      	movs	r2, #4
 8003cec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f912 	bl	8003f26 <HAL_SPI_TransmitReceive>
 8003d02:	4603      	mov	r3, r0
 8003d04:	e10b      	b.n	8003f1e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d06:	f7fd ff7d 	bl	8001c04 <HAL_GetTick>
 8003d0a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_SPI_Receive+0x62>
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e100      	b.n	8003f1e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_SPI_Receive+0x74>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0f9      	b.n	8003f1e <HAL_SPI_Receive+0x268>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2204      	movs	r2, #4
 8003d36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d7c:	d908      	bls.n	8003d90 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	e007      	b.n	8003da0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d9e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003da8:	d10f      	bne.n	8003dca <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003dc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	d007      	beq.n	8003de8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003de6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003df0:	d875      	bhi.n	8003ede <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003df2:	e037      	b.n	8003e64 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d117      	bne.n	8003e32 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f103 020c 	add.w	r2, r3, #12
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003e30:	e018      	b.n	8003e64 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e32:	f7fd fee7 	bl	8001c04 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d803      	bhi.n	8003e4a <HAL_SPI_Receive+0x194>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d102      	bne.n	8003e50 <HAL_SPI_Receive+0x19a>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e05c      	b.n	8003f1e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1c1      	bne.n	8003df4 <HAL_SPI_Receive+0x13e>
 8003e70:	e03b      	b.n	8003eea <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d115      	bne.n	8003eac <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003eaa:	e018      	b.n	8003ede <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eac:	f7fd feaa 	bl	8001c04 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d803      	bhi.n	8003ec4 <HAL_SPI_Receive+0x20e>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d102      	bne.n	8003eca <HAL_SPI_Receive+0x214>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e01f      	b.n	8003f1e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1c3      	bne.n	8003e72 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fc6a 	bl	80047c8 <SPI_EndRxTransaction>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b08a      	sub	sp, #40	@ 0x28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f34:	2301      	movs	r3, #1
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f38:	f7fd fe64 	bl	8001c04 <HAL_GetTick>
 8003f3c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f44:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003f4c:	887b      	ldrh	r3, [r7, #2]
 8003f4e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f54:	7ffb      	ldrb	r3, [r7, #31]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d00c      	beq.n	8003f74 <HAL_SPI_TransmitReceive+0x4e>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f60:	d106      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x4a>
 8003f6a:	7ffb      	ldrb	r3, [r7, #31]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d001      	beq.n	8003f74 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
 8003f72:	e1f3      	b.n	800435c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x60>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x60>
 8003f80:	887b      	ldrh	r3, [r7, #2]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e1e8      	b.n	800435c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_SPI_TransmitReceive+0x72>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e1e1      	b.n	800435c <HAL_SPI_TransmitReceive+0x436>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d003      	beq.n	8003fb4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2205      	movs	r2, #5
 8003fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	887a      	ldrh	r2, [r7, #2]
 8003fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ff6:	d802      	bhi.n	8003ffe <HAL_SPI_TransmitReceive+0xd8>
 8003ff8:	8abb      	ldrh	r3, [r7, #20]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d908      	bls.n	8004010 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	e007      	b.n	8004020 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800401e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402a:	2b40      	cmp	r3, #64	@ 0x40
 800402c:	d007      	beq.n	800403e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004046:	f240 8083 	bls.w	8004150 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x132>
 8004052:	8afb      	ldrh	r3, [r7, #22]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d16f      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405c:	881a      	ldrh	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407c:	e05c      	b.n	8004138 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b02      	cmp	r3, #2
 800408a:	d11b      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x19e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_SPI_TransmitReceive+0x19e>
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	2b01      	cmp	r3, #1
 800409a:	d113      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d11c      	bne.n	800410c <HAL_SPI_TransmitReceive+0x1e6>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	b292      	uxth	r2, r2
 80040ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	1c9a      	adds	r2, r3, #2
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004108:	2301      	movs	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800410c:	f7fd fd7a 	bl	8001c04 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004118:	429a      	cmp	r2, r3
 800411a:	d80d      	bhi.n	8004138 <HAL_SPI_TransmitReceive+0x212>
 800411c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d009      	beq.n	8004138 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e111      	b.n	800435c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d19d      	bne.n	800407e <HAL_SPI_TransmitReceive+0x158>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d197      	bne.n	800407e <HAL_SPI_TransmitReceive+0x158>
 800414e:	e0e5      	b.n	800431c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x23a>
 8004158:	8afb      	ldrh	r3, [r7, #22]
 800415a:	2b01      	cmp	r3, #1
 800415c:	f040 80d1 	bne.w	8004302 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b01      	cmp	r3, #1
 8004168:	d912      	bls.n	8004190 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416e:	881a      	ldrh	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b02      	subs	r3, #2
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800418e:	e0b8      	b.n	8004302 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	7812      	ldrb	r2, [r2, #0]
 800419c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b6:	e0a4      	b.n	8004302 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d134      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x30a>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d02f      	beq.n	8004230 <HAL_SPI_TransmitReceive+0x30a>
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d12c      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d912      	bls.n	8004206 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e4:	881a      	ldrh	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	1c9a      	adds	r2, r3, #2
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b02      	subs	r3, #2
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004204:	e012      	b.n	800422c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	7812      	ldrb	r2, [r2, #0]
 8004212:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d148      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x3aa>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d042      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d923      	bls.n	800429e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	b292      	uxth	r2, r2
 8004262:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	1c9a      	adds	r2, r3, #2
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b02      	subs	r3, #2
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d81f      	bhi.n	80042cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	e016      	b.n	80042cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f103 020c 	add.w	r2, r3, #12
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042cc:	2301      	movs	r3, #1
 80042ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042d0:	f7fd fc98 	bl	8001c04 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042dc:	429a      	cmp	r2, r3
 80042de:	d803      	bhi.n	80042e8 <HAL_SPI_TransmitReceive+0x3c2>
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d102      	bne.n	80042ee <HAL_SPI_TransmitReceive+0x3c8>
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e02c      	b.n	800435c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	f47f af55 	bne.w	80041b8 <HAL_SPI_TransmitReceive+0x292>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	f47f af4e 	bne.w	80041b8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 faa9 	bl	8004878 <SPI_EndRxTxTransaction>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e00e      	b.n	800435c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800435a:	2300      	movs	r3, #0
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3728      	adds	r7, #40	@ 0x28
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10e      	bne.n	80043a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
    return;
 80043a2:	e0ce      	b.n	8004542 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_SPI_IRQHandler+0x5e>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
    return;
 80043c0:	e0bf      	b.n	8004542 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <HAL_SPI_IRQHandler+0x7e>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d105      	bne.n	80043e2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80b0 	beq.w	8004542 <HAL_SPI_IRQHandler+0x1de>
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80aa 	beq.w	8004542 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d023      	beq.n	8004440 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b03      	cmp	r3, #3
 8004402:	d011      	beq.n	8004428 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004408:	f043 0204 	orr.w	r2, r3, #4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	e00b      	b.n	8004440 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]
        return;
 800443e:	e080      	b.n	8004542 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d014      	beq.n	8004474 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00c      	beq.n	8004498 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004482:	f043 0208 	orr.w	r2, r3, #8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449c:	2b00      	cmp	r3, #0
 800449e:	d04f      	beq.n	8004540 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044ae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <HAL_SPI_IRQHandler+0x168>
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d034      	beq.n	8004536 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0203 	bic.w	r2, r2, #3
 80044da:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d011      	beq.n	8004508 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e8:	4a17      	ldr	r2, [pc, #92]	@ (8004548 <HAL_SPI_IRQHandler+0x1e4>)
 80044ea:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fd fca4 	bl	8001e3e <HAL_DMA_Abort_IT>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004500:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450c:	2b00      	cmp	r3, #0
 800450e:	d016      	beq.n	800453e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004514:	4a0c      	ldr	r2, [pc, #48]	@ (8004548 <HAL_SPI_IRQHandler+0x1e4>)
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451c:	4618      	mov	r0, r3
 800451e:	f7fd fc8e 	bl	8001e3e <HAL_DMA_Abort_IT>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004534:	e003      	b.n	800453e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f808 	bl	800454c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800453c:	e000      	b.n	8004540 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800453e:	bf00      	nop
    return;
 8004540:	bf00      	nop
  }
}
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	08004561 	.word	0x08004561

0800454c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff ffe5 	bl	800454c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800459c:	f7fd fb32 	bl	8001c04 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	4413      	add	r3, r2
 80045aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045ac:	f7fd fb2a 	bl	8001c04 <HAL_GetTick>
 80045b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045b2:	4b39      	ldr	r3, [pc, #228]	@ (8004698 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	015b      	lsls	r3, r3, #5
 80045b8:	0d1b      	lsrs	r3, r3, #20
 80045ba:	69fa      	ldr	r2, [r7, #28]
 80045bc:	fb02 f303 	mul.w	r3, r2, r3
 80045c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c2:	e054      	b.n	800466e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d050      	beq.n	800466e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045cc:	f7fd fb1a 	bl	8001c04 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d902      	bls.n	80045e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d13d      	bne.n	800465e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045fa:	d111      	bne.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004604:	d004      	beq.n	8004610 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460e:	d107      	bne.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800461e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004628:	d10f      	bne.n	800464a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e017      	b.n	800468e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	3b01      	subs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	429a      	cmp	r2, r3
 800468a:	d19b      	bne.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000000 	.word	0x20000000

0800469c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	@ 0x28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046ae:	f7fd faa9 	bl	8001c04 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	4413      	add	r3, r2
 80046bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80046be:	f7fd faa1 	bl	8001c04 <HAL_GetTick>
 80046c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046cc:	4b3d      	ldr	r3, [pc, #244]	@ (80047c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	00da      	lsls	r2, r3, #3
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	0d1b      	lsrs	r3, r3, #20
 80046dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046e4:	e060      	b.n	80047a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80046ec:	d107      	bne.n	80046fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d104      	bne.n	80046fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d050      	beq.n	80047a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004706:	f7fd fa7d 	bl	8001c04 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004712:	429a      	cmp	r2, r3
 8004714:	d902      	bls.n	800471c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	2b00      	cmp	r3, #0
 800471a:	d13d      	bne.n	8004798 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800472a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004734:	d111      	bne.n	800475a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800473e:	d004      	beq.n	800474a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004748:	d107      	bne.n	800475a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004758:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004762:	d10f      	bne.n	8004784 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004782:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e010      	b.n	80047ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4013      	ands	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d196      	bne.n	80046e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3728      	adds	r7, #40	@ 0x28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000000 	.word	0x20000000

080047c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047dc:	d111      	bne.n	8004802 <SPI_EndRxTransaction+0x3a>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e6:	d004      	beq.n	80047f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f0:	d107      	bne.n	8004802 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004800:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2200      	movs	r2, #0
 800480a:	2180      	movs	r1, #128	@ 0x80
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff febd 	bl	800458c <SPI_WaitFlagStateUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481c:	f043 0220 	orr.w	r2, r3, #32
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e023      	b.n	8004870 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004830:	d11d      	bne.n	800486e <SPI_EndRxTransaction+0xa6>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800483a:	d004      	beq.n	8004846 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004844:	d113      	bne.n	800486e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2200      	movs	r2, #0
 800484e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff ff22 	bl	800469c <SPI_WaitFifoStateUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e000      	b.n	8004870 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff ff03 	bl	800469c <SPI_WaitFifoStateUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a0:	f043 0220 	orr.w	r2, r3, #32
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e027      	b.n	80048fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	2180      	movs	r1, #128	@ 0x80
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff fe68 	bl	800458c <SPI_WaitFlagStateUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e014      	b.n	80048fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2200      	movs	r2, #0
 80048da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff fedc 	bl	800469c <SPI_WaitFifoStateUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e000      	b.n	80048fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e049      	b.n	80049aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc ff42 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 f89e 	bl	8004a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d001      	beq.n	80049cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e047      	b.n	8004a5c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a23      	ldr	r2, [pc, #140]	@ (8004a68 <HAL_TIM_Base_Start+0xb4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01d      	beq.n	8004a1a <HAL_TIM_Base_Start+0x66>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e6:	d018      	beq.n	8004a1a <HAL_TIM_Base_Start+0x66>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1f      	ldr	r2, [pc, #124]	@ (8004a6c <HAL_TIM_Base_Start+0xb8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <HAL_TIM_Base_Start+0x66>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a70 <HAL_TIM_Base_Start+0xbc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00e      	beq.n	8004a1a <HAL_TIM_Base_Start+0x66>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1c      	ldr	r2, [pc, #112]	@ (8004a74 <HAL_TIM_Base_Start+0xc0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d009      	beq.n	8004a1a <HAL_TIM_Base_Start+0x66>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a78 <HAL_TIM_Base_Start+0xc4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_TIM_Base_Start+0x66>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a19      	ldr	r2, [pc, #100]	@ (8004a7c <HAL_TIM_Base_Start+0xc8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d115      	bne.n	8004a46 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	4b17      	ldr	r3, [pc, #92]	@ (8004a80 <HAL_TIM_Base_Start+0xcc>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b06      	cmp	r3, #6
 8004a2a:	d015      	beq.n	8004a58 <HAL_TIM_Base_Start+0xa4>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a32:	d011      	beq.n	8004a58 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a44:	e008      	b.n	8004a58 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e000      	b.n	8004a5a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40013400 	.word	0x40013400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	00010007 	.word	0x00010007

08004a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a46      	ldr	r2, [pc, #280]	@ (8004bb0 <TIM_Base_SetConfig+0x12c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a43      	ldr	r2, [pc, #268]	@ (8004bb4 <TIM_Base_SetConfig+0x130>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a42      	ldr	r2, [pc, #264]	@ (8004bb8 <TIM_Base_SetConfig+0x134>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a41      	ldr	r2, [pc, #260]	@ (8004bbc <TIM_Base_SetConfig+0x138>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a40      	ldr	r2, [pc, #256]	@ (8004bc0 <TIM_Base_SetConfig+0x13c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d108      	bne.n	8004ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a35      	ldr	r2, [pc, #212]	@ (8004bb0 <TIM_Base_SetConfig+0x12c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d01f      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae4:	d01b      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a32      	ldr	r2, [pc, #200]	@ (8004bb4 <TIM_Base_SetConfig+0x130>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d017      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a31      	ldr	r2, [pc, #196]	@ (8004bb8 <TIM_Base_SetConfig+0x134>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a30      	ldr	r2, [pc, #192]	@ (8004bbc <TIM_Base_SetConfig+0x138>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00f      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc0 <TIM_Base_SetConfig+0x13c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00b      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc4 <TIM_Base_SetConfig+0x140>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d007      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc8 <TIM_Base_SetConfig+0x144>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d003      	beq.n	8004b1e <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2c      	ldr	r2, [pc, #176]	@ (8004bcc <TIM_Base_SetConfig+0x148>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d108      	bne.n	8004b30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a16      	ldr	r2, [pc, #88]	@ (8004bb0 <TIM_Base_SetConfig+0x12c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <TIM_Base_SetConfig+0x13c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a17      	ldr	r2, [pc, #92]	@ (8004bc4 <TIM_Base_SetConfig+0x140>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a16      	ldr	r2, [pc, #88]	@ (8004bc8 <TIM_Base_SetConfig+0x144>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a15      	ldr	r2, [pc, #84]	@ (8004bcc <TIM_Base_SetConfig+0x148>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d103      	bne.n	8004b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d105      	bne.n	8004ba2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	611a      	str	r2, [r3, #16]
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	40013400 	.word	0x40013400
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40014400 	.word	0x40014400
 8004bcc:	40014800 	.word	0x40014800

08004bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e068      	b.n	8004cba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2d      	ldr	r2, [pc, #180]	@ (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d108      	bne.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01d      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5a:	d018      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a18      	ldr	r2, [pc, #96]	@ (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a13      	ldr	r2, [pc, #76]	@ (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a14      	ldr	r2, [pc, #80]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40013400 	.word	0x40013400
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40014000 	.word	0x40014000

08004ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e040      	b.n	8004d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc fd76 	bl	80017f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	@ 0x24
 8004d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fb6a 	bl	8005400 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f8af 	bl	8004e90 <UART_SetConfig>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e01b      	b.n	8004d74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fbe9 	bl	8005544 <UART_CheckIdleState>
 8004d72:	4603      	mov	r3, r0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	@ 0x28
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d177      	bne.n	8004e84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_UART_Transmit+0x24>
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e070      	b.n	8004e86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2221      	movs	r2, #33	@ 0x21
 8004db0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db2:	f7fc ff27 	bl	8001c04 <HAL_GetTick>
 8004db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	88fa      	ldrh	r2, [r7, #6]
 8004dbc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd0:	d108      	bne.n	8004de4 <HAL_UART_Transmit+0x68>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	e003      	b.n	8004dec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dec:	e02f      	b.n	8004e4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2200      	movs	r2, #0
 8004df6:	2180      	movs	r1, #128	@ 0x80
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fc4b 	bl	8005694 <UART_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e03b      	b.n	8004e86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10b      	bne.n	8004e2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	881a      	ldrh	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e20:	b292      	uxth	r2, r2
 8004e22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	3302      	adds	r3, #2
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	e007      	b.n	8004e3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1c9      	bne.n	8004dee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2140      	movs	r1, #64	@ 0x40
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fc15 	bl	8005694 <UART_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e005      	b.n	8004e86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3720      	adds	r7, #32
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e94:	b08a      	sub	sp, #40	@ 0x28
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4ba4      	ldr	r3, [pc, #656]	@ (8005150 <UART_SetConfig+0x2c0>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a99      	ldr	r2, [pc, #612]	@ (8005154 <UART_SetConfig+0x2c4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a90      	ldr	r2, [pc, #576]	@ (8005158 <UART_SetConfig+0x2c8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d126      	bne.n	8004f68 <UART_SetConfig+0xd8>
 8004f1a:	4b90      	ldr	r3, [pc, #576]	@ (800515c <UART_SetConfig+0x2cc>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d81b      	bhi.n	8004f60 <UART_SetConfig+0xd0>
 8004f28:	a201      	add	r2, pc, #4	@ (adr r2, 8004f30 <UART_SetConfig+0xa0>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f41 	.word	0x08004f41
 8004f34:	08004f51 	.word	0x08004f51
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f59 	.word	0x08004f59
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f46:	e116      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4e:	e112      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f56:	e10e      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5e:	e10a      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f66:	e106      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a7c      	ldr	r2, [pc, #496]	@ (8005160 <UART_SetConfig+0x2d0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d138      	bne.n	8004fe4 <UART_SetConfig+0x154>
 8004f72:	4b7a      	ldr	r3, [pc, #488]	@ (800515c <UART_SetConfig+0x2cc>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f78:	f003 030c 	and.w	r3, r3, #12
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d82d      	bhi.n	8004fdc <UART_SetConfig+0x14c>
 8004f80:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <UART_SetConfig+0xf8>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	08004fdd 	.word	0x08004fdd
 8004f90:	08004fdd 	.word	0x08004fdd
 8004f94:	08004fdd 	.word	0x08004fdd
 8004f98:	08004fcd 	.word	0x08004fcd
 8004f9c:	08004fdd 	.word	0x08004fdd
 8004fa0:	08004fdd 	.word	0x08004fdd
 8004fa4:	08004fdd 	.word	0x08004fdd
 8004fa8:	08004fc5 	.word	0x08004fc5
 8004fac:	08004fdd 	.word	0x08004fdd
 8004fb0:	08004fdd 	.word	0x08004fdd
 8004fb4:	08004fdd 	.word	0x08004fdd
 8004fb8:	08004fd5 	.word	0x08004fd5
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc2:	e0d8      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fca:	e0d4      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd2:	e0d0      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fda:	e0cc      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe2:	e0c8      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8005164 <UART_SetConfig+0x2d4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d125      	bne.n	800503a <UART_SetConfig+0x1aa>
 8004fee:	4b5b      	ldr	r3, [pc, #364]	@ (800515c <UART_SetConfig+0x2cc>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ff8:	2b30      	cmp	r3, #48	@ 0x30
 8004ffa:	d016      	beq.n	800502a <UART_SetConfig+0x19a>
 8004ffc:	2b30      	cmp	r3, #48	@ 0x30
 8004ffe:	d818      	bhi.n	8005032 <UART_SetConfig+0x1a2>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d00a      	beq.n	800501a <UART_SetConfig+0x18a>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d814      	bhi.n	8005032 <UART_SetConfig+0x1a2>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <UART_SetConfig+0x182>
 800500c:	2b10      	cmp	r3, #16
 800500e:	d008      	beq.n	8005022 <UART_SetConfig+0x192>
 8005010:	e00f      	b.n	8005032 <UART_SetConfig+0x1a2>
 8005012:	2300      	movs	r3, #0
 8005014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005018:	e0ad      	b.n	8005176 <UART_SetConfig+0x2e6>
 800501a:	2302      	movs	r3, #2
 800501c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005020:	e0a9      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005022:	2304      	movs	r3, #4
 8005024:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005028:	e0a5      	b.n	8005176 <UART_SetConfig+0x2e6>
 800502a:	2308      	movs	r3, #8
 800502c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005030:	e0a1      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005032:	2310      	movs	r3, #16
 8005034:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005038:	e09d      	b.n	8005176 <UART_SetConfig+0x2e6>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a4a      	ldr	r2, [pc, #296]	@ (8005168 <UART_SetConfig+0x2d8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d125      	bne.n	8005090 <UART_SetConfig+0x200>
 8005044:	4b45      	ldr	r3, [pc, #276]	@ (800515c <UART_SetConfig+0x2cc>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800504e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005050:	d016      	beq.n	8005080 <UART_SetConfig+0x1f0>
 8005052:	2bc0      	cmp	r3, #192	@ 0xc0
 8005054:	d818      	bhi.n	8005088 <UART_SetConfig+0x1f8>
 8005056:	2b80      	cmp	r3, #128	@ 0x80
 8005058:	d00a      	beq.n	8005070 <UART_SetConfig+0x1e0>
 800505a:	2b80      	cmp	r3, #128	@ 0x80
 800505c:	d814      	bhi.n	8005088 <UART_SetConfig+0x1f8>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <UART_SetConfig+0x1d8>
 8005062:	2b40      	cmp	r3, #64	@ 0x40
 8005064:	d008      	beq.n	8005078 <UART_SetConfig+0x1e8>
 8005066:	e00f      	b.n	8005088 <UART_SetConfig+0x1f8>
 8005068:	2300      	movs	r3, #0
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506e:	e082      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005070:	2302      	movs	r3, #2
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005076:	e07e      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005078:	2304      	movs	r3, #4
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507e:	e07a      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005080:	2308      	movs	r3, #8
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005086:	e076      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005088:	2310      	movs	r3, #16
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508e:	e072      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a35      	ldr	r2, [pc, #212]	@ (800516c <UART_SetConfig+0x2dc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d12a      	bne.n	80050f0 <UART_SetConfig+0x260>
 800509a:	4b30      	ldr	r3, [pc, #192]	@ (800515c <UART_SetConfig+0x2cc>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050a8:	d01a      	beq.n	80050e0 <UART_SetConfig+0x250>
 80050aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ae:	d81b      	bhi.n	80050e8 <UART_SetConfig+0x258>
 80050b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b4:	d00c      	beq.n	80050d0 <UART_SetConfig+0x240>
 80050b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ba:	d815      	bhi.n	80050e8 <UART_SetConfig+0x258>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <UART_SetConfig+0x238>
 80050c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c4:	d008      	beq.n	80050d8 <UART_SetConfig+0x248>
 80050c6:	e00f      	b.n	80050e8 <UART_SetConfig+0x258>
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ce:	e052      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050d0:	2302      	movs	r3, #2
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d6:	e04e      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050de:	e04a      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e6:	e046      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ee:	e042      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a17      	ldr	r2, [pc, #92]	@ (8005154 <UART_SetConfig+0x2c4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d13a      	bne.n	8005170 <UART_SetConfig+0x2e0>
 80050fa:	4b18      	ldr	r3, [pc, #96]	@ (800515c <UART_SetConfig+0x2cc>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005100:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005104:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005108:	d01a      	beq.n	8005140 <UART_SetConfig+0x2b0>
 800510a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800510e:	d81b      	bhi.n	8005148 <UART_SetConfig+0x2b8>
 8005110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005114:	d00c      	beq.n	8005130 <UART_SetConfig+0x2a0>
 8005116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800511a:	d815      	bhi.n	8005148 <UART_SetConfig+0x2b8>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <UART_SetConfig+0x298>
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005124:	d008      	beq.n	8005138 <UART_SetConfig+0x2a8>
 8005126:	e00f      	b.n	8005148 <UART_SetConfig+0x2b8>
 8005128:	2300      	movs	r3, #0
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512e:	e022      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005130:	2302      	movs	r3, #2
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005136:	e01e      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005138:	2304      	movs	r3, #4
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513e:	e01a      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005140:	2308      	movs	r3, #8
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005146:	e016      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005148:	2310      	movs	r3, #16
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800514e:	e012      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005150:	efff69f3 	.word	0xefff69f3
 8005154:	40008000 	.word	0x40008000
 8005158:	40013800 	.word	0x40013800
 800515c:	40021000 	.word	0x40021000
 8005160:	40004400 	.word	0x40004400
 8005164:	40004800 	.word	0x40004800
 8005168:	40004c00 	.word	0x40004c00
 800516c:	40005000 	.word	0x40005000
 8005170:	2310      	movs	r3, #16
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a9f      	ldr	r2, [pc, #636]	@ (80053f8 <UART_SetConfig+0x568>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d17a      	bne.n	8005276 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005180:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005184:	2b08      	cmp	r3, #8
 8005186:	d824      	bhi.n	80051d2 <UART_SetConfig+0x342>
 8005188:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <UART_SetConfig+0x300>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051d3 	.word	0x080051d3
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051d3 	.word	0x080051d3
 80051a0:	080051c3 	.word	0x080051c3
 80051a4:	080051d3 	.word	0x080051d3
 80051a8:	080051d3 	.word	0x080051d3
 80051ac:	080051d3 	.word	0x080051d3
 80051b0:	080051cb 	.word	0x080051cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7fd fe1e 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 80051b8:	61f8      	str	r0, [r7, #28]
        break;
 80051ba:	e010      	b.n	80051de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051bc:	4b8f      	ldr	r3, [pc, #572]	@ (80053fc <UART_SetConfig+0x56c>)
 80051be:	61fb      	str	r3, [r7, #28]
        break;
 80051c0:	e00d      	b.n	80051de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c2:	f7fd fd7f 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 80051c6:	61f8      	str	r0, [r7, #28]
        break;
 80051c8:	e009      	b.n	80051de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ce:	61fb      	str	r3, [r7, #28]
        break;
 80051d0:	e005      	b.n	80051de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80fb 	beq.w	80053dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d305      	bcc.n	8005202 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d903      	bls.n	800520a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005208:	e0e8      	b.n	80053dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2200      	movs	r2, #0
 800520e:	461c      	mov	r4, r3
 8005210:	4615      	mov	r5, r2
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	022b      	lsls	r3, r5, #8
 800521c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005220:	0222      	lsls	r2, r4, #8
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	6849      	ldr	r1, [r1, #4]
 8005226:	0849      	lsrs	r1, r1, #1
 8005228:	2000      	movs	r0, #0
 800522a:	4688      	mov	r8, r1
 800522c:	4681      	mov	r9, r0
 800522e:	eb12 0a08 	adds.w	sl, r2, r8
 8005232:	eb43 0b09 	adc.w	fp, r3, r9
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005244:	4650      	mov	r0, sl
 8005246:	4659      	mov	r1, fp
 8005248:	f7fb fcae 	bl	8000ba8 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4613      	mov	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800525a:	d308      	bcc.n	800526e <UART_SetConfig+0x3de>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005262:	d204      	bcs.n	800526e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	e0b6      	b.n	80053dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005274:	e0b2      	b.n	80053dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527e:	d15e      	bne.n	800533e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005280:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005284:	2b08      	cmp	r3, #8
 8005286:	d828      	bhi.n	80052da <UART_SetConfig+0x44a>
 8005288:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <UART_SetConfig+0x400>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052bd 	.word	0x080052bd
 8005298:	080052c5 	.word	0x080052c5
 800529c:	080052db 	.word	0x080052db
 80052a0:	080052cb 	.word	0x080052cb
 80052a4:	080052db 	.word	0x080052db
 80052a8:	080052db 	.word	0x080052db
 80052ac:	080052db 	.word	0x080052db
 80052b0:	080052d3 	.word	0x080052d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b4:	f7fd fd9e 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 80052b8:	61f8      	str	r0, [r7, #28]
        break;
 80052ba:	e014      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052bc:	f7fd fdb0 	bl	8002e20 <HAL_RCC_GetPCLK2Freq>
 80052c0:	61f8      	str	r0, [r7, #28]
        break;
 80052c2:	e010      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c4:	4b4d      	ldr	r3, [pc, #308]	@ (80053fc <UART_SetConfig+0x56c>)
 80052c6:	61fb      	str	r3, [r7, #28]
        break;
 80052c8:	e00d      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ca:	f7fd fcfb 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 80052ce:	61f8      	str	r0, [r7, #28]
        break;
 80052d0:	e009      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052d6:	61fb      	str	r3, [r7, #28]
        break;
 80052d8:	e005      	b.n	80052e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d077      	beq.n	80053dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	005a      	lsls	r2, r3, #1
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	441a      	add	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b0f      	cmp	r3, #15
 8005306:	d916      	bls.n	8005336 <UART_SetConfig+0x4a6>
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800530e:	d212      	bcs.n	8005336 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f023 030f 	bic.w	r3, r3, #15
 8005318:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	b29b      	uxth	r3, r3
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	b29a      	uxth	r2, r3
 8005326:	8afb      	ldrh	r3, [r7, #22]
 8005328:	4313      	orrs	r3, r2
 800532a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	8afa      	ldrh	r2, [r7, #22]
 8005332:	60da      	str	r2, [r3, #12]
 8005334:	e052      	b.n	80053dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800533c:	e04e      	b.n	80053dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800533e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005342:	2b08      	cmp	r3, #8
 8005344:	d827      	bhi.n	8005396 <UART_SetConfig+0x506>
 8005346:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <UART_SetConfig+0x4bc>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005371 	.word	0x08005371
 8005350:	08005379 	.word	0x08005379
 8005354:	08005381 	.word	0x08005381
 8005358:	08005397 	.word	0x08005397
 800535c:	08005387 	.word	0x08005387
 8005360:	08005397 	.word	0x08005397
 8005364:	08005397 	.word	0x08005397
 8005368:	08005397 	.word	0x08005397
 800536c:	0800538f 	.word	0x0800538f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005370:	f7fd fd40 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8005374:	61f8      	str	r0, [r7, #28]
        break;
 8005376:	e014      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005378:	f7fd fd52 	bl	8002e20 <HAL_RCC_GetPCLK2Freq>
 800537c:	61f8      	str	r0, [r7, #28]
        break;
 800537e:	e010      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005380:	4b1e      	ldr	r3, [pc, #120]	@ (80053fc <UART_SetConfig+0x56c>)
 8005382:	61fb      	str	r3, [r7, #28]
        break;
 8005384:	e00d      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005386:	f7fd fc9d 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 800538a:	61f8      	str	r0, [r7, #28]
        break;
 800538c:	e009      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800538e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005392:	61fb      	str	r3, [r7, #28]
        break;
 8005394:	e005      	b.n	80053a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053a0:	bf00      	nop
    }

    if (pclk != 0U)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d019      	beq.n	80053dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	085a      	lsrs	r2, r3, #1
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b0f      	cmp	r3, #15
 80053c0:	d909      	bls.n	80053d6 <UART_SetConfig+0x546>
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c8:	d205      	bcs.n	80053d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60da      	str	r2, [r3, #12]
 80053d4:	e002      	b.n	80053dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3728      	adds	r7, #40	@ 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053f6:	bf00      	nop
 80053f8:	40008000 	.word	0x40008000
 80053fc:	00f42400 	.word	0x00f42400

08005400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01a      	beq.n	8005516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054fe:	d10a      	bne.n	8005516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b098      	sub	sp, #96	@ 0x60
 8005548:	af02      	add	r7, sp, #8
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005554:	f7fc fb56 	bl	8001c04 <HAL_GetTick>
 8005558:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b08      	cmp	r3, #8
 8005566:	d12e      	bne.n	80055c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005568:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005570:	2200      	movs	r2, #0
 8005572:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f88c 	bl	8005694 <UART_WaitOnFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d021      	beq.n	80055c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005596:	653b      	str	r3, [r7, #80]	@ 0x50
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e6      	bne.n	8005582 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e062      	b.n	800568c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d149      	bne.n	8005668 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055dc:	2200      	movs	r2, #0
 80055de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f856 	bl	8005694 <UART_WaitOnFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d03c      	beq.n	8005668 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	623b      	str	r3, [r7, #32]
   return(result);
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800560c:	633b      	str	r3, [r7, #48]	@ 0x30
 800560e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e6      	bne.n	80055ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005640:	61fa      	str	r2, [r7, #28]
 8005642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	69b9      	ldr	r1, [r7, #24]
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	617b      	str	r3, [r7, #20]
   return(result);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e011      	b.n	800568c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3758      	adds	r7, #88	@ 0x58
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a4:	e04f      	b.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d04b      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ae:	f7fc faa9 	bl	8001c04 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e04e      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d037      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b80      	cmp	r3, #128	@ 0x80
 80056da:	d034      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b40      	cmp	r3, #64	@ 0x40
 80056e0:	d031      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d110      	bne.n	8005712 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2208      	movs	r2, #8
 80056f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f838 	bl	800576e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2208      	movs	r2, #8
 8005702:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e029      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800571c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005720:	d111      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800572a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f81e 	bl	800576e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e00f      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	429a      	cmp	r2, r3
 8005762:	d0a0      	beq.n	80056a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800576e:	b480      	push	{r7}
 8005770:	b095      	sub	sp, #84	@ 0x54
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800578a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005794:	643b      	str	r3, [r7, #64]	@ 0x40
 8005796:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800579a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e6      	bne.n	8005776 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3308      	adds	r3, #8
 80057ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d118      	bne.n	8005816 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f023 0310 	bic.w	r3, r3, #16
 80057f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6979      	ldr	r1, [r7, #20]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	613b      	str	r3, [r7, #16]
   return(result);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e6      	bne.n	80057e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800582a:	bf00      	nop
 800582c:	3754      	adds	r7, #84	@ 0x54
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <__cvt>:
 8005836:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800583a:	ec57 6b10 	vmov	r6, r7, d0
 800583e:	2f00      	cmp	r7, #0
 8005840:	460c      	mov	r4, r1
 8005842:	4619      	mov	r1, r3
 8005844:	463b      	mov	r3, r7
 8005846:	bfbb      	ittet	lt
 8005848:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800584c:	461f      	movlt	r7, r3
 800584e:	2300      	movge	r3, #0
 8005850:	232d      	movlt	r3, #45	@ 0x2d
 8005852:	700b      	strb	r3, [r1, #0]
 8005854:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005856:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800585a:	4691      	mov	r9, r2
 800585c:	f023 0820 	bic.w	r8, r3, #32
 8005860:	bfbc      	itt	lt
 8005862:	4632      	movlt	r2, r6
 8005864:	4616      	movlt	r6, r2
 8005866:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800586a:	d005      	beq.n	8005878 <__cvt+0x42>
 800586c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005870:	d100      	bne.n	8005874 <__cvt+0x3e>
 8005872:	3401      	adds	r4, #1
 8005874:	2102      	movs	r1, #2
 8005876:	e000      	b.n	800587a <__cvt+0x44>
 8005878:	2103      	movs	r1, #3
 800587a:	ab03      	add	r3, sp, #12
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	ab02      	add	r3, sp, #8
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	ec47 6b10 	vmov	d0, r6, r7
 8005886:	4653      	mov	r3, sl
 8005888:	4622      	mov	r2, r4
 800588a:	f000 fe6d 	bl	8006568 <_dtoa_r>
 800588e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005892:	4605      	mov	r5, r0
 8005894:	d119      	bne.n	80058ca <__cvt+0x94>
 8005896:	f019 0f01 	tst.w	r9, #1
 800589a:	d00e      	beq.n	80058ba <__cvt+0x84>
 800589c:	eb00 0904 	add.w	r9, r0, r4
 80058a0:	2200      	movs	r2, #0
 80058a2:	2300      	movs	r3, #0
 80058a4:	4630      	mov	r0, r6
 80058a6:	4639      	mov	r1, r7
 80058a8:	f7fb f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ac:	b108      	cbz	r0, 80058b2 <__cvt+0x7c>
 80058ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80058b2:	2230      	movs	r2, #48	@ 0x30
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	454b      	cmp	r3, r9
 80058b8:	d31e      	bcc.n	80058f8 <__cvt+0xc2>
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058be:	1b5b      	subs	r3, r3, r5
 80058c0:	4628      	mov	r0, r5
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	b004      	add	sp, #16
 80058c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058ce:	eb00 0904 	add.w	r9, r0, r4
 80058d2:	d1e5      	bne.n	80058a0 <__cvt+0x6a>
 80058d4:	7803      	ldrb	r3, [r0, #0]
 80058d6:	2b30      	cmp	r3, #48	@ 0x30
 80058d8:	d10a      	bne.n	80058f0 <__cvt+0xba>
 80058da:	2200      	movs	r2, #0
 80058dc:	2300      	movs	r3, #0
 80058de:	4630      	mov	r0, r6
 80058e0:	4639      	mov	r1, r7
 80058e2:	f7fb f8f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80058e6:	b918      	cbnz	r0, 80058f0 <__cvt+0xba>
 80058e8:	f1c4 0401 	rsb	r4, r4, #1
 80058ec:	f8ca 4000 	str.w	r4, [sl]
 80058f0:	f8da 3000 	ldr.w	r3, [sl]
 80058f4:	4499      	add	r9, r3
 80058f6:	e7d3      	b.n	80058a0 <__cvt+0x6a>
 80058f8:	1c59      	adds	r1, r3, #1
 80058fa:	9103      	str	r1, [sp, #12]
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e7d9      	b.n	80058b4 <__cvt+0x7e>

08005900 <__exponent>:
 8005900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005902:	2900      	cmp	r1, #0
 8005904:	bfba      	itte	lt
 8005906:	4249      	neglt	r1, r1
 8005908:	232d      	movlt	r3, #45	@ 0x2d
 800590a:	232b      	movge	r3, #43	@ 0x2b
 800590c:	2909      	cmp	r1, #9
 800590e:	7002      	strb	r2, [r0, #0]
 8005910:	7043      	strb	r3, [r0, #1]
 8005912:	dd29      	ble.n	8005968 <__exponent+0x68>
 8005914:	f10d 0307 	add.w	r3, sp, #7
 8005918:	461d      	mov	r5, r3
 800591a:	270a      	movs	r7, #10
 800591c:	461a      	mov	r2, r3
 800591e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005922:	fb07 1416 	mls	r4, r7, r6, r1
 8005926:	3430      	adds	r4, #48	@ 0x30
 8005928:	f802 4c01 	strb.w	r4, [r2, #-1]
 800592c:	460c      	mov	r4, r1
 800592e:	2c63      	cmp	r4, #99	@ 0x63
 8005930:	f103 33ff 	add.w	r3, r3, #4294967295
 8005934:	4631      	mov	r1, r6
 8005936:	dcf1      	bgt.n	800591c <__exponent+0x1c>
 8005938:	3130      	adds	r1, #48	@ 0x30
 800593a:	1e94      	subs	r4, r2, #2
 800593c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005940:	1c41      	adds	r1, r0, #1
 8005942:	4623      	mov	r3, r4
 8005944:	42ab      	cmp	r3, r5
 8005946:	d30a      	bcc.n	800595e <__exponent+0x5e>
 8005948:	f10d 0309 	add.w	r3, sp, #9
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	42ac      	cmp	r4, r5
 8005950:	bf88      	it	hi
 8005952:	2300      	movhi	r3, #0
 8005954:	3302      	adds	r3, #2
 8005956:	4403      	add	r3, r0
 8005958:	1a18      	subs	r0, r3, r0
 800595a:	b003      	add	sp, #12
 800595c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005962:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005966:	e7ed      	b.n	8005944 <__exponent+0x44>
 8005968:	2330      	movs	r3, #48	@ 0x30
 800596a:	3130      	adds	r1, #48	@ 0x30
 800596c:	7083      	strb	r3, [r0, #2]
 800596e:	70c1      	strb	r1, [r0, #3]
 8005970:	1d03      	adds	r3, r0, #4
 8005972:	e7f1      	b.n	8005958 <__exponent+0x58>

08005974 <_printf_float>:
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	b08d      	sub	sp, #52	@ 0x34
 800597a:	460c      	mov	r4, r1
 800597c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005980:	4616      	mov	r6, r2
 8005982:	461f      	mov	r7, r3
 8005984:	4605      	mov	r5, r0
 8005986:	f000 fcef 	bl	8006368 <_localeconv_r>
 800598a:	6803      	ldr	r3, [r0, #0]
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	4618      	mov	r0, r3
 8005990:	f7fa fc6e 	bl	8000270 <strlen>
 8005994:	2300      	movs	r3, #0
 8005996:	930a      	str	r3, [sp, #40]	@ 0x28
 8005998:	f8d8 3000 	ldr.w	r3, [r8]
 800599c:	9005      	str	r0, [sp, #20]
 800599e:	3307      	adds	r3, #7
 80059a0:	f023 0307 	bic.w	r3, r3, #7
 80059a4:	f103 0208 	add.w	r2, r3, #8
 80059a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80059ac:	f8d4 b000 	ldr.w	fp, [r4]
 80059b0:	f8c8 2000 	str.w	r2, [r8]
 80059b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80059bc:	9307      	str	r3, [sp, #28]
 80059be:	f8cd 8018 	str.w	r8, [sp, #24]
 80059c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80059c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059ca:	4b9c      	ldr	r3, [pc, #624]	@ (8005c3c <_printf_float+0x2c8>)
 80059cc:	f04f 32ff 	mov.w	r2, #4294967295
 80059d0:	f7fb f8ac 	bl	8000b2c <__aeabi_dcmpun>
 80059d4:	bb70      	cbnz	r0, 8005a34 <_printf_float+0xc0>
 80059d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059da:	4b98      	ldr	r3, [pc, #608]	@ (8005c3c <_printf_float+0x2c8>)
 80059dc:	f04f 32ff 	mov.w	r2, #4294967295
 80059e0:	f7fb f886 	bl	8000af0 <__aeabi_dcmple>
 80059e4:	bb30      	cbnz	r0, 8005a34 <_printf_float+0xc0>
 80059e6:	2200      	movs	r2, #0
 80059e8:	2300      	movs	r3, #0
 80059ea:	4640      	mov	r0, r8
 80059ec:	4649      	mov	r1, r9
 80059ee:	f7fb f875 	bl	8000adc <__aeabi_dcmplt>
 80059f2:	b110      	cbz	r0, 80059fa <_printf_float+0x86>
 80059f4:	232d      	movs	r3, #45	@ 0x2d
 80059f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059fa:	4a91      	ldr	r2, [pc, #580]	@ (8005c40 <_printf_float+0x2cc>)
 80059fc:	4b91      	ldr	r3, [pc, #580]	@ (8005c44 <_printf_float+0x2d0>)
 80059fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005a02:	bf94      	ite	ls
 8005a04:	4690      	movls	r8, r2
 8005a06:	4698      	movhi	r8, r3
 8005a08:	2303      	movs	r3, #3
 8005a0a:	6123      	str	r3, [r4, #16]
 8005a0c:	f02b 0304 	bic.w	r3, fp, #4
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	f04f 0900 	mov.w	r9, #0
 8005a16:	9700      	str	r7, [sp, #0]
 8005a18:	4633      	mov	r3, r6
 8005a1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 f9d2 	bl	8005dc8 <_printf_common>
 8005a24:	3001      	adds	r0, #1
 8005a26:	f040 808d 	bne.w	8005b44 <_printf_float+0x1d0>
 8005a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2e:	b00d      	add	sp, #52	@ 0x34
 8005a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	4640      	mov	r0, r8
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	f7fb f876 	bl	8000b2c <__aeabi_dcmpun>
 8005a40:	b140      	cbz	r0, 8005a54 <_printf_float+0xe0>
 8005a42:	464b      	mov	r3, r9
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bfbc      	itt	lt
 8005a48:	232d      	movlt	r3, #45	@ 0x2d
 8005a4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a4e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c48 <_printf_float+0x2d4>)
 8005a50:	4b7e      	ldr	r3, [pc, #504]	@ (8005c4c <_printf_float+0x2d8>)
 8005a52:	e7d4      	b.n	80059fe <_printf_float+0x8a>
 8005a54:	6863      	ldr	r3, [r4, #4]
 8005a56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a5a:	9206      	str	r2, [sp, #24]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	d13b      	bne.n	8005ad8 <_printf_float+0x164>
 8005a60:	2306      	movs	r3, #6
 8005a62:	6063      	str	r3, [r4, #4]
 8005a64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6022      	str	r2, [r4, #0]
 8005a6c:	9303      	str	r3, [sp, #12]
 8005a6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a74:	ab09      	add	r3, sp, #36	@ 0x24
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	6861      	ldr	r1, [r4, #4]
 8005a7a:	ec49 8b10 	vmov	d0, r8, r9
 8005a7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a82:	4628      	mov	r0, r5
 8005a84:	f7ff fed7 	bl	8005836 <__cvt>
 8005a88:	9b06      	ldr	r3, [sp, #24]
 8005a8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a8c:	2b47      	cmp	r3, #71	@ 0x47
 8005a8e:	4680      	mov	r8, r0
 8005a90:	d129      	bne.n	8005ae6 <_printf_float+0x172>
 8005a92:	1cc8      	adds	r0, r1, #3
 8005a94:	db02      	blt.n	8005a9c <_printf_float+0x128>
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	4299      	cmp	r1, r3
 8005a9a:	dd41      	ble.n	8005b20 <_printf_float+0x1ac>
 8005a9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005aa0:	fa5f fa8a 	uxtb.w	sl, sl
 8005aa4:	3901      	subs	r1, #1
 8005aa6:	4652      	mov	r2, sl
 8005aa8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005aac:	9109      	str	r1, [sp, #36]	@ 0x24
 8005aae:	f7ff ff27 	bl	8005900 <__exponent>
 8005ab2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ab4:	1813      	adds	r3, r2, r0
 8005ab6:	2a01      	cmp	r2, #1
 8005ab8:	4681      	mov	r9, r0
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	dc02      	bgt.n	8005ac4 <_printf_float+0x150>
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	07d2      	lsls	r2, r2, #31
 8005ac2:	d501      	bpl.n	8005ac8 <_printf_float+0x154>
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	6123      	str	r3, [r4, #16]
 8005ac8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0a2      	beq.n	8005a16 <_printf_float+0xa2>
 8005ad0:	232d      	movs	r3, #45	@ 0x2d
 8005ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ad6:	e79e      	b.n	8005a16 <_printf_float+0xa2>
 8005ad8:	9a06      	ldr	r2, [sp, #24]
 8005ada:	2a47      	cmp	r2, #71	@ 0x47
 8005adc:	d1c2      	bne.n	8005a64 <_printf_float+0xf0>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1c0      	bne.n	8005a64 <_printf_float+0xf0>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e7bd      	b.n	8005a62 <_printf_float+0xee>
 8005ae6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005aea:	d9db      	bls.n	8005aa4 <_printf_float+0x130>
 8005aec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005af0:	d118      	bne.n	8005b24 <_printf_float+0x1b0>
 8005af2:	2900      	cmp	r1, #0
 8005af4:	6863      	ldr	r3, [r4, #4]
 8005af6:	dd0b      	ble.n	8005b10 <_printf_float+0x19c>
 8005af8:	6121      	str	r1, [r4, #16]
 8005afa:	b913      	cbnz	r3, 8005b02 <_printf_float+0x18e>
 8005afc:	6822      	ldr	r2, [r4, #0]
 8005afe:	07d0      	lsls	r0, r2, #31
 8005b00:	d502      	bpl.n	8005b08 <_printf_float+0x194>
 8005b02:	3301      	adds	r3, #1
 8005b04:	440b      	add	r3, r1
 8005b06:	6123      	str	r3, [r4, #16]
 8005b08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005b0a:	f04f 0900 	mov.w	r9, #0
 8005b0e:	e7db      	b.n	8005ac8 <_printf_float+0x154>
 8005b10:	b913      	cbnz	r3, 8005b18 <_printf_float+0x1a4>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	07d2      	lsls	r2, r2, #31
 8005b16:	d501      	bpl.n	8005b1c <_printf_float+0x1a8>
 8005b18:	3302      	adds	r3, #2
 8005b1a:	e7f4      	b.n	8005b06 <_printf_float+0x192>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e7f2      	b.n	8005b06 <_printf_float+0x192>
 8005b20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b26:	4299      	cmp	r1, r3
 8005b28:	db05      	blt.n	8005b36 <_printf_float+0x1c2>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	6121      	str	r1, [r4, #16]
 8005b2e:	07d8      	lsls	r0, r3, #31
 8005b30:	d5ea      	bpl.n	8005b08 <_printf_float+0x194>
 8005b32:	1c4b      	adds	r3, r1, #1
 8005b34:	e7e7      	b.n	8005b06 <_printf_float+0x192>
 8005b36:	2900      	cmp	r1, #0
 8005b38:	bfd4      	ite	le
 8005b3a:	f1c1 0202 	rsble	r2, r1, #2
 8005b3e:	2201      	movgt	r2, #1
 8005b40:	4413      	add	r3, r2
 8005b42:	e7e0      	b.n	8005b06 <_printf_float+0x192>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	055a      	lsls	r2, r3, #21
 8005b48:	d407      	bmi.n	8005b5a <_printf_float+0x1e6>
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4628      	mov	r0, r5
 8005b52:	47b8      	blx	r7
 8005b54:	3001      	adds	r0, #1
 8005b56:	d12b      	bne.n	8005bb0 <_printf_float+0x23c>
 8005b58:	e767      	b.n	8005a2a <_printf_float+0xb6>
 8005b5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b5e:	f240 80dd 	bls.w	8005d1c <_printf_float+0x3a8>
 8005b62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b66:	2200      	movs	r2, #0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f7fa ffad 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d033      	beq.n	8005bda <_printf_float+0x266>
 8005b72:	4a37      	ldr	r2, [pc, #220]	@ (8005c50 <_printf_float+0x2dc>)
 8005b74:	2301      	movs	r3, #1
 8005b76:	4631      	mov	r1, r6
 8005b78:	4628      	mov	r0, r5
 8005b7a:	47b8      	blx	r7
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	f43f af54 	beq.w	8005a2a <_printf_float+0xb6>
 8005b82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b86:	4543      	cmp	r3, r8
 8005b88:	db02      	blt.n	8005b90 <_printf_float+0x21c>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	07d8      	lsls	r0, r3, #31
 8005b8e:	d50f      	bpl.n	8005bb0 <_printf_float+0x23c>
 8005b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f af45 	beq.w	8005a2a <_printf_float+0xb6>
 8005ba0:	f04f 0900 	mov.w	r9, #0
 8005ba4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ba8:	f104 0a1a 	add.w	sl, r4, #26
 8005bac:	45c8      	cmp	r8, r9
 8005bae:	dc09      	bgt.n	8005bc4 <_printf_float+0x250>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	079b      	lsls	r3, r3, #30
 8005bb4:	f100 8103 	bmi.w	8005dbe <_printf_float+0x44a>
 8005bb8:	68e0      	ldr	r0, [r4, #12]
 8005bba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bbc:	4298      	cmp	r0, r3
 8005bbe:	bfb8      	it	lt
 8005bc0:	4618      	movlt	r0, r3
 8005bc2:	e734      	b.n	8005a2e <_printf_float+0xba>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f af2b 	beq.w	8005a2a <_printf_float+0xb6>
 8005bd4:	f109 0901 	add.w	r9, r9, #1
 8005bd8:	e7e8      	b.n	8005bac <_printf_float+0x238>
 8005bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	dc39      	bgt.n	8005c54 <_printf_float+0x2e0>
 8005be0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c50 <_printf_float+0x2dc>)
 8005be2:	2301      	movs	r3, #1
 8005be4:	4631      	mov	r1, r6
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	f43f af1d 	beq.w	8005a2a <_printf_float+0xb6>
 8005bf0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005bf4:	ea59 0303 	orrs.w	r3, r9, r3
 8005bf8:	d102      	bne.n	8005c00 <_printf_float+0x28c>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	07d9      	lsls	r1, r3, #31
 8005bfe:	d5d7      	bpl.n	8005bb0 <_printf_float+0x23c>
 8005c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c04:	4631      	mov	r1, r6
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f af0d 	beq.w	8005a2a <_printf_float+0xb6>
 8005c10:	f04f 0a00 	mov.w	sl, #0
 8005c14:	f104 0b1a 	add.w	fp, r4, #26
 8005c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c1a:	425b      	negs	r3, r3
 8005c1c:	4553      	cmp	r3, sl
 8005c1e:	dc01      	bgt.n	8005c24 <_printf_float+0x2b0>
 8005c20:	464b      	mov	r3, r9
 8005c22:	e793      	b.n	8005b4c <_printf_float+0x1d8>
 8005c24:	2301      	movs	r3, #1
 8005c26:	465a      	mov	r2, fp
 8005c28:	4631      	mov	r1, r6
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	47b8      	blx	r7
 8005c2e:	3001      	adds	r0, #1
 8005c30:	f43f aefb 	beq.w	8005a2a <_printf_float+0xb6>
 8005c34:	f10a 0a01 	add.w	sl, sl, #1
 8005c38:	e7ee      	b.n	8005c18 <_printf_float+0x2a4>
 8005c3a:	bf00      	nop
 8005c3c:	7fefffff 	.word	0x7fefffff
 8005c40:	08008570 	.word	0x08008570
 8005c44:	08008574 	.word	0x08008574
 8005c48:	08008578 	.word	0x08008578
 8005c4c:	0800857c 	.word	0x0800857c
 8005c50:	08008580 	.word	0x08008580
 8005c54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c5a:	4553      	cmp	r3, sl
 8005c5c:	bfa8      	it	ge
 8005c5e:	4653      	movge	r3, sl
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	4699      	mov	r9, r3
 8005c64:	dc36      	bgt.n	8005cd4 <_printf_float+0x360>
 8005c66:	f04f 0b00 	mov.w	fp, #0
 8005c6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c6e:	f104 021a 	add.w	r2, r4, #26
 8005c72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c74:	9306      	str	r3, [sp, #24]
 8005c76:	eba3 0309 	sub.w	r3, r3, r9
 8005c7a:	455b      	cmp	r3, fp
 8005c7c:	dc31      	bgt.n	8005ce2 <_printf_float+0x36e>
 8005c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c80:	459a      	cmp	sl, r3
 8005c82:	dc3a      	bgt.n	8005cfa <_printf_float+0x386>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	07da      	lsls	r2, r3, #31
 8005c88:	d437      	bmi.n	8005cfa <_printf_float+0x386>
 8005c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c8c:	ebaa 0903 	sub.w	r9, sl, r3
 8005c90:	9b06      	ldr	r3, [sp, #24]
 8005c92:	ebaa 0303 	sub.w	r3, sl, r3
 8005c96:	4599      	cmp	r9, r3
 8005c98:	bfa8      	it	ge
 8005c9a:	4699      	movge	r9, r3
 8005c9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ca0:	dc33      	bgt.n	8005d0a <_printf_float+0x396>
 8005ca2:	f04f 0800 	mov.w	r8, #0
 8005ca6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005caa:	f104 0b1a 	add.w	fp, r4, #26
 8005cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb0:	ebaa 0303 	sub.w	r3, sl, r3
 8005cb4:	eba3 0309 	sub.w	r3, r3, r9
 8005cb8:	4543      	cmp	r3, r8
 8005cba:	f77f af79 	ble.w	8005bb0 <_printf_float+0x23c>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	465a      	mov	r2, fp
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f43f aeae 	beq.w	8005a2a <_printf_float+0xb6>
 8005cce:	f108 0801 	add.w	r8, r8, #1
 8005cd2:	e7ec      	b.n	8005cae <_printf_float+0x33a>
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d1c2      	bne.n	8005c66 <_printf_float+0x2f2>
 8005ce0:	e6a3      	b.n	8005a2a <_printf_float+0xb6>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	9206      	str	r2, [sp, #24]
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	f43f ae9c 	beq.w	8005a2a <_printf_float+0xb6>
 8005cf2:	9a06      	ldr	r2, [sp, #24]
 8005cf4:	f10b 0b01 	add.w	fp, fp, #1
 8005cf8:	e7bb      	b.n	8005c72 <_printf_float+0x2fe>
 8005cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	d1c0      	bne.n	8005c8a <_printf_float+0x316>
 8005d08:	e68f      	b.n	8005a2a <_printf_float+0xb6>
 8005d0a:	9a06      	ldr	r2, [sp, #24]
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	4442      	add	r2, r8
 8005d10:	4631      	mov	r1, r6
 8005d12:	4628      	mov	r0, r5
 8005d14:	47b8      	blx	r7
 8005d16:	3001      	adds	r0, #1
 8005d18:	d1c3      	bne.n	8005ca2 <_printf_float+0x32e>
 8005d1a:	e686      	b.n	8005a2a <_printf_float+0xb6>
 8005d1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d20:	f1ba 0f01 	cmp.w	sl, #1
 8005d24:	dc01      	bgt.n	8005d2a <_printf_float+0x3b6>
 8005d26:	07db      	lsls	r3, r3, #31
 8005d28:	d536      	bpl.n	8005d98 <_printf_float+0x424>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b8      	blx	r7
 8005d34:	3001      	adds	r0, #1
 8005d36:	f43f ae78 	beq.w	8005a2a <_printf_float+0xb6>
 8005d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	f43f ae70 	beq.w	8005a2a <_printf_float+0xb6>
 8005d4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2300      	movs	r3, #0
 8005d52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d56:	f7fa feb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d5a:	b9c0      	cbnz	r0, 8005d8e <_printf_float+0x41a>
 8005d5c:	4653      	mov	r3, sl
 8005d5e:	f108 0201 	add.w	r2, r8, #1
 8005d62:	4631      	mov	r1, r6
 8005d64:	4628      	mov	r0, r5
 8005d66:	47b8      	blx	r7
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d10c      	bne.n	8005d86 <_printf_float+0x412>
 8005d6c:	e65d      	b.n	8005a2a <_printf_float+0xb6>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	465a      	mov	r2, fp
 8005d72:	4631      	mov	r1, r6
 8005d74:	4628      	mov	r0, r5
 8005d76:	47b8      	blx	r7
 8005d78:	3001      	adds	r0, #1
 8005d7a:	f43f ae56 	beq.w	8005a2a <_printf_float+0xb6>
 8005d7e:	f108 0801 	add.w	r8, r8, #1
 8005d82:	45d0      	cmp	r8, sl
 8005d84:	dbf3      	blt.n	8005d6e <_printf_float+0x3fa>
 8005d86:	464b      	mov	r3, r9
 8005d88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d8c:	e6df      	b.n	8005b4e <_printf_float+0x1da>
 8005d8e:	f04f 0800 	mov.w	r8, #0
 8005d92:	f104 0b1a 	add.w	fp, r4, #26
 8005d96:	e7f4      	b.n	8005d82 <_printf_float+0x40e>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	4642      	mov	r2, r8
 8005d9c:	e7e1      	b.n	8005d62 <_printf_float+0x3ee>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	464a      	mov	r2, r9
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b8      	blx	r7
 8005da8:	3001      	adds	r0, #1
 8005daa:	f43f ae3e 	beq.w	8005a2a <_printf_float+0xb6>
 8005dae:	f108 0801 	add.w	r8, r8, #1
 8005db2:	68e3      	ldr	r3, [r4, #12]
 8005db4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005db6:	1a5b      	subs	r3, r3, r1
 8005db8:	4543      	cmp	r3, r8
 8005dba:	dcf0      	bgt.n	8005d9e <_printf_float+0x42a>
 8005dbc:	e6fc      	b.n	8005bb8 <_printf_float+0x244>
 8005dbe:	f04f 0800 	mov.w	r8, #0
 8005dc2:	f104 0919 	add.w	r9, r4, #25
 8005dc6:	e7f4      	b.n	8005db2 <_printf_float+0x43e>

08005dc8 <_printf_common>:
 8005dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dcc:	4616      	mov	r6, r2
 8005dce:	4698      	mov	r8, r3
 8005dd0:	688a      	ldr	r2, [r1, #8]
 8005dd2:	690b      	ldr	r3, [r1, #16]
 8005dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	bfb8      	it	lt
 8005ddc:	4613      	movlt	r3, r2
 8005dde:	6033      	str	r3, [r6, #0]
 8005de0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005de4:	4607      	mov	r7, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	b10a      	cbz	r2, 8005dee <_printf_common+0x26>
 8005dea:	3301      	adds	r3, #1
 8005dec:	6033      	str	r3, [r6, #0]
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	0699      	lsls	r1, r3, #26
 8005df2:	bf42      	ittt	mi
 8005df4:	6833      	ldrmi	r3, [r6, #0]
 8005df6:	3302      	addmi	r3, #2
 8005df8:	6033      	strmi	r3, [r6, #0]
 8005dfa:	6825      	ldr	r5, [r4, #0]
 8005dfc:	f015 0506 	ands.w	r5, r5, #6
 8005e00:	d106      	bne.n	8005e10 <_printf_common+0x48>
 8005e02:	f104 0a19 	add.w	sl, r4, #25
 8005e06:	68e3      	ldr	r3, [r4, #12]
 8005e08:	6832      	ldr	r2, [r6, #0]
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	42ab      	cmp	r3, r5
 8005e0e:	dc26      	bgt.n	8005e5e <_printf_common+0x96>
 8005e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e14:	6822      	ldr	r2, [r4, #0]
 8005e16:	3b00      	subs	r3, #0
 8005e18:	bf18      	it	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	0692      	lsls	r2, r2, #26
 8005e1e:	d42b      	bmi.n	8005e78 <_printf_common+0xb0>
 8005e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e24:	4641      	mov	r1, r8
 8005e26:	4638      	mov	r0, r7
 8005e28:	47c8      	blx	r9
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d01e      	beq.n	8005e6c <_printf_common+0xa4>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	6922      	ldr	r2, [r4, #16]
 8005e32:	f003 0306 	and.w	r3, r3, #6
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	bf02      	ittt	eq
 8005e3a:	68e5      	ldreq	r5, [r4, #12]
 8005e3c:	6833      	ldreq	r3, [r6, #0]
 8005e3e:	1aed      	subeq	r5, r5, r3
 8005e40:	68a3      	ldr	r3, [r4, #8]
 8005e42:	bf0c      	ite	eq
 8005e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e48:	2500      	movne	r5, #0
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	bfc4      	itt	gt
 8005e4e:	1a9b      	subgt	r3, r3, r2
 8005e50:	18ed      	addgt	r5, r5, r3
 8005e52:	2600      	movs	r6, #0
 8005e54:	341a      	adds	r4, #26
 8005e56:	42b5      	cmp	r5, r6
 8005e58:	d11a      	bne.n	8005e90 <_printf_common+0xc8>
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	e008      	b.n	8005e70 <_printf_common+0xa8>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4652      	mov	r2, sl
 8005e62:	4641      	mov	r1, r8
 8005e64:	4638      	mov	r0, r7
 8005e66:	47c8      	blx	r9
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d103      	bne.n	8005e74 <_printf_common+0xac>
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e74:	3501      	adds	r5, #1
 8005e76:	e7c6      	b.n	8005e06 <_printf_common+0x3e>
 8005e78:	18e1      	adds	r1, r4, r3
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	2030      	movs	r0, #48	@ 0x30
 8005e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e82:	4422      	add	r2, r4
 8005e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e8c:	3302      	adds	r3, #2
 8005e8e:	e7c7      	b.n	8005e20 <_printf_common+0x58>
 8005e90:	2301      	movs	r3, #1
 8005e92:	4622      	mov	r2, r4
 8005e94:	4641      	mov	r1, r8
 8005e96:	4638      	mov	r0, r7
 8005e98:	47c8      	blx	r9
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d0e6      	beq.n	8005e6c <_printf_common+0xa4>
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7d9      	b.n	8005e56 <_printf_common+0x8e>
	...

08005ea4 <_printf_i>:
 8005ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea8:	7e0f      	ldrb	r7, [r1, #24]
 8005eaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005eac:	2f78      	cmp	r7, #120	@ 0x78
 8005eae:	4691      	mov	r9, r2
 8005eb0:	4680      	mov	r8, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	469a      	mov	sl, r3
 8005eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eba:	d807      	bhi.n	8005ecc <_printf_i+0x28>
 8005ebc:	2f62      	cmp	r7, #98	@ 0x62
 8005ebe:	d80a      	bhi.n	8005ed6 <_printf_i+0x32>
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	f000 80d2 	beq.w	800606a <_printf_i+0x1c6>
 8005ec6:	2f58      	cmp	r7, #88	@ 0x58
 8005ec8:	f000 80b9 	beq.w	800603e <_printf_i+0x19a>
 8005ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ed4:	e03a      	b.n	8005f4c <_printf_i+0xa8>
 8005ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005eda:	2b15      	cmp	r3, #21
 8005edc:	d8f6      	bhi.n	8005ecc <_printf_i+0x28>
 8005ede:	a101      	add	r1, pc, #4	@ (adr r1, 8005ee4 <_printf_i+0x40>)
 8005ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ee4:	08005f3d 	.word	0x08005f3d
 8005ee8:	08005f51 	.word	0x08005f51
 8005eec:	08005ecd 	.word	0x08005ecd
 8005ef0:	08005ecd 	.word	0x08005ecd
 8005ef4:	08005ecd 	.word	0x08005ecd
 8005ef8:	08005ecd 	.word	0x08005ecd
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	08005ecd 	.word	0x08005ecd
 8005f04:	08005ecd 	.word	0x08005ecd
 8005f08:	08005ecd 	.word	0x08005ecd
 8005f0c:	08005ecd 	.word	0x08005ecd
 8005f10:	08006051 	.word	0x08006051
 8005f14:	08005f7b 	.word	0x08005f7b
 8005f18:	0800600b 	.word	0x0800600b
 8005f1c:	08005ecd 	.word	0x08005ecd
 8005f20:	08005ecd 	.word	0x08005ecd
 8005f24:	08006073 	.word	0x08006073
 8005f28:	08005ecd 	.word	0x08005ecd
 8005f2c:	08005f7b 	.word	0x08005f7b
 8005f30:	08005ecd 	.word	0x08005ecd
 8005f34:	08005ecd 	.word	0x08005ecd
 8005f38:	08006013 	.word	0x08006013
 8005f3c:	6833      	ldr	r3, [r6, #0]
 8005f3e:	1d1a      	adds	r2, r3, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6032      	str	r2, [r6, #0]
 8005f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e09d      	b.n	800608c <_printf_i+0x1e8>
 8005f50:	6833      	ldr	r3, [r6, #0]
 8005f52:	6820      	ldr	r0, [r4, #0]
 8005f54:	1d19      	adds	r1, r3, #4
 8005f56:	6031      	str	r1, [r6, #0]
 8005f58:	0606      	lsls	r6, r0, #24
 8005f5a:	d501      	bpl.n	8005f60 <_printf_i+0xbc>
 8005f5c:	681d      	ldr	r5, [r3, #0]
 8005f5e:	e003      	b.n	8005f68 <_printf_i+0xc4>
 8005f60:	0645      	lsls	r5, r0, #25
 8005f62:	d5fb      	bpl.n	8005f5c <_printf_i+0xb8>
 8005f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f68:	2d00      	cmp	r5, #0
 8005f6a:	da03      	bge.n	8005f74 <_printf_i+0xd0>
 8005f6c:	232d      	movs	r3, #45	@ 0x2d
 8005f6e:	426d      	negs	r5, r5
 8005f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f74:	4859      	ldr	r0, [pc, #356]	@ (80060dc <_printf_i+0x238>)
 8005f76:	230a      	movs	r3, #10
 8005f78:	e011      	b.n	8005f9e <_printf_i+0xfa>
 8005f7a:	6821      	ldr	r1, [r4, #0]
 8005f7c:	6833      	ldr	r3, [r6, #0]
 8005f7e:	0608      	lsls	r0, r1, #24
 8005f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f84:	d402      	bmi.n	8005f8c <_printf_i+0xe8>
 8005f86:	0649      	lsls	r1, r1, #25
 8005f88:	bf48      	it	mi
 8005f8a:	b2ad      	uxthmi	r5, r5
 8005f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f8e:	4853      	ldr	r0, [pc, #332]	@ (80060dc <_printf_i+0x238>)
 8005f90:	6033      	str	r3, [r6, #0]
 8005f92:	bf14      	ite	ne
 8005f94:	230a      	movne	r3, #10
 8005f96:	2308      	moveq	r3, #8
 8005f98:	2100      	movs	r1, #0
 8005f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f9e:	6866      	ldr	r6, [r4, #4]
 8005fa0:	60a6      	str	r6, [r4, #8]
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	bfa2      	ittt	ge
 8005fa6:	6821      	ldrge	r1, [r4, #0]
 8005fa8:	f021 0104 	bicge.w	r1, r1, #4
 8005fac:	6021      	strge	r1, [r4, #0]
 8005fae:	b90d      	cbnz	r5, 8005fb4 <_printf_i+0x110>
 8005fb0:	2e00      	cmp	r6, #0
 8005fb2:	d04b      	beq.n	800604c <_printf_i+0x1a8>
 8005fb4:	4616      	mov	r6, r2
 8005fb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fba:	fb03 5711 	mls	r7, r3, r1, r5
 8005fbe:	5dc7      	ldrb	r7, [r0, r7]
 8005fc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fc4:	462f      	mov	r7, r5
 8005fc6:	42bb      	cmp	r3, r7
 8005fc8:	460d      	mov	r5, r1
 8005fca:	d9f4      	bls.n	8005fb6 <_printf_i+0x112>
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d10b      	bne.n	8005fe8 <_printf_i+0x144>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	07df      	lsls	r7, r3, #31
 8005fd4:	d508      	bpl.n	8005fe8 <_printf_i+0x144>
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	6861      	ldr	r1, [r4, #4]
 8005fda:	4299      	cmp	r1, r3
 8005fdc:	bfde      	ittt	le
 8005fde:	2330      	movle	r3, #48	@ 0x30
 8005fe0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fe4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fe8:	1b92      	subs	r2, r2, r6
 8005fea:	6122      	str	r2, [r4, #16]
 8005fec:	f8cd a000 	str.w	sl, [sp]
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	aa03      	add	r2, sp, #12
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f7ff fee6 	bl	8005dc8 <_printf_common>
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d14a      	bne.n	8006096 <_printf_i+0x1f2>
 8006000:	f04f 30ff 	mov.w	r0, #4294967295
 8006004:	b004      	add	sp, #16
 8006006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	f043 0320 	orr.w	r3, r3, #32
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	4833      	ldr	r0, [pc, #204]	@ (80060e0 <_printf_i+0x23c>)
 8006014:	2778      	movs	r7, #120	@ 0x78
 8006016:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	6831      	ldr	r1, [r6, #0]
 800601e:	061f      	lsls	r7, r3, #24
 8006020:	f851 5b04 	ldr.w	r5, [r1], #4
 8006024:	d402      	bmi.n	800602c <_printf_i+0x188>
 8006026:	065f      	lsls	r7, r3, #25
 8006028:	bf48      	it	mi
 800602a:	b2ad      	uxthmi	r5, r5
 800602c:	6031      	str	r1, [r6, #0]
 800602e:	07d9      	lsls	r1, r3, #31
 8006030:	bf44      	itt	mi
 8006032:	f043 0320 	orrmi.w	r3, r3, #32
 8006036:	6023      	strmi	r3, [r4, #0]
 8006038:	b11d      	cbz	r5, 8006042 <_printf_i+0x19e>
 800603a:	2310      	movs	r3, #16
 800603c:	e7ac      	b.n	8005f98 <_printf_i+0xf4>
 800603e:	4827      	ldr	r0, [pc, #156]	@ (80060dc <_printf_i+0x238>)
 8006040:	e7e9      	b.n	8006016 <_printf_i+0x172>
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	f023 0320 	bic.w	r3, r3, #32
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	e7f6      	b.n	800603a <_printf_i+0x196>
 800604c:	4616      	mov	r6, r2
 800604e:	e7bd      	b.n	8005fcc <_printf_i+0x128>
 8006050:	6833      	ldr	r3, [r6, #0]
 8006052:	6825      	ldr	r5, [r4, #0]
 8006054:	6961      	ldr	r1, [r4, #20]
 8006056:	1d18      	adds	r0, r3, #4
 8006058:	6030      	str	r0, [r6, #0]
 800605a:	062e      	lsls	r6, r5, #24
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	d501      	bpl.n	8006064 <_printf_i+0x1c0>
 8006060:	6019      	str	r1, [r3, #0]
 8006062:	e002      	b.n	800606a <_printf_i+0x1c6>
 8006064:	0668      	lsls	r0, r5, #25
 8006066:	d5fb      	bpl.n	8006060 <_printf_i+0x1bc>
 8006068:	8019      	strh	r1, [r3, #0]
 800606a:	2300      	movs	r3, #0
 800606c:	6123      	str	r3, [r4, #16]
 800606e:	4616      	mov	r6, r2
 8006070:	e7bc      	b.n	8005fec <_printf_i+0x148>
 8006072:	6833      	ldr	r3, [r6, #0]
 8006074:	1d1a      	adds	r2, r3, #4
 8006076:	6032      	str	r2, [r6, #0]
 8006078:	681e      	ldr	r6, [r3, #0]
 800607a:	6862      	ldr	r2, [r4, #4]
 800607c:	2100      	movs	r1, #0
 800607e:	4630      	mov	r0, r6
 8006080:	f7fa f8a6 	bl	80001d0 <memchr>
 8006084:	b108      	cbz	r0, 800608a <_printf_i+0x1e6>
 8006086:	1b80      	subs	r0, r0, r6
 8006088:	6060      	str	r0, [r4, #4]
 800608a:	6863      	ldr	r3, [r4, #4]
 800608c:	6123      	str	r3, [r4, #16]
 800608e:	2300      	movs	r3, #0
 8006090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006094:	e7aa      	b.n	8005fec <_printf_i+0x148>
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	4632      	mov	r2, r6
 800609a:	4649      	mov	r1, r9
 800609c:	4640      	mov	r0, r8
 800609e:	47d0      	blx	sl
 80060a0:	3001      	adds	r0, #1
 80060a2:	d0ad      	beq.n	8006000 <_printf_i+0x15c>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	079b      	lsls	r3, r3, #30
 80060a8:	d413      	bmi.n	80060d2 <_printf_i+0x22e>
 80060aa:	68e0      	ldr	r0, [r4, #12]
 80060ac:	9b03      	ldr	r3, [sp, #12]
 80060ae:	4298      	cmp	r0, r3
 80060b0:	bfb8      	it	lt
 80060b2:	4618      	movlt	r0, r3
 80060b4:	e7a6      	b.n	8006004 <_printf_i+0x160>
 80060b6:	2301      	movs	r3, #1
 80060b8:	4632      	mov	r2, r6
 80060ba:	4649      	mov	r1, r9
 80060bc:	4640      	mov	r0, r8
 80060be:	47d0      	blx	sl
 80060c0:	3001      	adds	r0, #1
 80060c2:	d09d      	beq.n	8006000 <_printf_i+0x15c>
 80060c4:	3501      	adds	r5, #1
 80060c6:	68e3      	ldr	r3, [r4, #12]
 80060c8:	9903      	ldr	r1, [sp, #12]
 80060ca:	1a5b      	subs	r3, r3, r1
 80060cc:	42ab      	cmp	r3, r5
 80060ce:	dcf2      	bgt.n	80060b6 <_printf_i+0x212>
 80060d0:	e7eb      	b.n	80060aa <_printf_i+0x206>
 80060d2:	2500      	movs	r5, #0
 80060d4:	f104 0619 	add.w	r6, r4, #25
 80060d8:	e7f5      	b.n	80060c6 <_printf_i+0x222>
 80060da:	bf00      	nop
 80060dc:	08008582 	.word	0x08008582
 80060e0:	08008593 	.word	0x08008593

080060e4 <std>:
 80060e4:	2300      	movs	r3, #0
 80060e6:	b510      	push	{r4, lr}
 80060e8:	4604      	mov	r4, r0
 80060ea:	e9c0 3300 	strd	r3, r3, [r0]
 80060ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060f2:	6083      	str	r3, [r0, #8]
 80060f4:	8181      	strh	r1, [r0, #12]
 80060f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80060f8:	81c2      	strh	r2, [r0, #14]
 80060fa:	6183      	str	r3, [r0, #24]
 80060fc:	4619      	mov	r1, r3
 80060fe:	2208      	movs	r2, #8
 8006100:	305c      	adds	r0, #92	@ 0x5c
 8006102:	f000 f928 	bl	8006356 <memset>
 8006106:	4b0d      	ldr	r3, [pc, #52]	@ (800613c <std+0x58>)
 8006108:	6263      	str	r3, [r4, #36]	@ 0x24
 800610a:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <std+0x5c>)
 800610c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800610e:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <std+0x60>)
 8006110:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006112:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <std+0x64>)
 8006114:	6323      	str	r3, [r4, #48]	@ 0x30
 8006116:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <std+0x68>)
 8006118:	6224      	str	r4, [r4, #32]
 800611a:	429c      	cmp	r4, r3
 800611c:	d006      	beq.n	800612c <std+0x48>
 800611e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006122:	4294      	cmp	r4, r2
 8006124:	d002      	beq.n	800612c <std+0x48>
 8006126:	33d0      	adds	r3, #208	@ 0xd0
 8006128:	429c      	cmp	r4, r3
 800612a:	d105      	bne.n	8006138 <std+0x54>
 800612c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006134:	f000 b98c 	b.w	8006450 <__retarget_lock_init_recursive>
 8006138:	bd10      	pop	{r4, pc}
 800613a:	bf00      	nop
 800613c:	080062d1 	.word	0x080062d1
 8006140:	080062f3 	.word	0x080062f3
 8006144:	0800632b 	.word	0x0800632b
 8006148:	0800634f 	.word	0x0800634f
 800614c:	20000560 	.word	0x20000560

08006150 <stdio_exit_handler>:
 8006150:	4a02      	ldr	r2, [pc, #8]	@ (800615c <stdio_exit_handler+0xc>)
 8006152:	4903      	ldr	r1, [pc, #12]	@ (8006160 <stdio_exit_handler+0x10>)
 8006154:	4803      	ldr	r0, [pc, #12]	@ (8006164 <stdio_exit_handler+0x14>)
 8006156:	f000 b869 	b.w	800622c <_fwalk_sglue>
 800615a:	bf00      	nop
 800615c:	2000000c 	.word	0x2000000c
 8006160:	08007dad 	.word	0x08007dad
 8006164:	2000001c 	.word	0x2000001c

08006168 <cleanup_stdio>:
 8006168:	6841      	ldr	r1, [r0, #4]
 800616a:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <cleanup_stdio+0x34>)
 800616c:	4299      	cmp	r1, r3
 800616e:	b510      	push	{r4, lr}
 8006170:	4604      	mov	r4, r0
 8006172:	d001      	beq.n	8006178 <cleanup_stdio+0x10>
 8006174:	f001 fe1a 	bl	8007dac <_fflush_r>
 8006178:	68a1      	ldr	r1, [r4, #8]
 800617a:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <cleanup_stdio+0x38>)
 800617c:	4299      	cmp	r1, r3
 800617e:	d002      	beq.n	8006186 <cleanup_stdio+0x1e>
 8006180:	4620      	mov	r0, r4
 8006182:	f001 fe13 	bl	8007dac <_fflush_r>
 8006186:	68e1      	ldr	r1, [r4, #12]
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <cleanup_stdio+0x3c>)
 800618a:	4299      	cmp	r1, r3
 800618c:	d004      	beq.n	8006198 <cleanup_stdio+0x30>
 800618e:	4620      	mov	r0, r4
 8006190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006194:	f001 be0a 	b.w	8007dac <_fflush_r>
 8006198:	bd10      	pop	{r4, pc}
 800619a:	bf00      	nop
 800619c:	20000560 	.word	0x20000560
 80061a0:	200005c8 	.word	0x200005c8
 80061a4:	20000630 	.word	0x20000630

080061a8 <global_stdio_init.part.0>:
 80061a8:	b510      	push	{r4, lr}
 80061aa:	4b0b      	ldr	r3, [pc, #44]	@ (80061d8 <global_stdio_init.part.0+0x30>)
 80061ac:	4c0b      	ldr	r4, [pc, #44]	@ (80061dc <global_stdio_init.part.0+0x34>)
 80061ae:	4a0c      	ldr	r2, [pc, #48]	@ (80061e0 <global_stdio_init.part.0+0x38>)
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	4620      	mov	r0, r4
 80061b4:	2200      	movs	r2, #0
 80061b6:	2104      	movs	r1, #4
 80061b8:	f7ff ff94 	bl	80060e4 <std>
 80061bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061c0:	2201      	movs	r2, #1
 80061c2:	2109      	movs	r1, #9
 80061c4:	f7ff ff8e 	bl	80060e4 <std>
 80061c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061cc:	2202      	movs	r2, #2
 80061ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d2:	2112      	movs	r1, #18
 80061d4:	f7ff bf86 	b.w	80060e4 <std>
 80061d8:	20000698 	.word	0x20000698
 80061dc:	20000560 	.word	0x20000560
 80061e0:	08006151 	.word	0x08006151

080061e4 <__sfp_lock_acquire>:
 80061e4:	4801      	ldr	r0, [pc, #4]	@ (80061ec <__sfp_lock_acquire+0x8>)
 80061e6:	f000 b934 	b.w	8006452 <__retarget_lock_acquire_recursive>
 80061ea:	bf00      	nop
 80061ec:	200006a1 	.word	0x200006a1

080061f0 <__sfp_lock_release>:
 80061f0:	4801      	ldr	r0, [pc, #4]	@ (80061f8 <__sfp_lock_release+0x8>)
 80061f2:	f000 b92f 	b.w	8006454 <__retarget_lock_release_recursive>
 80061f6:	bf00      	nop
 80061f8:	200006a1 	.word	0x200006a1

080061fc <__sinit>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	4604      	mov	r4, r0
 8006200:	f7ff fff0 	bl	80061e4 <__sfp_lock_acquire>
 8006204:	6a23      	ldr	r3, [r4, #32]
 8006206:	b11b      	cbz	r3, 8006210 <__sinit+0x14>
 8006208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800620c:	f7ff bff0 	b.w	80061f0 <__sfp_lock_release>
 8006210:	4b04      	ldr	r3, [pc, #16]	@ (8006224 <__sinit+0x28>)
 8006212:	6223      	str	r3, [r4, #32]
 8006214:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <__sinit+0x2c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f5      	bne.n	8006208 <__sinit+0xc>
 800621c:	f7ff ffc4 	bl	80061a8 <global_stdio_init.part.0>
 8006220:	e7f2      	b.n	8006208 <__sinit+0xc>
 8006222:	bf00      	nop
 8006224:	08006169 	.word	0x08006169
 8006228:	20000698 	.word	0x20000698

0800622c <_fwalk_sglue>:
 800622c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006230:	4607      	mov	r7, r0
 8006232:	4688      	mov	r8, r1
 8006234:	4614      	mov	r4, r2
 8006236:	2600      	movs	r6, #0
 8006238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800623c:	f1b9 0901 	subs.w	r9, r9, #1
 8006240:	d505      	bpl.n	800624e <_fwalk_sglue+0x22>
 8006242:	6824      	ldr	r4, [r4, #0]
 8006244:	2c00      	cmp	r4, #0
 8006246:	d1f7      	bne.n	8006238 <_fwalk_sglue+0xc>
 8006248:	4630      	mov	r0, r6
 800624a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800624e:	89ab      	ldrh	r3, [r5, #12]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d907      	bls.n	8006264 <_fwalk_sglue+0x38>
 8006254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006258:	3301      	adds	r3, #1
 800625a:	d003      	beq.n	8006264 <_fwalk_sglue+0x38>
 800625c:	4629      	mov	r1, r5
 800625e:	4638      	mov	r0, r7
 8006260:	47c0      	blx	r8
 8006262:	4306      	orrs	r6, r0
 8006264:	3568      	adds	r5, #104	@ 0x68
 8006266:	e7e9      	b.n	800623c <_fwalk_sglue+0x10>

08006268 <sniprintf>:
 8006268:	b40c      	push	{r2, r3}
 800626a:	b530      	push	{r4, r5, lr}
 800626c:	4b17      	ldr	r3, [pc, #92]	@ (80062cc <sniprintf+0x64>)
 800626e:	1e0c      	subs	r4, r1, #0
 8006270:	681d      	ldr	r5, [r3, #0]
 8006272:	b09d      	sub	sp, #116	@ 0x74
 8006274:	da08      	bge.n	8006288 <sniprintf+0x20>
 8006276:	238b      	movs	r3, #139	@ 0x8b
 8006278:	602b      	str	r3, [r5, #0]
 800627a:	f04f 30ff 	mov.w	r0, #4294967295
 800627e:	b01d      	add	sp, #116	@ 0x74
 8006280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006284:	b002      	add	sp, #8
 8006286:	4770      	bx	lr
 8006288:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800628c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006290:	bf14      	ite	ne
 8006292:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006296:	4623      	moveq	r3, r4
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	9307      	str	r3, [sp, #28]
 800629c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80062a0:	9002      	str	r0, [sp, #8]
 80062a2:	9006      	str	r0, [sp, #24]
 80062a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80062a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80062aa:	ab21      	add	r3, sp, #132	@ 0x84
 80062ac:	a902      	add	r1, sp, #8
 80062ae:	4628      	mov	r0, r5
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	f001 fbfb 	bl	8007aac <_svfiprintf_r>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	bfbc      	itt	lt
 80062ba:	238b      	movlt	r3, #139	@ 0x8b
 80062bc:	602b      	strlt	r3, [r5, #0]
 80062be:	2c00      	cmp	r4, #0
 80062c0:	d0dd      	beq.n	800627e <sniprintf+0x16>
 80062c2:	9b02      	ldr	r3, [sp, #8]
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	e7d9      	b.n	800627e <sniprintf+0x16>
 80062ca:	bf00      	nop
 80062cc:	20000018 	.word	0x20000018

080062d0 <__sread>:
 80062d0:	b510      	push	{r4, lr}
 80062d2:	460c      	mov	r4, r1
 80062d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d8:	f000 f86c 	bl	80063b4 <_read_r>
 80062dc:	2800      	cmp	r0, #0
 80062de:	bfab      	itete	ge
 80062e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062e2:	89a3      	ldrhlt	r3, [r4, #12]
 80062e4:	181b      	addge	r3, r3, r0
 80062e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062ea:	bfac      	ite	ge
 80062ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062ee:	81a3      	strhlt	r3, [r4, #12]
 80062f0:	bd10      	pop	{r4, pc}

080062f2 <__swrite>:
 80062f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f6:	461f      	mov	r7, r3
 80062f8:	898b      	ldrh	r3, [r1, #12]
 80062fa:	05db      	lsls	r3, r3, #23
 80062fc:	4605      	mov	r5, r0
 80062fe:	460c      	mov	r4, r1
 8006300:	4616      	mov	r6, r2
 8006302:	d505      	bpl.n	8006310 <__swrite+0x1e>
 8006304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006308:	2302      	movs	r3, #2
 800630a:	2200      	movs	r2, #0
 800630c:	f000 f840 	bl	8006390 <_lseek_r>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006316:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	4632      	mov	r2, r6
 800631e:	463b      	mov	r3, r7
 8006320:	4628      	mov	r0, r5
 8006322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006326:	f000 b857 	b.w	80063d8 <_write_r>

0800632a <__sseek>:
 800632a:	b510      	push	{r4, lr}
 800632c:	460c      	mov	r4, r1
 800632e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006332:	f000 f82d 	bl	8006390 <_lseek_r>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	bf15      	itete	ne
 800633c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800633e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006342:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006346:	81a3      	strheq	r3, [r4, #12]
 8006348:	bf18      	it	ne
 800634a:	81a3      	strhne	r3, [r4, #12]
 800634c:	bd10      	pop	{r4, pc}

0800634e <__sclose>:
 800634e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006352:	f000 b80d 	b.w	8006370 <_close_r>

08006356 <memset>:
 8006356:	4402      	add	r2, r0
 8006358:	4603      	mov	r3, r0
 800635a:	4293      	cmp	r3, r2
 800635c:	d100      	bne.n	8006360 <memset+0xa>
 800635e:	4770      	bx	lr
 8006360:	f803 1b01 	strb.w	r1, [r3], #1
 8006364:	e7f9      	b.n	800635a <memset+0x4>
	...

08006368 <_localeconv_r>:
 8006368:	4800      	ldr	r0, [pc, #0]	@ (800636c <_localeconv_r+0x4>)
 800636a:	4770      	bx	lr
 800636c:	20000158 	.word	0x20000158

08006370 <_close_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4d06      	ldr	r5, [pc, #24]	@ (800638c <_close_r+0x1c>)
 8006374:	2300      	movs	r3, #0
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	602b      	str	r3, [r5, #0]
 800637c:	f7fb fb2c 	bl	80019d8 <_close>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_close_r+0x1a>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_close_r+0x1a>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	2000069c 	.word	0x2000069c

08006390 <_lseek_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	@ (80063b0 <_lseek_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fb fb41 	bl	8001a26 <_lseek>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_lseek_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_lseek_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	2000069c 	.word	0x2000069c

080063b4 <_read_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d07      	ldr	r5, [pc, #28]	@ (80063d4 <_read_r+0x20>)
 80063b8:	4604      	mov	r4, r0
 80063ba:	4608      	mov	r0, r1
 80063bc:	4611      	mov	r1, r2
 80063be:	2200      	movs	r2, #0
 80063c0:	602a      	str	r2, [r5, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	f7fb facf 	bl	8001966 <_read>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_read_r+0x1e>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_read_r+0x1e>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	2000069c 	.word	0x2000069c

080063d8 <_write_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4d07      	ldr	r5, [pc, #28]	@ (80063f8 <_write_r+0x20>)
 80063dc:	4604      	mov	r4, r0
 80063de:	4608      	mov	r0, r1
 80063e0:	4611      	mov	r1, r2
 80063e2:	2200      	movs	r2, #0
 80063e4:	602a      	str	r2, [r5, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f7fb fada 	bl	80019a0 <_write>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_write_r+0x1e>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_write_r+0x1e>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	2000069c 	.word	0x2000069c

080063fc <__errno>:
 80063fc:	4b01      	ldr	r3, [pc, #4]	@ (8006404 <__errno+0x8>)
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000018 	.word	0x20000018

08006408 <__libc_init_array>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	4d0d      	ldr	r5, [pc, #52]	@ (8006440 <__libc_init_array+0x38>)
 800640c:	4c0d      	ldr	r4, [pc, #52]	@ (8006444 <__libc_init_array+0x3c>)
 800640e:	1b64      	subs	r4, r4, r5
 8006410:	10a4      	asrs	r4, r4, #2
 8006412:	2600      	movs	r6, #0
 8006414:	42a6      	cmp	r6, r4
 8006416:	d109      	bne.n	800642c <__libc_init_array+0x24>
 8006418:	4d0b      	ldr	r5, [pc, #44]	@ (8006448 <__libc_init_array+0x40>)
 800641a:	4c0c      	ldr	r4, [pc, #48]	@ (800644c <__libc_init_array+0x44>)
 800641c:	f002 f864 	bl	80084e8 <_init>
 8006420:	1b64      	subs	r4, r4, r5
 8006422:	10a4      	asrs	r4, r4, #2
 8006424:	2600      	movs	r6, #0
 8006426:	42a6      	cmp	r6, r4
 8006428:	d105      	bne.n	8006436 <__libc_init_array+0x2e>
 800642a:	bd70      	pop	{r4, r5, r6, pc}
 800642c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006430:	4798      	blx	r3
 8006432:	3601      	adds	r6, #1
 8006434:	e7ee      	b.n	8006414 <__libc_init_array+0xc>
 8006436:	f855 3b04 	ldr.w	r3, [r5], #4
 800643a:	4798      	blx	r3
 800643c:	3601      	adds	r6, #1
 800643e:	e7f2      	b.n	8006426 <__libc_init_array+0x1e>
 8006440:	080088e8 	.word	0x080088e8
 8006444:	080088e8 	.word	0x080088e8
 8006448:	080088e8 	.word	0x080088e8
 800644c:	080088ec 	.word	0x080088ec

08006450 <__retarget_lock_init_recursive>:
 8006450:	4770      	bx	lr

08006452 <__retarget_lock_acquire_recursive>:
 8006452:	4770      	bx	lr

08006454 <__retarget_lock_release_recursive>:
 8006454:	4770      	bx	lr

08006456 <quorem>:
 8006456:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	6903      	ldr	r3, [r0, #16]
 800645c:	690c      	ldr	r4, [r1, #16]
 800645e:	42a3      	cmp	r3, r4
 8006460:	4607      	mov	r7, r0
 8006462:	db7e      	blt.n	8006562 <quorem+0x10c>
 8006464:	3c01      	subs	r4, #1
 8006466:	f101 0814 	add.w	r8, r1, #20
 800646a:	00a3      	lsls	r3, r4, #2
 800646c:	f100 0514 	add.w	r5, r0, #20
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800647c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006480:	3301      	adds	r3, #1
 8006482:	429a      	cmp	r2, r3
 8006484:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006488:	fbb2 f6f3 	udiv	r6, r2, r3
 800648c:	d32e      	bcc.n	80064ec <quorem+0x96>
 800648e:	f04f 0a00 	mov.w	sl, #0
 8006492:	46c4      	mov	ip, r8
 8006494:	46ae      	mov	lr, r5
 8006496:	46d3      	mov	fp, sl
 8006498:	f85c 3b04 	ldr.w	r3, [ip], #4
 800649c:	b298      	uxth	r0, r3
 800649e:	fb06 a000 	mla	r0, r6, r0, sl
 80064a2:	0c02      	lsrs	r2, r0, #16
 80064a4:	0c1b      	lsrs	r3, r3, #16
 80064a6:	fb06 2303 	mla	r3, r6, r3, r2
 80064aa:	f8de 2000 	ldr.w	r2, [lr]
 80064ae:	b280      	uxth	r0, r0
 80064b0:	b292      	uxth	r2, r2
 80064b2:	1a12      	subs	r2, r2, r0
 80064b4:	445a      	add	r2, fp
 80064b6:	f8de 0000 	ldr.w	r0, [lr]
 80064ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80064c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80064c8:	b292      	uxth	r2, r2
 80064ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064ce:	45e1      	cmp	r9, ip
 80064d0:	f84e 2b04 	str.w	r2, [lr], #4
 80064d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80064d8:	d2de      	bcs.n	8006498 <quorem+0x42>
 80064da:	9b00      	ldr	r3, [sp, #0]
 80064dc:	58eb      	ldr	r3, [r5, r3]
 80064de:	b92b      	cbnz	r3, 80064ec <quorem+0x96>
 80064e0:	9b01      	ldr	r3, [sp, #4]
 80064e2:	3b04      	subs	r3, #4
 80064e4:	429d      	cmp	r5, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	d32f      	bcc.n	800654a <quorem+0xf4>
 80064ea:	613c      	str	r4, [r7, #16]
 80064ec:	4638      	mov	r0, r7
 80064ee:	f001 f979 	bl	80077e4 <__mcmp>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	db25      	blt.n	8006542 <quorem+0xec>
 80064f6:	4629      	mov	r1, r5
 80064f8:	2000      	movs	r0, #0
 80064fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80064fe:	f8d1 c000 	ldr.w	ip, [r1]
 8006502:	fa1f fe82 	uxth.w	lr, r2
 8006506:	fa1f f38c 	uxth.w	r3, ip
 800650a:	eba3 030e 	sub.w	r3, r3, lr
 800650e:	4403      	add	r3, r0
 8006510:	0c12      	lsrs	r2, r2, #16
 8006512:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006516:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800651a:	b29b      	uxth	r3, r3
 800651c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006520:	45c1      	cmp	r9, r8
 8006522:	f841 3b04 	str.w	r3, [r1], #4
 8006526:	ea4f 4022 	mov.w	r0, r2, asr #16
 800652a:	d2e6      	bcs.n	80064fa <quorem+0xa4>
 800652c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006530:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006534:	b922      	cbnz	r2, 8006540 <quorem+0xea>
 8006536:	3b04      	subs	r3, #4
 8006538:	429d      	cmp	r5, r3
 800653a:	461a      	mov	r2, r3
 800653c:	d30b      	bcc.n	8006556 <quorem+0x100>
 800653e:	613c      	str	r4, [r7, #16]
 8006540:	3601      	adds	r6, #1
 8006542:	4630      	mov	r0, r6
 8006544:	b003      	add	sp, #12
 8006546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	3b04      	subs	r3, #4
 800654e:	2a00      	cmp	r2, #0
 8006550:	d1cb      	bne.n	80064ea <quorem+0x94>
 8006552:	3c01      	subs	r4, #1
 8006554:	e7c6      	b.n	80064e4 <quorem+0x8e>
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	3b04      	subs	r3, #4
 800655a:	2a00      	cmp	r2, #0
 800655c:	d1ef      	bne.n	800653e <quorem+0xe8>
 800655e:	3c01      	subs	r4, #1
 8006560:	e7ea      	b.n	8006538 <quorem+0xe2>
 8006562:	2000      	movs	r0, #0
 8006564:	e7ee      	b.n	8006544 <quorem+0xee>
	...

08006568 <_dtoa_r>:
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	69c7      	ldr	r7, [r0, #28]
 800656e:	b099      	sub	sp, #100	@ 0x64
 8006570:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006574:	ec55 4b10 	vmov	r4, r5, d0
 8006578:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800657a:	9109      	str	r1, [sp, #36]	@ 0x24
 800657c:	4683      	mov	fp, r0
 800657e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006580:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006582:	b97f      	cbnz	r7, 80065a4 <_dtoa_r+0x3c>
 8006584:	2010      	movs	r0, #16
 8006586:	f000 fdfd 	bl	8007184 <malloc>
 800658a:	4602      	mov	r2, r0
 800658c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006590:	b920      	cbnz	r0, 800659c <_dtoa_r+0x34>
 8006592:	4ba7      	ldr	r3, [pc, #668]	@ (8006830 <_dtoa_r+0x2c8>)
 8006594:	21ef      	movs	r1, #239	@ 0xef
 8006596:	48a7      	ldr	r0, [pc, #668]	@ (8006834 <_dtoa_r+0x2cc>)
 8006598:	f001 fc68 	bl	8007e6c <__assert_func>
 800659c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80065a0:	6007      	str	r7, [r0, #0]
 80065a2:	60c7      	str	r7, [r0, #12]
 80065a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80065a8:	6819      	ldr	r1, [r3, #0]
 80065aa:	b159      	cbz	r1, 80065c4 <_dtoa_r+0x5c>
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	604a      	str	r2, [r1, #4]
 80065b0:	2301      	movs	r3, #1
 80065b2:	4093      	lsls	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
 80065b6:	4658      	mov	r0, fp
 80065b8:	f000 feda 	bl	8007370 <_Bfree>
 80065bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	1e2b      	subs	r3, r5, #0
 80065c6:	bfb9      	ittee	lt
 80065c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80065cc:	9303      	strlt	r3, [sp, #12]
 80065ce:	2300      	movge	r3, #0
 80065d0:	6033      	strge	r3, [r6, #0]
 80065d2:	9f03      	ldr	r7, [sp, #12]
 80065d4:	4b98      	ldr	r3, [pc, #608]	@ (8006838 <_dtoa_r+0x2d0>)
 80065d6:	bfbc      	itt	lt
 80065d8:	2201      	movlt	r2, #1
 80065da:	6032      	strlt	r2, [r6, #0]
 80065dc:	43bb      	bics	r3, r7
 80065de:	d112      	bne.n	8006606 <_dtoa_r+0x9e>
 80065e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065ec:	4323      	orrs	r3, r4
 80065ee:	f000 854d 	beq.w	800708c <_dtoa_r+0xb24>
 80065f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800684c <_dtoa_r+0x2e4>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 854f 	beq.w	800709c <_dtoa_r+0xb34>
 80065fe:	f10a 0303 	add.w	r3, sl, #3
 8006602:	f000 bd49 	b.w	8007098 <_dtoa_r+0xb30>
 8006606:	ed9d 7b02 	vldr	d7, [sp, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	ec51 0b17 	vmov	r0, r1, d7
 8006610:	2300      	movs	r3, #0
 8006612:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006616:	f7fa fa57 	bl	8000ac8 <__aeabi_dcmpeq>
 800661a:	4680      	mov	r8, r0
 800661c:	b158      	cbz	r0, 8006636 <_dtoa_r+0xce>
 800661e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006620:	2301      	movs	r3, #1
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006626:	b113      	cbz	r3, 800662e <_dtoa_r+0xc6>
 8006628:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800662a:	4b84      	ldr	r3, [pc, #528]	@ (800683c <_dtoa_r+0x2d4>)
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006850 <_dtoa_r+0x2e8>
 8006632:	f000 bd33 	b.w	800709c <_dtoa_r+0xb34>
 8006636:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800663a:	aa16      	add	r2, sp, #88	@ 0x58
 800663c:	a917      	add	r1, sp, #92	@ 0x5c
 800663e:	4658      	mov	r0, fp
 8006640:	f001 f980 	bl	8007944 <__d2b>
 8006644:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006648:	4681      	mov	r9, r0
 800664a:	2e00      	cmp	r6, #0
 800664c:	d077      	beq.n	800673e <_dtoa_r+0x1d6>
 800664e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006650:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800665c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006660:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006664:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006668:	4619      	mov	r1, r3
 800666a:	2200      	movs	r2, #0
 800666c:	4b74      	ldr	r3, [pc, #464]	@ (8006840 <_dtoa_r+0x2d8>)
 800666e:	f7f9 fe0b 	bl	8000288 <__aeabi_dsub>
 8006672:	a369      	add	r3, pc, #420	@ (adr r3, 8006818 <_dtoa_r+0x2b0>)
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f7f9 ffbe 	bl	80005f8 <__aeabi_dmul>
 800667c:	a368      	add	r3, pc, #416	@ (adr r3, 8006820 <_dtoa_r+0x2b8>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f7f9 fe03 	bl	800028c <__adddf3>
 8006686:	4604      	mov	r4, r0
 8006688:	4630      	mov	r0, r6
 800668a:	460d      	mov	r5, r1
 800668c:	f7f9 ff4a 	bl	8000524 <__aeabi_i2d>
 8006690:	a365      	add	r3, pc, #404	@ (adr r3, 8006828 <_dtoa_r+0x2c0>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7f9 ffaf 	bl	80005f8 <__aeabi_dmul>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4620      	mov	r0, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	f7f9 fdf3 	bl	800028c <__adddf3>
 80066a6:	4604      	mov	r4, r0
 80066a8:	460d      	mov	r5, r1
 80066aa:	f7fa fa55 	bl	8000b58 <__aeabi_d2iz>
 80066ae:	2200      	movs	r2, #0
 80066b0:	4607      	mov	r7, r0
 80066b2:	2300      	movs	r3, #0
 80066b4:	4620      	mov	r0, r4
 80066b6:	4629      	mov	r1, r5
 80066b8:	f7fa fa10 	bl	8000adc <__aeabi_dcmplt>
 80066bc:	b140      	cbz	r0, 80066d0 <_dtoa_r+0x168>
 80066be:	4638      	mov	r0, r7
 80066c0:	f7f9 ff30 	bl	8000524 <__aeabi_i2d>
 80066c4:	4622      	mov	r2, r4
 80066c6:	462b      	mov	r3, r5
 80066c8:	f7fa f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80066cc:	b900      	cbnz	r0, 80066d0 <_dtoa_r+0x168>
 80066ce:	3f01      	subs	r7, #1
 80066d0:	2f16      	cmp	r7, #22
 80066d2:	d851      	bhi.n	8006778 <_dtoa_r+0x210>
 80066d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006844 <_dtoa_r+0x2dc>)
 80066d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066e2:	f7fa f9fb 	bl	8000adc <__aeabi_dcmplt>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d048      	beq.n	800677c <_dtoa_r+0x214>
 80066ea:	3f01      	subs	r7, #1
 80066ec:	2300      	movs	r3, #0
 80066ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80066f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066f2:	1b9b      	subs	r3, r3, r6
 80066f4:	1e5a      	subs	r2, r3, #1
 80066f6:	bf44      	itt	mi
 80066f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80066fc:	2300      	movmi	r3, #0
 80066fe:	9208      	str	r2, [sp, #32]
 8006700:	bf54      	ite	pl
 8006702:	f04f 0800 	movpl.w	r8, #0
 8006706:	9308      	strmi	r3, [sp, #32]
 8006708:	2f00      	cmp	r7, #0
 800670a:	db39      	blt.n	8006780 <_dtoa_r+0x218>
 800670c:	9b08      	ldr	r3, [sp, #32]
 800670e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006710:	443b      	add	r3, r7
 8006712:	9308      	str	r3, [sp, #32]
 8006714:	2300      	movs	r3, #0
 8006716:	930a      	str	r3, [sp, #40]	@ 0x28
 8006718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800671a:	2b09      	cmp	r3, #9
 800671c:	d864      	bhi.n	80067e8 <_dtoa_r+0x280>
 800671e:	2b05      	cmp	r3, #5
 8006720:	bfc4      	itt	gt
 8006722:	3b04      	subgt	r3, #4
 8006724:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006728:	f1a3 0302 	sub.w	r3, r3, #2
 800672c:	bfcc      	ite	gt
 800672e:	2400      	movgt	r4, #0
 8006730:	2401      	movle	r4, #1
 8006732:	2b03      	cmp	r3, #3
 8006734:	d863      	bhi.n	80067fe <_dtoa_r+0x296>
 8006736:	e8df f003 	tbb	[pc, r3]
 800673a:	372a      	.short	0x372a
 800673c:	5535      	.short	0x5535
 800673e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006742:	441e      	add	r6, r3
 8006744:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006748:	2b20      	cmp	r3, #32
 800674a:	bfc1      	itttt	gt
 800674c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006750:	409f      	lslgt	r7, r3
 8006752:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006756:	fa24 f303 	lsrgt.w	r3, r4, r3
 800675a:	bfd6      	itet	le
 800675c:	f1c3 0320 	rsble	r3, r3, #32
 8006760:	ea47 0003 	orrgt.w	r0, r7, r3
 8006764:	fa04 f003 	lslle.w	r0, r4, r3
 8006768:	f7f9 fecc 	bl	8000504 <__aeabi_ui2d>
 800676c:	2201      	movs	r2, #1
 800676e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006772:	3e01      	subs	r6, #1
 8006774:	9214      	str	r2, [sp, #80]	@ 0x50
 8006776:	e777      	b.n	8006668 <_dtoa_r+0x100>
 8006778:	2301      	movs	r3, #1
 800677a:	e7b8      	b.n	80066ee <_dtoa_r+0x186>
 800677c:	9012      	str	r0, [sp, #72]	@ 0x48
 800677e:	e7b7      	b.n	80066f0 <_dtoa_r+0x188>
 8006780:	427b      	negs	r3, r7
 8006782:	930a      	str	r3, [sp, #40]	@ 0x28
 8006784:	2300      	movs	r3, #0
 8006786:	eba8 0807 	sub.w	r8, r8, r7
 800678a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800678c:	e7c4      	b.n	8006718 <_dtoa_r+0x1b0>
 800678e:	2300      	movs	r3, #0
 8006790:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006794:	2b00      	cmp	r3, #0
 8006796:	dc35      	bgt.n	8006804 <_dtoa_r+0x29c>
 8006798:	2301      	movs	r3, #1
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	9307      	str	r3, [sp, #28]
 800679e:	461a      	mov	r2, r3
 80067a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80067a2:	e00b      	b.n	80067bc <_dtoa_r+0x254>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e7f3      	b.n	8006790 <_dtoa_r+0x228>
 80067a8:	2300      	movs	r3, #0
 80067aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	3301      	adds	r3, #1
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	9307      	str	r3, [sp, #28]
 80067b8:	bfb8      	it	lt
 80067ba:	2301      	movlt	r3, #1
 80067bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80067c0:	2100      	movs	r1, #0
 80067c2:	2204      	movs	r2, #4
 80067c4:	f102 0514 	add.w	r5, r2, #20
 80067c8:	429d      	cmp	r5, r3
 80067ca:	d91f      	bls.n	800680c <_dtoa_r+0x2a4>
 80067cc:	6041      	str	r1, [r0, #4]
 80067ce:	4658      	mov	r0, fp
 80067d0:	f000 fd8e 	bl	80072f0 <_Balloc>
 80067d4:	4682      	mov	sl, r0
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d13c      	bne.n	8006854 <_dtoa_r+0x2ec>
 80067da:	4b1b      	ldr	r3, [pc, #108]	@ (8006848 <_dtoa_r+0x2e0>)
 80067dc:	4602      	mov	r2, r0
 80067de:	f240 11af 	movw	r1, #431	@ 0x1af
 80067e2:	e6d8      	b.n	8006596 <_dtoa_r+0x2e>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e7e0      	b.n	80067aa <_dtoa_r+0x242>
 80067e8:	2401      	movs	r4, #1
 80067ea:	2300      	movs	r3, #0
 80067ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	9307      	str	r3, [sp, #28]
 80067f8:	2200      	movs	r2, #0
 80067fa:	2312      	movs	r3, #18
 80067fc:	e7d0      	b.n	80067a0 <_dtoa_r+0x238>
 80067fe:	2301      	movs	r3, #1
 8006800:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006802:	e7f5      	b.n	80067f0 <_dtoa_r+0x288>
 8006804:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	9307      	str	r3, [sp, #28]
 800680a:	e7d7      	b.n	80067bc <_dtoa_r+0x254>
 800680c:	3101      	adds	r1, #1
 800680e:	0052      	lsls	r2, r2, #1
 8006810:	e7d8      	b.n	80067c4 <_dtoa_r+0x25c>
 8006812:	bf00      	nop
 8006814:	f3af 8000 	nop.w
 8006818:	636f4361 	.word	0x636f4361
 800681c:	3fd287a7 	.word	0x3fd287a7
 8006820:	8b60c8b3 	.word	0x8b60c8b3
 8006824:	3fc68a28 	.word	0x3fc68a28
 8006828:	509f79fb 	.word	0x509f79fb
 800682c:	3fd34413 	.word	0x3fd34413
 8006830:	080085b1 	.word	0x080085b1
 8006834:	080085c8 	.word	0x080085c8
 8006838:	7ff00000 	.word	0x7ff00000
 800683c:	08008581 	.word	0x08008581
 8006840:	3ff80000 	.word	0x3ff80000
 8006844:	080086c0 	.word	0x080086c0
 8006848:	08008620 	.word	0x08008620
 800684c:	080085ad 	.word	0x080085ad
 8006850:	08008580 	.word	0x08008580
 8006854:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006858:	6018      	str	r0, [r3, #0]
 800685a:	9b07      	ldr	r3, [sp, #28]
 800685c:	2b0e      	cmp	r3, #14
 800685e:	f200 80a4 	bhi.w	80069aa <_dtoa_r+0x442>
 8006862:	2c00      	cmp	r4, #0
 8006864:	f000 80a1 	beq.w	80069aa <_dtoa_r+0x442>
 8006868:	2f00      	cmp	r7, #0
 800686a:	dd33      	ble.n	80068d4 <_dtoa_r+0x36c>
 800686c:	4bad      	ldr	r3, [pc, #692]	@ (8006b24 <_dtoa_r+0x5bc>)
 800686e:	f007 020f 	and.w	r2, r7, #15
 8006872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006876:	ed93 7b00 	vldr	d7, [r3]
 800687a:	05f8      	lsls	r0, r7, #23
 800687c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006880:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006884:	d516      	bpl.n	80068b4 <_dtoa_r+0x34c>
 8006886:	4ba8      	ldr	r3, [pc, #672]	@ (8006b28 <_dtoa_r+0x5c0>)
 8006888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800688c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006890:	f7f9 ffdc 	bl	800084c <__aeabi_ddiv>
 8006894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006898:	f004 040f 	and.w	r4, r4, #15
 800689c:	2603      	movs	r6, #3
 800689e:	4da2      	ldr	r5, [pc, #648]	@ (8006b28 <_dtoa_r+0x5c0>)
 80068a0:	b954      	cbnz	r4, 80068b8 <_dtoa_r+0x350>
 80068a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068aa:	f7f9 ffcf 	bl	800084c <__aeabi_ddiv>
 80068ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b2:	e028      	b.n	8006906 <_dtoa_r+0x39e>
 80068b4:	2602      	movs	r6, #2
 80068b6:	e7f2      	b.n	800689e <_dtoa_r+0x336>
 80068b8:	07e1      	lsls	r1, r4, #31
 80068ba:	d508      	bpl.n	80068ce <_dtoa_r+0x366>
 80068bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068c4:	f7f9 fe98 	bl	80005f8 <__aeabi_dmul>
 80068c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068cc:	3601      	adds	r6, #1
 80068ce:	1064      	asrs	r4, r4, #1
 80068d0:	3508      	adds	r5, #8
 80068d2:	e7e5      	b.n	80068a0 <_dtoa_r+0x338>
 80068d4:	f000 80d2 	beq.w	8006a7c <_dtoa_r+0x514>
 80068d8:	427c      	negs	r4, r7
 80068da:	4b92      	ldr	r3, [pc, #584]	@ (8006b24 <_dtoa_r+0x5bc>)
 80068dc:	4d92      	ldr	r5, [pc, #584]	@ (8006b28 <_dtoa_r+0x5c0>)
 80068de:	f004 020f 	and.w	r2, r4, #15
 80068e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ee:	f7f9 fe83 	bl	80005f8 <__aeabi_dmul>
 80068f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f6:	1124      	asrs	r4, r4, #4
 80068f8:	2300      	movs	r3, #0
 80068fa:	2602      	movs	r6, #2
 80068fc:	2c00      	cmp	r4, #0
 80068fe:	f040 80b2 	bne.w	8006a66 <_dtoa_r+0x4fe>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1d3      	bne.n	80068ae <_dtoa_r+0x346>
 8006906:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006908:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80b7 	beq.w	8006a80 <_dtoa_r+0x518>
 8006912:	4b86      	ldr	r3, [pc, #536]	@ (8006b2c <_dtoa_r+0x5c4>)
 8006914:	2200      	movs	r2, #0
 8006916:	4620      	mov	r0, r4
 8006918:	4629      	mov	r1, r5
 800691a:	f7fa f8df 	bl	8000adc <__aeabi_dcmplt>
 800691e:	2800      	cmp	r0, #0
 8006920:	f000 80ae 	beq.w	8006a80 <_dtoa_r+0x518>
 8006924:	9b07      	ldr	r3, [sp, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 80aa 	beq.w	8006a80 <_dtoa_r+0x518>
 800692c:	9b00      	ldr	r3, [sp, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	dd37      	ble.n	80069a2 <_dtoa_r+0x43a>
 8006932:	1e7b      	subs	r3, r7, #1
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	4620      	mov	r0, r4
 8006938:	4b7d      	ldr	r3, [pc, #500]	@ (8006b30 <_dtoa_r+0x5c8>)
 800693a:	2200      	movs	r2, #0
 800693c:	4629      	mov	r1, r5
 800693e:	f7f9 fe5b 	bl	80005f8 <__aeabi_dmul>
 8006942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006946:	9c00      	ldr	r4, [sp, #0]
 8006948:	3601      	adds	r6, #1
 800694a:	4630      	mov	r0, r6
 800694c:	f7f9 fdea 	bl	8000524 <__aeabi_i2d>
 8006950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006954:	f7f9 fe50 	bl	80005f8 <__aeabi_dmul>
 8006958:	4b76      	ldr	r3, [pc, #472]	@ (8006b34 <_dtoa_r+0x5cc>)
 800695a:	2200      	movs	r2, #0
 800695c:	f7f9 fc96 	bl	800028c <__adddf3>
 8006960:	4605      	mov	r5, r0
 8006962:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006966:	2c00      	cmp	r4, #0
 8006968:	f040 808d 	bne.w	8006a86 <_dtoa_r+0x51e>
 800696c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006970:	4b71      	ldr	r3, [pc, #452]	@ (8006b38 <_dtoa_r+0x5d0>)
 8006972:	2200      	movs	r2, #0
 8006974:	f7f9 fc88 	bl	8000288 <__aeabi_dsub>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006980:	462a      	mov	r2, r5
 8006982:	4633      	mov	r3, r6
 8006984:	f7fa f8c8 	bl	8000b18 <__aeabi_dcmpgt>
 8006988:	2800      	cmp	r0, #0
 800698a:	f040 828b 	bne.w	8006ea4 <_dtoa_r+0x93c>
 800698e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006992:	462a      	mov	r2, r5
 8006994:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006998:	f7fa f8a0 	bl	8000adc <__aeabi_dcmplt>
 800699c:	2800      	cmp	r0, #0
 800699e:	f040 8128 	bne.w	8006bf2 <_dtoa_r+0x68a>
 80069a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80069a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80069aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f2c0 815a 	blt.w	8006c66 <_dtoa_r+0x6fe>
 80069b2:	2f0e      	cmp	r7, #14
 80069b4:	f300 8157 	bgt.w	8006c66 <_dtoa_r+0x6fe>
 80069b8:	4b5a      	ldr	r3, [pc, #360]	@ (8006b24 <_dtoa_r+0x5bc>)
 80069ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069be:	ed93 7b00 	vldr	d7, [r3]
 80069c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	ed8d 7b00 	vstr	d7, [sp]
 80069ca:	da03      	bge.n	80069d4 <_dtoa_r+0x46c>
 80069cc:	9b07      	ldr	r3, [sp, #28]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f340 8101 	ble.w	8006bd6 <_dtoa_r+0x66e>
 80069d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80069d8:	4656      	mov	r6, sl
 80069da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069de:	4620      	mov	r0, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	f7f9 ff33 	bl	800084c <__aeabi_ddiv>
 80069e6:	f7fa f8b7 	bl	8000b58 <__aeabi_d2iz>
 80069ea:	4680      	mov	r8, r0
 80069ec:	f7f9 fd9a 	bl	8000524 <__aeabi_i2d>
 80069f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069f4:	f7f9 fe00 	bl	80005f8 <__aeabi_dmul>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4620      	mov	r0, r4
 80069fe:	4629      	mov	r1, r5
 8006a00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006a04:	f7f9 fc40 	bl	8000288 <__aeabi_dsub>
 8006a08:	f806 4b01 	strb.w	r4, [r6], #1
 8006a0c:	9d07      	ldr	r5, [sp, #28]
 8006a0e:	eba6 040a 	sub.w	r4, r6, sl
 8006a12:	42a5      	cmp	r5, r4
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	f040 8117 	bne.w	8006c4a <_dtoa_r+0x6e2>
 8006a1c:	f7f9 fc36 	bl	800028c <__adddf3>
 8006a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a24:	4604      	mov	r4, r0
 8006a26:	460d      	mov	r5, r1
 8006a28:	f7fa f876 	bl	8000b18 <__aeabi_dcmpgt>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f040 80f9 	bne.w	8006c24 <_dtoa_r+0x6bc>
 8006a32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7fa f845 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a3e:	b118      	cbz	r0, 8006a48 <_dtoa_r+0x4e0>
 8006a40:	f018 0f01 	tst.w	r8, #1
 8006a44:	f040 80ee 	bne.w	8006c24 <_dtoa_r+0x6bc>
 8006a48:	4649      	mov	r1, r9
 8006a4a:	4658      	mov	r0, fp
 8006a4c:	f000 fc90 	bl	8007370 <_Bfree>
 8006a50:	2300      	movs	r3, #0
 8006a52:	7033      	strb	r3, [r6, #0]
 8006a54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a56:	3701      	adds	r7, #1
 8006a58:	601f      	str	r7, [r3, #0]
 8006a5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 831d 	beq.w	800709c <_dtoa_r+0xb34>
 8006a62:	601e      	str	r6, [r3, #0]
 8006a64:	e31a      	b.n	800709c <_dtoa_r+0xb34>
 8006a66:	07e2      	lsls	r2, r4, #31
 8006a68:	d505      	bpl.n	8006a76 <_dtoa_r+0x50e>
 8006a6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a6e:	f7f9 fdc3 	bl	80005f8 <__aeabi_dmul>
 8006a72:	3601      	adds	r6, #1
 8006a74:	2301      	movs	r3, #1
 8006a76:	1064      	asrs	r4, r4, #1
 8006a78:	3508      	adds	r5, #8
 8006a7a:	e73f      	b.n	80068fc <_dtoa_r+0x394>
 8006a7c:	2602      	movs	r6, #2
 8006a7e:	e742      	b.n	8006906 <_dtoa_r+0x39e>
 8006a80:	9c07      	ldr	r4, [sp, #28]
 8006a82:	9704      	str	r7, [sp, #16]
 8006a84:	e761      	b.n	800694a <_dtoa_r+0x3e2>
 8006a86:	4b27      	ldr	r3, [pc, #156]	@ (8006b24 <_dtoa_r+0x5bc>)
 8006a88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a92:	4454      	add	r4, sl
 8006a94:	2900      	cmp	r1, #0
 8006a96:	d053      	beq.n	8006b40 <_dtoa_r+0x5d8>
 8006a98:	4928      	ldr	r1, [pc, #160]	@ (8006b3c <_dtoa_r+0x5d4>)
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	f7f9 fed6 	bl	800084c <__aeabi_ddiv>
 8006aa0:	4633      	mov	r3, r6
 8006aa2:	462a      	mov	r2, r5
 8006aa4:	f7f9 fbf0 	bl	8000288 <__aeabi_dsub>
 8006aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006aac:	4656      	mov	r6, sl
 8006aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab2:	f7fa f851 	bl	8000b58 <__aeabi_d2iz>
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	f7f9 fd34 	bl	8000524 <__aeabi_i2d>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac4:	f7f9 fbe0 	bl	8000288 <__aeabi_dsub>
 8006ac8:	3530      	adds	r5, #48	@ 0x30
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ad2:	f806 5b01 	strb.w	r5, [r6], #1
 8006ad6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ada:	f7f9 ffff 	bl	8000adc <__aeabi_dcmplt>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d171      	bne.n	8006bc6 <_dtoa_r+0x65e>
 8006ae2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ae6:	4911      	ldr	r1, [pc, #68]	@ (8006b2c <_dtoa_r+0x5c4>)
 8006ae8:	2000      	movs	r0, #0
 8006aea:	f7f9 fbcd 	bl	8000288 <__aeabi_dsub>
 8006aee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006af2:	f7f9 fff3 	bl	8000adc <__aeabi_dcmplt>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f040 8095 	bne.w	8006c26 <_dtoa_r+0x6be>
 8006afc:	42a6      	cmp	r6, r4
 8006afe:	f43f af50 	beq.w	80069a2 <_dtoa_r+0x43a>
 8006b02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b06:	4b0a      	ldr	r3, [pc, #40]	@ (8006b30 <_dtoa_r+0x5c8>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f7f9 fd75 	bl	80005f8 <__aeabi_dmul>
 8006b0e:	4b08      	ldr	r3, [pc, #32]	@ (8006b30 <_dtoa_r+0x5c8>)
 8006b10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b14:	2200      	movs	r2, #0
 8006b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b1a:	f7f9 fd6d 	bl	80005f8 <__aeabi_dmul>
 8006b1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b22:	e7c4      	b.n	8006aae <_dtoa_r+0x546>
 8006b24:	080086c0 	.word	0x080086c0
 8006b28:	08008698 	.word	0x08008698
 8006b2c:	3ff00000 	.word	0x3ff00000
 8006b30:	40240000 	.word	0x40240000
 8006b34:	401c0000 	.word	0x401c0000
 8006b38:	40140000 	.word	0x40140000
 8006b3c:	3fe00000 	.word	0x3fe00000
 8006b40:	4631      	mov	r1, r6
 8006b42:	4628      	mov	r0, r5
 8006b44:	f7f9 fd58 	bl	80005f8 <__aeabi_dmul>
 8006b48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006b4e:	4656      	mov	r6, sl
 8006b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b54:	f7fa f800 	bl	8000b58 <__aeabi_d2iz>
 8006b58:	4605      	mov	r5, r0
 8006b5a:	f7f9 fce3 	bl	8000524 <__aeabi_i2d>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b66:	f7f9 fb8f 	bl	8000288 <__aeabi_dsub>
 8006b6a:	3530      	adds	r5, #48	@ 0x30
 8006b6c:	f806 5b01 	strb.w	r5, [r6], #1
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	42a6      	cmp	r6, r4
 8006b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b7a:	f04f 0200 	mov.w	r2, #0
 8006b7e:	d124      	bne.n	8006bca <_dtoa_r+0x662>
 8006b80:	4bac      	ldr	r3, [pc, #688]	@ (8006e34 <_dtoa_r+0x8cc>)
 8006b82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b86:	f7f9 fb81 	bl	800028c <__adddf3>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b92:	f7f9 ffc1 	bl	8000b18 <__aeabi_dcmpgt>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	d145      	bne.n	8006c26 <_dtoa_r+0x6be>
 8006b9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b9e:	49a5      	ldr	r1, [pc, #660]	@ (8006e34 <_dtoa_r+0x8cc>)
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f7f9 fb71 	bl	8000288 <__aeabi_dsub>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bae:	f7f9 ff95 	bl	8000adc <__aeabi_dcmplt>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f43f aef5 	beq.w	80069a2 <_dtoa_r+0x43a>
 8006bb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006bba:	1e73      	subs	r3, r6, #1
 8006bbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006bbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bc2:	2b30      	cmp	r3, #48	@ 0x30
 8006bc4:	d0f8      	beq.n	8006bb8 <_dtoa_r+0x650>
 8006bc6:	9f04      	ldr	r7, [sp, #16]
 8006bc8:	e73e      	b.n	8006a48 <_dtoa_r+0x4e0>
 8006bca:	4b9b      	ldr	r3, [pc, #620]	@ (8006e38 <_dtoa_r+0x8d0>)
 8006bcc:	f7f9 fd14 	bl	80005f8 <__aeabi_dmul>
 8006bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bd4:	e7bc      	b.n	8006b50 <_dtoa_r+0x5e8>
 8006bd6:	d10c      	bne.n	8006bf2 <_dtoa_r+0x68a>
 8006bd8:	4b98      	ldr	r3, [pc, #608]	@ (8006e3c <_dtoa_r+0x8d4>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006be0:	f7f9 fd0a 	bl	80005f8 <__aeabi_dmul>
 8006be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006be8:	f7f9 ff8c 	bl	8000b04 <__aeabi_dcmpge>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	f000 8157 	beq.w	8006ea0 <_dtoa_r+0x938>
 8006bf2:	2400      	movs	r4, #0
 8006bf4:	4625      	mov	r5, r4
 8006bf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	4656      	mov	r6, sl
 8006bfe:	2700      	movs	r7, #0
 8006c00:	4621      	mov	r1, r4
 8006c02:	4658      	mov	r0, fp
 8006c04:	f000 fbb4 	bl	8007370 <_Bfree>
 8006c08:	2d00      	cmp	r5, #0
 8006c0a:	d0dc      	beq.n	8006bc6 <_dtoa_r+0x65e>
 8006c0c:	b12f      	cbz	r7, 8006c1a <_dtoa_r+0x6b2>
 8006c0e:	42af      	cmp	r7, r5
 8006c10:	d003      	beq.n	8006c1a <_dtoa_r+0x6b2>
 8006c12:	4639      	mov	r1, r7
 8006c14:	4658      	mov	r0, fp
 8006c16:	f000 fbab 	bl	8007370 <_Bfree>
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4658      	mov	r0, fp
 8006c1e:	f000 fba7 	bl	8007370 <_Bfree>
 8006c22:	e7d0      	b.n	8006bc6 <_dtoa_r+0x65e>
 8006c24:	9704      	str	r7, [sp, #16]
 8006c26:	4633      	mov	r3, r6
 8006c28:	461e      	mov	r6, r3
 8006c2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c2e:	2a39      	cmp	r2, #57	@ 0x39
 8006c30:	d107      	bne.n	8006c42 <_dtoa_r+0x6da>
 8006c32:	459a      	cmp	sl, r3
 8006c34:	d1f8      	bne.n	8006c28 <_dtoa_r+0x6c0>
 8006c36:	9a04      	ldr	r2, [sp, #16]
 8006c38:	3201      	adds	r2, #1
 8006c3a:	9204      	str	r2, [sp, #16]
 8006c3c:	2230      	movs	r2, #48	@ 0x30
 8006c3e:	f88a 2000 	strb.w	r2, [sl]
 8006c42:	781a      	ldrb	r2, [r3, #0]
 8006c44:	3201      	adds	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e7bd      	b.n	8006bc6 <_dtoa_r+0x65e>
 8006c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8006e38 <_dtoa_r+0x8d0>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f7f9 fcd3 	bl	80005f8 <__aeabi_dmul>
 8006c52:	2200      	movs	r2, #0
 8006c54:	2300      	movs	r3, #0
 8006c56:	4604      	mov	r4, r0
 8006c58:	460d      	mov	r5, r1
 8006c5a:	f7f9 ff35 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	f43f aebb 	beq.w	80069da <_dtoa_r+0x472>
 8006c64:	e6f0      	b.n	8006a48 <_dtoa_r+0x4e0>
 8006c66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	f000 80db 	beq.w	8006e24 <_dtoa_r+0x8bc>
 8006c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c70:	2a01      	cmp	r2, #1
 8006c72:	f300 80bf 	bgt.w	8006df4 <_dtoa_r+0x88c>
 8006c76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c78:	2a00      	cmp	r2, #0
 8006c7a:	f000 80b7 	beq.w	8006dec <_dtoa_r+0x884>
 8006c7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c84:	4646      	mov	r6, r8
 8006c86:	9a08      	ldr	r2, [sp, #32]
 8006c88:	2101      	movs	r1, #1
 8006c8a:	441a      	add	r2, r3
 8006c8c:	4658      	mov	r0, fp
 8006c8e:	4498      	add	r8, r3
 8006c90:	9208      	str	r2, [sp, #32]
 8006c92:	f000 fc21 	bl	80074d8 <__i2b>
 8006c96:	4605      	mov	r5, r0
 8006c98:	b15e      	cbz	r6, 8006cb2 <_dtoa_r+0x74a>
 8006c9a:	9b08      	ldr	r3, [sp, #32]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	dd08      	ble.n	8006cb2 <_dtoa_r+0x74a>
 8006ca0:	42b3      	cmp	r3, r6
 8006ca2:	9a08      	ldr	r2, [sp, #32]
 8006ca4:	bfa8      	it	ge
 8006ca6:	4633      	movge	r3, r6
 8006ca8:	eba8 0803 	sub.w	r8, r8, r3
 8006cac:	1af6      	subs	r6, r6, r3
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	9308      	str	r3, [sp, #32]
 8006cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cb4:	b1f3      	cbz	r3, 8006cf4 <_dtoa_r+0x78c>
 8006cb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80b7 	beq.w	8006e2c <_dtoa_r+0x8c4>
 8006cbe:	b18c      	cbz	r4, 8006ce4 <_dtoa_r+0x77c>
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	4658      	mov	r0, fp
 8006cc6:	f000 fcc7 	bl	8007658 <__pow5mult>
 8006cca:	464a      	mov	r2, r9
 8006ccc:	4601      	mov	r1, r0
 8006cce:	4605      	mov	r5, r0
 8006cd0:	4658      	mov	r0, fp
 8006cd2:	f000 fc17 	bl	8007504 <__multiply>
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	9004      	str	r0, [sp, #16]
 8006cda:	4658      	mov	r0, fp
 8006cdc:	f000 fb48 	bl	8007370 <_Bfree>
 8006ce0:	9b04      	ldr	r3, [sp, #16]
 8006ce2:	4699      	mov	r9, r3
 8006ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ce6:	1b1a      	subs	r2, r3, r4
 8006ce8:	d004      	beq.n	8006cf4 <_dtoa_r+0x78c>
 8006cea:	4649      	mov	r1, r9
 8006cec:	4658      	mov	r0, fp
 8006cee:	f000 fcb3 	bl	8007658 <__pow5mult>
 8006cf2:	4681      	mov	r9, r0
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	4658      	mov	r0, fp
 8006cf8:	f000 fbee 	bl	80074d8 <__i2b>
 8006cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cfe:	4604      	mov	r4, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 81cf 	beq.w	80070a4 <_dtoa_r+0xb3c>
 8006d06:	461a      	mov	r2, r3
 8006d08:	4601      	mov	r1, r0
 8006d0a:	4658      	mov	r0, fp
 8006d0c:	f000 fca4 	bl	8007658 <__pow5mult>
 8006d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	4604      	mov	r4, r0
 8006d16:	f300 8095 	bgt.w	8006e44 <_dtoa_r+0x8dc>
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f040 8087 	bne.w	8006e30 <_dtoa_r+0x8c8>
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f040 8089 	bne.w	8006e40 <_dtoa_r+0x8d8>
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d34:	0d1b      	lsrs	r3, r3, #20
 8006d36:	051b      	lsls	r3, r3, #20
 8006d38:	b12b      	cbz	r3, 8006d46 <_dtoa_r+0x7de>
 8006d3a:	9b08      	ldr	r3, [sp, #32]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	9308      	str	r3, [sp, #32]
 8006d40:	f108 0801 	add.w	r8, r8, #1
 8006d44:	2301      	movs	r3, #1
 8006d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 81b0 	beq.w	80070b0 <_dtoa_r+0xb48>
 8006d50:	6923      	ldr	r3, [r4, #16]
 8006d52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d56:	6918      	ldr	r0, [r3, #16]
 8006d58:	f000 fb72 	bl	8007440 <__hi0bits>
 8006d5c:	f1c0 0020 	rsb	r0, r0, #32
 8006d60:	9b08      	ldr	r3, [sp, #32]
 8006d62:	4418      	add	r0, r3
 8006d64:	f010 001f 	ands.w	r0, r0, #31
 8006d68:	d077      	beq.n	8006e5a <_dtoa_r+0x8f2>
 8006d6a:	f1c0 0320 	rsb	r3, r0, #32
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	dd6b      	ble.n	8006e4a <_dtoa_r+0x8e2>
 8006d72:	9b08      	ldr	r3, [sp, #32]
 8006d74:	f1c0 001c 	rsb	r0, r0, #28
 8006d78:	4403      	add	r3, r0
 8006d7a:	4480      	add	r8, r0
 8006d7c:	4406      	add	r6, r0
 8006d7e:	9308      	str	r3, [sp, #32]
 8006d80:	f1b8 0f00 	cmp.w	r8, #0
 8006d84:	dd05      	ble.n	8006d92 <_dtoa_r+0x82a>
 8006d86:	4649      	mov	r1, r9
 8006d88:	4642      	mov	r2, r8
 8006d8a:	4658      	mov	r0, fp
 8006d8c:	f000 fcbe 	bl	800770c <__lshift>
 8006d90:	4681      	mov	r9, r0
 8006d92:	9b08      	ldr	r3, [sp, #32]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dd05      	ble.n	8006da4 <_dtoa_r+0x83c>
 8006d98:	4621      	mov	r1, r4
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4658      	mov	r0, fp
 8006d9e:	f000 fcb5 	bl	800770c <__lshift>
 8006da2:	4604      	mov	r4, r0
 8006da4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d059      	beq.n	8006e5e <_dtoa_r+0x8f6>
 8006daa:	4621      	mov	r1, r4
 8006dac:	4648      	mov	r0, r9
 8006dae:	f000 fd19 	bl	80077e4 <__mcmp>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	da53      	bge.n	8006e5e <_dtoa_r+0x8f6>
 8006db6:	1e7b      	subs	r3, r7, #1
 8006db8:	9304      	str	r3, [sp, #16]
 8006dba:	4649      	mov	r1, r9
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	220a      	movs	r2, #10
 8006dc0:	4658      	mov	r0, fp
 8006dc2:	f000 faf7 	bl	80073b4 <__multadd>
 8006dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dc8:	4681      	mov	r9, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8172 	beq.w	80070b4 <_dtoa_r+0xb4c>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	220a      	movs	r2, #10
 8006dd6:	4658      	mov	r0, fp
 8006dd8:	f000 faec 	bl	80073b4 <__multadd>
 8006ddc:	9b00      	ldr	r3, [sp, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	4605      	mov	r5, r0
 8006de2:	dc67      	bgt.n	8006eb4 <_dtoa_r+0x94c>
 8006de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	dc41      	bgt.n	8006e6e <_dtoa_r+0x906>
 8006dea:	e063      	b.n	8006eb4 <_dtoa_r+0x94c>
 8006dec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006dee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006df2:	e746      	b.n	8006c82 <_dtoa_r+0x71a>
 8006df4:	9b07      	ldr	r3, [sp, #28]
 8006df6:	1e5c      	subs	r4, r3, #1
 8006df8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dfa:	42a3      	cmp	r3, r4
 8006dfc:	bfbf      	itttt	lt
 8006dfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006e00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006e02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006e04:	1ae3      	sublt	r3, r4, r3
 8006e06:	bfb4      	ite	lt
 8006e08:	18d2      	addlt	r2, r2, r3
 8006e0a:	1b1c      	subge	r4, r3, r4
 8006e0c:	9b07      	ldr	r3, [sp, #28]
 8006e0e:	bfbc      	itt	lt
 8006e10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006e12:	2400      	movlt	r4, #0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bfb5      	itete	lt
 8006e18:	eba8 0603 	sublt.w	r6, r8, r3
 8006e1c:	9b07      	ldrge	r3, [sp, #28]
 8006e1e:	2300      	movlt	r3, #0
 8006e20:	4646      	movge	r6, r8
 8006e22:	e730      	b.n	8006c86 <_dtoa_r+0x71e>
 8006e24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006e28:	4646      	mov	r6, r8
 8006e2a:	e735      	b.n	8006c98 <_dtoa_r+0x730>
 8006e2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e2e:	e75c      	b.n	8006cea <_dtoa_r+0x782>
 8006e30:	2300      	movs	r3, #0
 8006e32:	e788      	b.n	8006d46 <_dtoa_r+0x7de>
 8006e34:	3fe00000 	.word	0x3fe00000
 8006e38:	40240000 	.word	0x40240000
 8006e3c:	40140000 	.word	0x40140000
 8006e40:	9b02      	ldr	r3, [sp, #8]
 8006e42:	e780      	b.n	8006d46 <_dtoa_r+0x7de>
 8006e44:	2300      	movs	r3, #0
 8006e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e48:	e782      	b.n	8006d50 <_dtoa_r+0x7e8>
 8006e4a:	d099      	beq.n	8006d80 <_dtoa_r+0x818>
 8006e4c:	9a08      	ldr	r2, [sp, #32]
 8006e4e:	331c      	adds	r3, #28
 8006e50:	441a      	add	r2, r3
 8006e52:	4498      	add	r8, r3
 8006e54:	441e      	add	r6, r3
 8006e56:	9208      	str	r2, [sp, #32]
 8006e58:	e792      	b.n	8006d80 <_dtoa_r+0x818>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	e7f6      	b.n	8006e4c <_dtoa_r+0x8e4>
 8006e5e:	9b07      	ldr	r3, [sp, #28]
 8006e60:	9704      	str	r7, [sp, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dc20      	bgt.n	8006ea8 <_dtoa_r+0x940>
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	dd1e      	ble.n	8006eac <_dtoa_r+0x944>
 8006e6e:	9b00      	ldr	r3, [sp, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f47f aec0 	bne.w	8006bf6 <_dtoa_r+0x68e>
 8006e76:	4621      	mov	r1, r4
 8006e78:	2205      	movs	r2, #5
 8006e7a:	4658      	mov	r0, fp
 8006e7c:	f000 fa9a 	bl	80073b4 <__multadd>
 8006e80:	4601      	mov	r1, r0
 8006e82:	4604      	mov	r4, r0
 8006e84:	4648      	mov	r0, r9
 8006e86:	f000 fcad 	bl	80077e4 <__mcmp>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	f77f aeb3 	ble.w	8006bf6 <_dtoa_r+0x68e>
 8006e90:	4656      	mov	r6, sl
 8006e92:	2331      	movs	r3, #49	@ 0x31
 8006e94:	f806 3b01 	strb.w	r3, [r6], #1
 8006e98:	9b04      	ldr	r3, [sp, #16]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	e6ae      	b.n	8006bfe <_dtoa_r+0x696>
 8006ea0:	9c07      	ldr	r4, [sp, #28]
 8006ea2:	9704      	str	r7, [sp, #16]
 8006ea4:	4625      	mov	r5, r4
 8006ea6:	e7f3      	b.n	8006e90 <_dtoa_r+0x928>
 8006ea8:	9b07      	ldr	r3, [sp, #28]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8104 	beq.w	80070bc <_dtoa_r+0xb54>
 8006eb4:	2e00      	cmp	r6, #0
 8006eb6:	dd05      	ble.n	8006ec4 <_dtoa_r+0x95c>
 8006eb8:	4629      	mov	r1, r5
 8006eba:	4632      	mov	r2, r6
 8006ebc:	4658      	mov	r0, fp
 8006ebe:	f000 fc25 	bl	800770c <__lshift>
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d05a      	beq.n	8006f80 <_dtoa_r+0xa18>
 8006eca:	6869      	ldr	r1, [r5, #4]
 8006ecc:	4658      	mov	r0, fp
 8006ece:	f000 fa0f 	bl	80072f0 <_Balloc>
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	b928      	cbnz	r0, 8006ee2 <_dtoa_r+0x97a>
 8006ed6:	4b84      	ldr	r3, [pc, #528]	@ (80070e8 <_dtoa_r+0xb80>)
 8006ed8:	4602      	mov	r2, r0
 8006eda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ede:	f7ff bb5a 	b.w	8006596 <_dtoa_r+0x2e>
 8006ee2:	692a      	ldr	r2, [r5, #16]
 8006ee4:	3202      	adds	r2, #2
 8006ee6:	0092      	lsls	r2, r2, #2
 8006ee8:	f105 010c 	add.w	r1, r5, #12
 8006eec:	300c      	adds	r0, #12
 8006eee:	f000 ffaf 	bl	8007e50 <memcpy>
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4658      	mov	r0, fp
 8006ef8:	f000 fc08 	bl	800770c <__lshift>
 8006efc:	f10a 0301 	add.w	r3, sl, #1
 8006f00:	9307      	str	r3, [sp, #28]
 8006f02:	9b00      	ldr	r3, [sp, #0]
 8006f04:	4453      	add	r3, sl
 8006f06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	462f      	mov	r7, r5
 8006f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f12:	4605      	mov	r5, r0
 8006f14:	9b07      	ldr	r3, [sp, #28]
 8006f16:	4621      	mov	r1, r4
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	4648      	mov	r0, r9
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	f7ff fa9a 	bl	8006456 <quorem>
 8006f22:	4639      	mov	r1, r7
 8006f24:	9002      	str	r0, [sp, #8]
 8006f26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f2a:	4648      	mov	r0, r9
 8006f2c:	f000 fc5a 	bl	80077e4 <__mcmp>
 8006f30:	462a      	mov	r2, r5
 8006f32:	9008      	str	r0, [sp, #32]
 8006f34:	4621      	mov	r1, r4
 8006f36:	4658      	mov	r0, fp
 8006f38:	f000 fc70 	bl	800781c <__mdiff>
 8006f3c:	68c2      	ldr	r2, [r0, #12]
 8006f3e:	4606      	mov	r6, r0
 8006f40:	bb02      	cbnz	r2, 8006f84 <_dtoa_r+0xa1c>
 8006f42:	4601      	mov	r1, r0
 8006f44:	4648      	mov	r0, r9
 8006f46:	f000 fc4d 	bl	80077e4 <__mcmp>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4658      	mov	r0, fp
 8006f50:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f52:	f000 fa0d 	bl	8007370 <_Bfree>
 8006f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f5a:	9e07      	ldr	r6, [sp, #28]
 8006f5c:	ea43 0102 	orr.w	r1, r3, r2
 8006f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f62:	4319      	orrs	r1, r3
 8006f64:	d110      	bne.n	8006f88 <_dtoa_r+0xa20>
 8006f66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f6a:	d029      	beq.n	8006fc0 <_dtoa_r+0xa58>
 8006f6c:	9b08      	ldr	r3, [sp, #32]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dd02      	ble.n	8006f78 <_dtoa_r+0xa10>
 8006f72:	9b02      	ldr	r3, [sp, #8]
 8006f74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f78:	9b00      	ldr	r3, [sp, #0]
 8006f7a:	f883 8000 	strb.w	r8, [r3]
 8006f7e:	e63f      	b.n	8006c00 <_dtoa_r+0x698>
 8006f80:	4628      	mov	r0, r5
 8006f82:	e7bb      	b.n	8006efc <_dtoa_r+0x994>
 8006f84:	2201      	movs	r2, #1
 8006f86:	e7e1      	b.n	8006f4c <_dtoa_r+0x9e4>
 8006f88:	9b08      	ldr	r3, [sp, #32]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	db04      	blt.n	8006f98 <_dtoa_r+0xa30>
 8006f8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f90:	430b      	orrs	r3, r1
 8006f92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f94:	430b      	orrs	r3, r1
 8006f96:	d120      	bne.n	8006fda <_dtoa_r+0xa72>
 8006f98:	2a00      	cmp	r2, #0
 8006f9a:	dded      	ble.n	8006f78 <_dtoa_r+0xa10>
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	4658      	mov	r0, fp
 8006fa2:	f000 fbb3 	bl	800770c <__lshift>
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4681      	mov	r9, r0
 8006faa:	f000 fc1b 	bl	80077e4 <__mcmp>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	dc03      	bgt.n	8006fba <_dtoa_r+0xa52>
 8006fb2:	d1e1      	bne.n	8006f78 <_dtoa_r+0xa10>
 8006fb4:	f018 0f01 	tst.w	r8, #1
 8006fb8:	d0de      	beq.n	8006f78 <_dtoa_r+0xa10>
 8006fba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006fbe:	d1d8      	bne.n	8006f72 <_dtoa_r+0xa0a>
 8006fc0:	9a00      	ldr	r2, [sp, #0]
 8006fc2:	2339      	movs	r3, #57	@ 0x39
 8006fc4:	7013      	strb	r3, [r2, #0]
 8006fc6:	4633      	mov	r3, r6
 8006fc8:	461e      	mov	r6, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006fd0:	2a39      	cmp	r2, #57	@ 0x39
 8006fd2:	d052      	beq.n	800707a <_dtoa_r+0xb12>
 8006fd4:	3201      	adds	r2, #1
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e612      	b.n	8006c00 <_dtoa_r+0x698>
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	dd07      	ble.n	8006fee <_dtoa_r+0xa86>
 8006fde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006fe2:	d0ed      	beq.n	8006fc0 <_dtoa_r+0xa58>
 8006fe4:	9a00      	ldr	r2, [sp, #0]
 8006fe6:	f108 0301 	add.w	r3, r8, #1
 8006fea:	7013      	strb	r3, [r2, #0]
 8006fec:	e608      	b.n	8006c00 <_dtoa_r+0x698>
 8006fee:	9b07      	ldr	r3, [sp, #28]
 8006ff0:	9a07      	ldr	r2, [sp, #28]
 8006ff2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d028      	beq.n	800704e <_dtoa_r+0xae6>
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	2300      	movs	r3, #0
 8007000:	220a      	movs	r2, #10
 8007002:	4658      	mov	r0, fp
 8007004:	f000 f9d6 	bl	80073b4 <__multadd>
 8007008:	42af      	cmp	r7, r5
 800700a:	4681      	mov	r9, r0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	f04f 020a 	mov.w	r2, #10
 8007014:	4639      	mov	r1, r7
 8007016:	4658      	mov	r0, fp
 8007018:	d107      	bne.n	800702a <_dtoa_r+0xac2>
 800701a:	f000 f9cb 	bl	80073b4 <__multadd>
 800701e:	4607      	mov	r7, r0
 8007020:	4605      	mov	r5, r0
 8007022:	9b07      	ldr	r3, [sp, #28]
 8007024:	3301      	adds	r3, #1
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	e774      	b.n	8006f14 <_dtoa_r+0x9ac>
 800702a:	f000 f9c3 	bl	80073b4 <__multadd>
 800702e:	4629      	mov	r1, r5
 8007030:	4607      	mov	r7, r0
 8007032:	2300      	movs	r3, #0
 8007034:	220a      	movs	r2, #10
 8007036:	4658      	mov	r0, fp
 8007038:	f000 f9bc 	bl	80073b4 <__multadd>
 800703c:	4605      	mov	r5, r0
 800703e:	e7f0      	b.n	8007022 <_dtoa_r+0xaba>
 8007040:	9b00      	ldr	r3, [sp, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	bfcc      	ite	gt
 8007046:	461e      	movgt	r6, r3
 8007048:	2601      	movle	r6, #1
 800704a:	4456      	add	r6, sl
 800704c:	2700      	movs	r7, #0
 800704e:	4649      	mov	r1, r9
 8007050:	2201      	movs	r2, #1
 8007052:	4658      	mov	r0, fp
 8007054:	f000 fb5a 	bl	800770c <__lshift>
 8007058:	4621      	mov	r1, r4
 800705a:	4681      	mov	r9, r0
 800705c:	f000 fbc2 	bl	80077e4 <__mcmp>
 8007060:	2800      	cmp	r0, #0
 8007062:	dcb0      	bgt.n	8006fc6 <_dtoa_r+0xa5e>
 8007064:	d102      	bne.n	800706c <_dtoa_r+0xb04>
 8007066:	f018 0f01 	tst.w	r8, #1
 800706a:	d1ac      	bne.n	8006fc6 <_dtoa_r+0xa5e>
 800706c:	4633      	mov	r3, r6
 800706e:	461e      	mov	r6, r3
 8007070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007074:	2a30      	cmp	r2, #48	@ 0x30
 8007076:	d0fa      	beq.n	800706e <_dtoa_r+0xb06>
 8007078:	e5c2      	b.n	8006c00 <_dtoa_r+0x698>
 800707a:	459a      	cmp	sl, r3
 800707c:	d1a4      	bne.n	8006fc8 <_dtoa_r+0xa60>
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	3301      	adds	r3, #1
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	2331      	movs	r3, #49	@ 0x31
 8007086:	f88a 3000 	strb.w	r3, [sl]
 800708a:	e5b9      	b.n	8006c00 <_dtoa_r+0x698>
 800708c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800708e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80070ec <_dtoa_r+0xb84>
 8007092:	b11b      	cbz	r3, 800709c <_dtoa_r+0xb34>
 8007094:	f10a 0308 	add.w	r3, sl, #8
 8007098:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	4650      	mov	r0, sl
 800709e:	b019      	add	sp, #100	@ 0x64
 80070a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	f77f ae37 	ble.w	8006d1a <_dtoa_r+0x7b2>
 80070ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80070b0:	2001      	movs	r0, #1
 80070b2:	e655      	b.n	8006d60 <_dtoa_r+0x7f8>
 80070b4:	9b00      	ldr	r3, [sp, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f77f aed6 	ble.w	8006e68 <_dtoa_r+0x900>
 80070bc:	4656      	mov	r6, sl
 80070be:	4621      	mov	r1, r4
 80070c0:	4648      	mov	r0, r9
 80070c2:	f7ff f9c8 	bl	8006456 <quorem>
 80070c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80070ca:	f806 8b01 	strb.w	r8, [r6], #1
 80070ce:	9b00      	ldr	r3, [sp, #0]
 80070d0:	eba6 020a 	sub.w	r2, r6, sl
 80070d4:	4293      	cmp	r3, r2
 80070d6:	ddb3      	ble.n	8007040 <_dtoa_r+0xad8>
 80070d8:	4649      	mov	r1, r9
 80070da:	2300      	movs	r3, #0
 80070dc:	220a      	movs	r2, #10
 80070de:	4658      	mov	r0, fp
 80070e0:	f000 f968 	bl	80073b4 <__multadd>
 80070e4:	4681      	mov	r9, r0
 80070e6:	e7ea      	b.n	80070be <_dtoa_r+0xb56>
 80070e8:	08008620 	.word	0x08008620
 80070ec:	080085a4 	.word	0x080085a4

080070f0 <_free_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4605      	mov	r5, r0
 80070f4:	2900      	cmp	r1, #0
 80070f6:	d041      	beq.n	800717c <_free_r+0x8c>
 80070f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fc:	1f0c      	subs	r4, r1, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfb8      	it	lt
 8007102:	18e4      	addlt	r4, r4, r3
 8007104:	f000 f8e8 	bl	80072d8 <__malloc_lock>
 8007108:	4a1d      	ldr	r2, [pc, #116]	@ (8007180 <_free_r+0x90>)
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	b933      	cbnz	r3, 800711c <_free_r+0x2c>
 800710e:	6063      	str	r3, [r4, #4]
 8007110:	6014      	str	r4, [r2, #0]
 8007112:	4628      	mov	r0, r5
 8007114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007118:	f000 b8e4 	b.w	80072e4 <__malloc_unlock>
 800711c:	42a3      	cmp	r3, r4
 800711e:	d908      	bls.n	8007132 <_free_r+0x42>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	1821      	adds	r1, r4, r0
 8007124:	428b      	cmp	r3, r1
 8007126:	bf01      	itttt	eq
 8007128:	6819      	ldreq	r1, [r3, #0]
 800712a:	685b      	ldreq	r3, [r3, #4]
 800712c:	1809      	addeq	r1, r1, r0
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	e7ed      	b.n	800710e <_free_r+0x1e>
 8007132:	461a      	mov	r2, r3
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b10b      	cbz	r3, 800713c <_free_r+0x4c>
 8007138:	42a3      	cmp	r3, r4
 800713a:	d9fa      	bls.n	8007132 <_free_r+0x42>
 800713c:	6811      	ldr	r1, [r2, #0]
 800713e:	1850      	adds	r0, r2, r1
 8007140:	42a0      	cmp	r0, r4
 8007142:	d10b      	bne.n	800715c <_free_r+0x6c>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	4401      	add	r1, r0
 8007148:	1850      	adds	r0, r2, r1
 800714a:	4283      	cmp	r3, r0
 800714c:	6011      	str	r1, [r2, #0]
 800714e:	d1e0      	bne.n	8007112 <_free_r+0x22>
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	6053      	str	r3, [r2, #4]
 8007156:	4408      	add	r0, r1
 8007158:	6010      	str	r0, [r2, #0]
 800715a:	e7da      	b.n	8007112 <_free_r+0x22>
 800715c:	d902      	bls.n	8007164 <_free_r+0x74>
 800715e:	230c      	movs	r3, #12
 8007160:	602b      	str	r3, [r5, #0]
 8007162:	e7d6      	b.n	8007112 <_free_r+0x22>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	1821      	adds	r1, r4, r0
 8007168:	428b      	cmp	r3, r1
 800716a:	bf04      	itt	eq
 800716c:	6819      	ldreq	r1, [r3, #0]
 800716e:	685b      	ldreq	r3, [r3, #4]
 8007170:	6063      	str	r3, [r4, #4]
 8007172:	bf04      	itt	eq
 8007174:	1809      	addeq	r1, r1, r0
 8007176:	6021      	streq	r1, [r4, #0]
 8007178:	6054      	str	r4, [r2, #4]
 800717a:	e7ca      	b.n	8007112 <_free_r+0x22>
 800717c:	bd38      	pop	{r3, r4, r5, pc}
 800717e:	bf00      	nop
 8007180:	200006a8 	.word	0x200006a8

08007184 <malloc>:
 8007184:	4b02      	ldr	r3, [pc, #8]	@ (8007190 <malloc+0xc>)
 8007186:	4601      	mov	r1, r0
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	f000 b825 	b.w	80071d8 <_malloc_r>
 800718e:	bf00      	nop
 8007190:	20000018 	.word	0x20000018

08007194 <sbrk_aligned>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	4e0f      	ldr	r6, [pc, #60]	@ (80071d4 <sbrk_aligned+0x40>)
 8007198:	460c      	mov	r4, r1
 800719a:	6831      	ldr	r1, [r6, #0]
 800719c:	4605      	mov	r5, r0
 800719e:	b911      	cbnz	r1, 80071a6 <sbrk_aligned+0x12>
 80071a0:	f000 fe46 	bl	8007e30 <_sbrk_r>
 80071a4:	6030      	str	r0, [r6, #0]
 80071a6:	4621      	mov	r1, r4
 80071a8:	4628      	mov	r0, r5
 80071aa:	f000 fe41 	bl	8007e30 <_sbrk_r>
 80071ae:	1c43      	adds	r3, r0, #1
 80071b0:	d103      	bne.n	80071ba <sbrk_aligned+0x26>
 80071b2:	f04f 34ff 	mov.w	r4, #4294967295
 80071b6:	4620      	mov	r0, r4
 80071b8:	bd70      	pop	{r4, r5, r6, pc}
 80071ba:	1cc4      	adds	r4, r0, #3
 80071bc:	f024 0403 	bic.w	r4, r4, #3
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d0f8      	beq.n	80071b6 <sbrk_aligned+0x22>
 80071c4:	1a21      	subs	r1, r4, r0
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 fe32 	bl	8007e30 <_sbrk_r>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d1f2      	bne.n	80071b6 <sbrk_aligned+0x22>
 80071d0:	e7ef      	b.n	80071b2 <sbrk_aligned+0x1e>
 80071d2:	bf00      	nop
 80071d4:	200006a4 	.word	0x200006a4

080071d8 <_malloc_r>:
 80071d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071dc:	1ccd      	adds	r5, r1, #3
 80071de:	f025 0503 	bic.w	r5, r5, #3
 80071e2:	3508      	adds	r5, #8
 80071e4:	2d0c      	cmp	r5, #12
 80071e6:	bf38      	it	cc
 80071e8:	250c      	movcc	r5, #12
 80071ea:	2d00      	cmp	r5, #0
 80071ec:	4606      	mov	r6, r0
 80071ee:	db01      	blt.n	80071f4 <_malloc_r+0x1c>
 80071f0:	42a9      	cmp	r1, r5
 80071f2:	d904      	bls.n	80071fe <_malloc_r+0x26>
 80071f4:	230c      	movs	r3, #12
 80071f6:	6033      	str	r3, [r6, #0]
 80071f8:	2000      	movs	r0, #0
 80071fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072d4 <_malloc_r+0xfc>
 8007202:	f000 f869 	bl	80072d8 <__malloc_lock>
 8007206:	f8d8 3000 	ldr.w	r3, [r8]
 800720a:	461c      	mov	r4, r3
 800720c:	bb44      	cbnz	r4, 8007260 <_malloc_r+0x88>
 800720e:	4629      	mov	r1, r5
 8007210:	4630      	mov	r0, r6
 8007212:	f7ff ffbf 	bl	8007194 <sbrk_aligned>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	4604      	mov	r4, r0
 800721a:	d158      	bne.n	80072ce <_malloc_r+0xf6>
 800721c:	f8d8 4000 	ldr.w	r4, [r8]
 8007220:	4627      	mov	r7, r4
 8007222:	2f00      	cmp	r7, #0
 8007224:	d143      	bne.n	80072ae <_malloc_r+0xd6>
 8007226:	2c00      	cmp	r4, #0
 8007228:	d04b      	beq.n	80072c2 <_malloc_r+0xea>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	4639      	mov	r1, r7
 800722e:	4630      	mov	r0, r6
 8007230:	eb04 0903 	add.w	r9, r4, r3
 8007234:	f000 fdfc 	bl	8007e30 <_sbrk_r>
 8007238:	4581      	cmp	r9, r0
 800723a:	d142      	bne.n	80072c2 <_malloc_r+0xea>
 800723c:	6821      	ldr	r1, [r4, #0]
 800723e:	1a6d      	subs	r5, r5, r1
 8007240:	4629      	mov	r1, r5
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff ffa6 	bl	8007194 <sbrk_aligned>
 8007248:	3001      	adds	r0, #1
 800724a:	d03a      	beq.n	80072c2 <_malloc_r+0xea>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	442b      	add	r3, r5
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	f8d8 3000 	ldr.w	r3, [r8]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	bb62      	cbnz	r2, 80072b4 <_malloc_r+0xdc>
 800725a:	f8c8 7000 	str.w	r7, [r8]
 800725e:	e00f      	b.n	8007280 <_malloc_r+0xa8>
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	1b52      	subs	r2, r2, r5
 8007264:	d420      	bmi.n	80072a8 <_malloc_r+0xd0>
 8007266:	2a0b      	cmp	r2, #11
 8007268:	d917      	bls.n	800729a <_malloc_r+0xc2>
 800726a:	1961      	adds	r1, r4, r5
 800726c:	42a3      	cmp	r3, r4
 800726e:	6025      	str	r5, [r4, #0]
 8007270:	bf18      	it	ne
 8007272:	6059      	strne	r1, [r3, #4]
 8007274:	6863      	ldr	r3, [r4, #4]
 8007276:	bf08      	it	eq
 8007278:	f8c8 1000 	streq.w	r1, [r8]
 800727c:	5162      	str	r2, [r4, r5]
 800727e:	604b      	str	r3, [r1, #4]
 8007280:	4630      	mov	r0, r6
 8007282:	f000 f82f 	bl	80072e4 <__malloc_unlock>
 8007286:	f104 000b 	add.w	r0, r4, #11
 800728a:	1d23      	adds	r3, r4, #4
 800728c:	f020 0007 	bic.w	r0, r0, #7
 8007290:	1ac2      	subs	r2, r0, r3
 8007292:	bf1c      	itt	ne
 8007294:	1a1b      	subne	r3, r3, r0
 8007296:	50a3      	strne	r3, [r4, r2]
 8007298:	e7af      	b.n	80071fa <_malloc_r+0x22>
 800729a:	6862      	ldr	r2, [r4, #4]
 800729c:	42a3      	cmp	r3, r4
 800729e:	bf0c      	ite	eq
 80072a0:	f8c8 2000 	streq.w	r2, [r8]
 80072a4:	605a      	strne	r2, [r3, #4]
 80072a6:	e7eb      	b.n	8007280 <_malloc_r+0xa8>
 80072a8:	4623      	mov	r3, r4
 80072aa:	6864      	ldr	r4, [r4, #4]
 80072ac:	e7ae      	b.n	800720c <_malloc_r+0x34>
 80072ae:	463c      	mov	r4, r7
 80072b0:	687f      	ldr	r7, [r7, #4]
 80072b2:	e7b6      	b.n	8007222 <_malloc_r+0x4a>
 80072b4:	461a      	mov	r2, r3
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	d1fb      	bne.n	80072b4 <_malloc_r+0xdc>
 80072bc:	2300      	movs	r3, #0
 80072be:	6053      	str	r3, [r2, #4]
 80072c0:	e7de      	b.n	8007280 <_malloc_r+0xa8>
 80072c2:	230c      	movs	r3, #12
 80072c4:	6033      	str	r3, [r6, #0]
 80072c6:	4630      	mov	r0, r6
 80072c8:	f000 f80c 	bl	80072e4 <__malloc_unlock>
 80072cc:	e794      	b.n	80071f8 <_malloc_r+0x20>
 80072ce:	6005      	str	r5, [r0, #0]
 80072d0:	e7d6      	b.n	8007280 <_malloc_r+0xa8>
 80072d2:	bf00      	nop
 80072d4:	200006a8 	.word	0x200006a8

080072d8 <__malloc_lock>:
 80072d8:	4801      	ldr	r0, [pc, #4]	@ (80072e0 <__malloc_lock+0x8>)
 80072da:	f7ff b8ba 	b.w	8006452 <__retarget_lock_acquire_recursive>
 80072de:	bf00      	nop
 80072e0:	200006a0 	.word	0x200006a0

080072e4 <__malloc_unlock>:
 80072e4:	4801      	ldr	r0, [pc, #4]	@ (80072ec <__malloc_unlock+0x8>)
 80072e6:	f7ff b8b5 	b.w	8006454 <__retarget_lock_release_recursive>
 80072ea:	bf00      	nop
 80072ec:	200006a0 	.word	0x200006a0

080072f0 <_Balloc>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	69c6      	ldr	r6, [r0, #28]
 80072f4:	4604      	mov	r4, r0
 80072f6:	460d      	mov	r5, r1
 80072f8:	b976      	cbnz	r6, 8007318 <_Balloc+0x28>
 80072fa:	2010      	movs	r0, #16
 80072fc:	f7ff ff42 	bl	8007184 <malloc>
 8007300:	4602      	mov	r2, r0
 8007302:	61e0      	str	r0, [r4, #28]
 8007304:	b920      	cbnz	r0, 8007310 <_Balloc+0x20>
 8007306:	4b18      	ldr	r3, [pc, #96]	@ (8007368 <_Balloc+0x78>)
 8007308:	4818      	ldr	r0, [pc, #96]	@ (800736c <_Balloc+0x7c>)
 800730a:	216b      	movs	r1, #107	@ 0x6b
 800730c:	f000 fdae 	bl	8007e6c <__assert_func>
 8007310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007314:	6006      	str	r6, [r0, #0]
 8007316:	60c6      	str	r6, [r0, #12]
 8007318:	69e6      	ldr	r6, [r4, #28]
 800731a:	68f3      	ldr	r3, [r6, #12]
 800731c:	b183      	cbz	r3, 8007340 <_Balloc+0x50>
 800731e:	69e3      	ldr	r3, [r4, #28]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007326:	b9b8      	cbnz	r0, 8007358 <_Balloc+0x68>
 8007328:	2101      	movs	r1, #1
 800732a:	fa01 f605 	lsl.w	r6, r1, r5
 800732e:	1d72      	adds	r2, r6, #5
 8007330:	0092      	lsls	r2, r2, #2
 8007332:	4620      	mov	r0, r4
 8007334:	f000 fdb8 	bl	8007ea8 <_calloc_r>
 8007338:	b160      	cbz	r0, 8007354 <_Balloc+0x64>
 800733a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800733e:	e00e      	b.n	800735e <_Balloc+0x6e>
 8007340:	2221      	movs	r2, #33	@ 0x21
 8007342:	2104      	movs	r1, #4
 8007344:	4620      	mov	r0, r4
 8007346:	f000 fdaf 	bl	8007ea8 <_calloc_r>
 800734a:	69e3      	ldr	r3, [r4, #28]
 800734c:	60f0      	str	r0, [r6, #12]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e4      	bne.n	800731e <_Balloc+0x2e>
 8007354:	2000      	movs	r0, #0
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	6802      	ldr	r2, [r0, #0]
 800735a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800735e:	2300      	movs	r3, #0
 8007360:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007364:	e7f7      	b.n	8007356 <_Balloc+0x66>
 8007366:	bf00      	nop
 8007368:	080085b1 	.word	0x080085b1
 800736c:	08008631 	.word	0x08008631

08007370 <_Bfree>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	69c6      	ldr	r6, [r0, #28]
 8007374:	4605      	mov	r5, r0
 8007376:	460c      	mov	r4, r1
 8007378:	b976      	cbnz	r6, 8007398 <_Bfree+0x28>
 800737a:	2010      	movs	r0, #16
 800737c:	f7ff ff02 	bl	8007184 <malloc>
 8007380:	4602      	mov	r2, r0
 8007382:	61e8      	str	r0, [r5, #28]
 8007384:	b920      	cbnz	r0, 8007390 <_Bfree+0x20>
 8007386:	4b09      	ldr	r3, [pc, #36]	@ (80073ac <_Bfree+0x3c>)
 8007388:	4809      	ldr	r0, [pc, #36]	@ (80073b0 <_Bfree+0x40>)
 800738a:	218f      	movs	r1, #143	@ 0x8f
 800738c:	f000 fd6e 	bl	8007e6c <__assert_func>
 8007390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007394:	6006      	str	r6, [r0, #0]
 8007396:	60c6      	str	r6, [r0, #12]
 8007398:	b13c      	cbz	r4, 80073aa <_Bfree+0x3a>
 800739a:	69eb      	ldr	r3, [r5, #28]
 800739c:	6862      	ldr	r2, [r4, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073a4:	6021      	str	r1, [r4, #0]
 80073a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073aa:	bd70      	pop	{r4, r5, r6, pc}
 80073ac:	080085b1 	.word	0x080085b1
 80073b0:	08008631 	.word	0x08008631

080073b4 <__multadd>:
 80073b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b8:	690d      	ldr	r5, [r1, #16]
 80073ba:	4607      	mov	r7, r0
 80073bc:	460c      	mov	r4, r1
 80073be:	461e      	mov	r6, r3
 80073c0:	f101 0c14 	add.w	ip, r1, #20
 80073c4:	2000      	movs	r0, #0
 80073c6:	f8dc 3000 	ldr.w	r3, [ip]
 80073ca:	b299      	uxth	r1, r3
 80073cc:	fb02 6101 	mla	r1, r2, r1, r6
 80073d0:	0c1e      	lsrs	r6, r3, #16
 80073d2:	0c0b      	lsrs	r3, r1, #16
 80073d4:	fb02 3306 	mla	r3, r2, r6, r3
 80073d8:	b289      	uxth	r1, r1
 80073da:	3001      	adds	r0, #1
 80073dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073e0:	4285      	cmp	r5, r0
 80073e2:	f84c 1b04 	str.w	r1, [ip], #4
 80073e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073ea:	dcec      	bgt.n	80073c6 <__multadd+0x12>
 80073ec:	b30e      	cbz	r6, 8007432 <__multadd+0x7e>
 80073ee:	68a3      	ldr	r3, [r4, #8]
 80073f0:	42ab      	cmp	r3, r5
 80073f2:	dc19      	bgt.n	8007428 <__multadd+0x74>
 80073f4:	6861      	ldr	r1, [r4, #4]
 80073f6:	4638      	mov	r0, r7
 80073f8:	3101      	adds	r1, #1
 80073fa:	f7ff ff79 	bl	80072f0 <_Balloc>
 80073fe:	4680      	mov	r8, r0
 8007400:	b928      	cbnz	r0, 800740e <__multadd+0x5a>
 8007402:	4602      	mov	r2, r0
 8007404:	4b0c      	ldr	r3, [pc, #48]	@ (8007438 <__multadd+0x84>)
 8007406:	480d      	ldr	r0, [pc, #52]	@ (800743c <__multadd+0x88>)
 8007408:	21ba      	movs	r1, #186	@ 0xba
 800740a:	f000 fd2f 	bl	8007e6c <__assert_func>
 800740e:	6922      	ldr	r2, [r4, #16]
 8007410:	3202      	adds	r2, #2
 8007412:	f104 010c 	add.w	r1, r4, #12
 8007416:	0092      	lsls	r2, r2, #2
 8007418:	300c      	adds	r0, #12
 800741a:	f000 fd19 	bl	8007e50 <memcpy>
 800741e:	4621      	mov	r1, r4
 8007420:	4638      	mov	r0, r7
 8007422:	f7ff ffa5 	bl	8007370 <_Bfree>
 8007426:	4644      	mov	r4, r8
 8007428:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800742c:	3501      	adds	r5, #1
 800742e:	615e      	str	r6, [r3, #20]
 8007430:	6125      	str	r5, [r4, #16]
 8007432:	4620      	mov	r0, r4
 8007434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007438:	08008620 	.word	0x08008620
 800743c:	08008631 	.word	0x08008631

08007440 <__hi0bits>:
 8007440:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007444:	4603      	mov	r3, r0
 8007446:	bf36      	itet	cc
 8007448:	0403      	lslcc	r3, r0, #16
 800744a:	2000      	movcs	r0, #0
 800744c:	2010      	movcc	r0, #16
 800744e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007452:	bf3c      	itt	cc
 8007454:	021b      	lslcc	r3, r3, #8
 8007456:	3008      	addcc	r0, #8
 8007458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800745c:	bf3c      	itt	cc
 800745e:	011b      	lslcc	r3, r3, #4
 8007460:	3004      	addcc	r0, #4
 8007462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007466:	bf3c      	itt	cc
 8007468:	009b      	lslcc	r3, r3, #2
 800746a:	3002      	addcc	r0, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	db05      	blt.n	800747c <__hi0bits+0x3c>
 8007470:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007474:	f100 0001 	add.w	r0, r0, #1
 8007478:	bf08      	it	eq
 800747a:	2020      	moveq	r0, #32
 800747c:	4770      	bx	lr

0800747e <__lo0bits>:
 800747e:	6803      	ldr	r3, [r0, #0]
 8007480:	4602      	mov	r2, r0
 8007482:	f013 0007 	ands.w	r0, r3, #7
 8007486:	d00b      	beq.n	80074a0 <__lo0bits+0x22>
 8007488:	07d9      	lsls	r1, r3, #31
 800748a:	d421      	bmi.n	80074d0 <__lo0bits+0x52>
 800748c:	0798      	lsls	r0, r3, #30
 800748e:	bf49      	itett	mi
 8007490:	085b      	lsrmi	r3, r3, #1
 8007492:	089b      	lsrpl	r3, r3, #2
 8007494:	2001      	movmi	r0, #1
 8007496:	6013      	strmi	r3, [r2, #0]
 8007498:	bf5c      	itt	pl
 800749a:	6013      	strpl	r3, [r2, #0]
 800749c:	2002      	movpl	r0, #2
 800749e:	4770      	bx	lr
 80074a0:	b299      	uxth	r1, r3
 80074a2:	b909      	cbnz	r1, 80074a8 <__lo0bits+0x2a>
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	2010      	movs	r0, #16
 80074a8:	b2d9      	uxtb	r1, r3
 80074aa:	b909      	cbnz	r1, 80074b0 <__lo0bits+0x32>
 80074ac:	3008      	adds	r0, #8
 80074ae:	0a1b      	lsrs	r3, r3, #8
 80074b0:	0719      	lsls	r1, r3, #28
 80074b2:	bf04      	itt	eq
 80074b4:	091b      	lsreq	r3, r3, #4
 80074b6:	3004      	addeq	r0, #4
 80074b8:	0799      	lsls	r1, r3, #30
 80074ba:	bf04      	itt	eq
 80074bc:	089b      	lsreq	r3, r3, #2
 80074be:	3002      	addeq	r0, #2
 80074c0:	07d9      	lsls	r1, r3, #31
 80074c2:	d403      	bmi.n	80074cc <__lo0bits+0x4e>
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	f100 0001 	add.w	r0, r0, #1
 80074ca:	d003      	beq.n	80074d4 <__lo0bits+0x56>
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	4770      	bx	lr
 80074d0:	2000      	movs	r0, #0
 80074d2:	4770      	bx	lr
 80074d4:	2020      	movs	r0, #32
 80074d6:	4770      	bx	lr

080074d8 <__i2b>:
 80074d8:	b510      	push	{r4, lr}
 80074da:	460c      	mov	r4, r1
 80074dc:	2101      	movs	r1, #1
 80074de:	f7ff ff07 	bl	80072f0 <_Balloc>
 80074e2:	4602      	mov	r2, r0
 80074e4:	b928      	cbnz	r0, 80074f2 <__i2b+0x1a>
 80074e6:	4b05      	ldr	r3, [pc, #20]	@ (80074fc <__i2b+0x24>)
 80074e8:	4805      	ldr	r0, [pc, #20]	@ (8007500 <__i2b+0x28>)
 80074ea:	f240 1145 	movw	r1, #325	@ 0x145
 80074ee:	f000 fcbd 	bl	8007e6c <__assert_func>
 80074f2:	2301      	movs	r3, #1
 80074f4:	6144      	str	r4, [r0, #20]
 80074f6:	6103      	str	r3, [r0, #16]
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	bf00      	nop
 80074fc:	08008620 	.word	0x08008620
 8007500:	08008631 	.word	0x08008631

08007504 <__multiply>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	4614      	mov	r4, r2
 800750a:	690a      	ldr	r2, [r1, #16]
 800750c:	6923      	ldr	r3, [r4, #16]
 800750e:	429a      	cmp	r2, r3
 8007510:	bfa8      	it	ge
 8007512:	4623      	movge	r3, r4
 8007514:	460f      	mov	r7, r1
 8007516:	bfa4      	itt	ge
 8007518:	460c      	movge	r4, r1
 800751a:	461f      	movge	r7, r3
 800751c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007520:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007524:	68a3      	ldr	r3, [r4, #8]
 8007526:	6861      	ldr	r1, [r4, #4]
 8007528:	eb0a 0609 	add.w	r6, sl, r9
 800752c:	42b3      	cmp	r3, r6
 800752e:	b085      	sub	sp, #20
 8007530:	bfb8      	it	lt
 8007532:	3101      	addlt	r1, #1
 8007534:	f7ff fedc 	bl	80072f0 <_Balloc>
 8007538:	b930      	cbnz	r0, 8007548 <__multiply+0x44>
 800753a:	4602      	mov	r2, r0
 800753c:	4b44      	ldr	r3, [pc, #272]	@ (8007650 <__multiply+0x14c>)
 800753e:	4845      	ldr	r0, [pc, #276]	@ (8007654 <__multiply+0x150>)
 8007540:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007544:	f000 fc92 	bl	8007e6c <__assert_func>
 8007548:	f100 0514 	add.w	r5, r0, #20
 800754c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007550:	462b      	mov	r3, r5
 8007552:	2200      	movs	r2, #0
 8007554:	4543      	cmp	r3, r8
 8007556:	d321      	bcc.n	800759c <__multiply+0x98>
 8007558:	f107 0114 	add.w	r1, r7, #20
 800755c:	f104 0214 	add.w	r2, r4, #20
 8007560:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007564:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007568:	9302      	str	r3, [sp, #8]
 800756a:	1b13      	subs	r3, r2, r4
 800756c:	3b15      	subs	r3, #21
 800756e:	f023 0303 	bic.w	r3, r3, #3
 8007572:	3304      	adds	r3, #4
 8007574:	f104 0715 	add.w	r7, r4, #21
 8007578:	42ba      	cmp	r2, r7
 800757a:	bf38      	it	cc
 800757c:	2304      	movcc	r3, #4
 800757e:	9301      	str	r3, [sp, #4]
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	9103      	str	r1, [sp, #12]
 8007584:	428b      	cmp	r3, r1
 8007586:	d80c      	bhi.n	80075a2 <__multiply+0x9e>
 8007588:	2e00      	cmp	r6, #0
 800758a:	dd03      	ble.n	8007594 <__multiply+0x90>
 800758c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007590:	2b00      	cmp	r3, #0
 8007592:	d05b      	beq.n	800764c <__multiply+0x148>
 8007594:	6106      	str	r6, [r0, #16]
 8007596:	b005      	add	sp, #20
 8007598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759c:	f843 2b04 	str.w	r2, [r3], #4
 80075a0:	e7d8      	b.n	8007554 <__multiply+0x50>
 80075a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80075a6:	f1ba 0f00 	cmp.w	sl, #0
 80075aa:	d024      	beq.n	80075f6 <__multiply+0xf2>
 80075ac:	f104 0e14 	add.w	lr, r4, #20
 80075b0:	46a9      	mov	r9, r5
 80075b2:	f04f 0c00 	mov.w	ip, #0
 80075b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075ba:	f8d9 3000 	ldr.w	r3, [r9]
 80075be:	fa1f fb87 	uxth.w	fp, r7
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80075c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80075cc:	f8d9 7000 	ldr.w	r7, [r9]
 80075d0:	4463      	add	r3, ip
 80075d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80075da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80075de:	b29b      	uxth	r3, r3
 80075e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075e4:	4572      	cmp	r2, lr
 80075e6:	f849 3b04 	str.w	r3, [r9], #4
 80075ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075ee:	d8e2      	bhi.n	80075b6 <__multiply+0xb2>
 80075f0:	9b01      	ldr	r3, [sp, #4]
 80075f2:	f845 c003 	str.w	ip, [r5, r3]
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075fc:	3104      	adds	r1, #4
 80075fe:	f1b9 0f00 	cmp.w	r9, #0
 8007602:	d021      	beq.n	8007648 <__multiply+0x144>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	f104 0c14 	add.w	ip, r4, #20
 800760a:	46ae      	mov	lr, r5
 800760c:	f04f 0a00 	mov.w	sl, #0
 8007610:	f8bc b000 	ldrh.w	fp, [ip]
 8007614:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007618:	fb09 770b 	mla	r7, r9, fp, r7
 800761c:	4457      	add	r7, sl
 800761e:	b29b      	uxth	r3, r3
 8007620:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007624:	f84e 3b04 	str.w	r3, [lr], #4
 8007628:	f85c 3b04 	ldr.w	r3, [ip], #4
 800762c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007630:	f8be 3000 	ldrh.w	r3, [lr]
 8007634:	fb09 330a 	mla	r3, r9, sl, r3
 8007638:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800763c:	4562      	cmp	r2, ip
 800763e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007642:	d8e5      	bhi.n	8007610 <__multiply+0x10c>
 8007644:	9f01      	ldr	r7, [sp, #4]
 8007646:	51eb      	str	r3, [r5, r7]
 8007648:	3504      	adds	r5, #4
 800764a:	e799      	b.n	8007580 <__multiply+0x7c>
 800764c:	3e01      	subs	r6, #1
 800764e:	e79b      	b.n	8007588 <__multiply+0x84>
 8007650:	08008620 	.word	0x08008620
 8007654:	08008631 	.word	0x08008631

08007658 <__pow5mult>:
 8007658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800765c:	4615      	mov	r5, r2
 800765e:	f012 0203 	ands.w	r2, r2, #3
 8007662:	4607      	mov	r7, r0
 8007664:	460e      	mov	r6, r1
 8007666:	d007      	beq.n	8007678 <__pow5mult+0x20>
 8007668:	4c25      	ldr	r4, [pc, #148]	@ (8007700 <__pow5mult+0xa8>)
 800766a:	3a01      	subs	r2, #1
 800766c:	2300      	movs	r3, #0
 800766e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007672:	f7ff fe9f 	bl	80073b4 <__multadd>
 8007676:	4606      	mov	r6, r0
 8007678:	10ad      	asrs	r5, r5, #2
 800767a:	d03d      	beq.n	80076f8 <__pow5mult+0xa0>
 800767c:	69fc      	ldr	r4, [r7, #28]
 800767e:	b97c      	cbnz	r4, 80076a0 <__pow5mult+0x48>
 8007680:	2010      	movs	r0, #16
 8007682:	f7ff fd7f 	bl	8007184 <malloc>
 8007686:	4602      	mov	r2, r0
 8007688:	61f8      	str	r0, [r7, #28]
 800768a:	b928      	cbnz	r0, 8007698 <__pow5mult+0x40>
 800768c:	4b1d      	ldr	r3, [pc, #116]	@ (8007704 <__pow5mult+0xac>)
 800768e:	481e      	ldr	r0, [pc, #120]	@ (8007708 <__pow5mult+0xb0>)
 8007690:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007694:	f000 fbea 	bl	8007e6c <__assert_func>
 8007698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800769c:	6004      	str	r4, [r0, #0]
 800769e:	60c4      	str	r4, [r0, #12]
 80076a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80076a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076a8:	b94c      	cbnz	r4, 80076be <__pow5mult+0x66>
 80076aa:	f240 2171 	movw	r1, #625	@ 0x271
 80076ae:	4638      	mov	r0, r7
 80076b0:	f7ff ff12 	bl	80074d8 <__i2b>
 80076b4:	2300      	movs	r3, #0
 80076b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80076ba:	4604      	mov	r4, r0
 80076bc:	6003      	str	r3, [r0, #0]
 80076be:	f04f 0900 	mov.w	r9, #0
 80076c2:	07eb      	lsls	r3, r5, #31
 80076c4:	d50a      	bpl.n	80076dc <__pow5mult+0x84>
 80076c6:	4631      	mov	r1, r6
 80076c8:	4622      	mov	r2, r4
 80076ca:	4638      	mov	r0, r7
 80076cc:	f7ff ff1a 	bl	8007504 <__multiply>
 80076d0:	4631      	mov	r1, r6
 80076d2:	4680      	mov	r8, r0
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7ff fe4b 	bl	8007370 <_Bfree>
 80076da:	4646      	mov	r6, r8
 80076dc:	106d      	asrs	r5, r5, #1
 80076de:	d00b      	beq.n	80076f8 <__pow5mult+0xa0>
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	b938      	cbnz	r0, 80076f4 <__pow5mult+0x9c>
 80076e4:	4622      	mov	r2, r4
 80076e6:	4621      	mov	r1, r4
 80076e8:	4638      	mov	r0, r7
 80076ea:	f7ff ff0b 	bl	8007504 <__multiply>
 80076ee:	6020      	str	r0, [r4, #0]
 80076f0:	f8c0 9000 	str.w	r9, [r0]
 80076f4:	4604      	mov	r4, r0
 80076f6:	e7e4      	b.n	80076c2 <__pow5mult+0x6a>
 80076f8:	4630      	mov	r0, r6
 80076fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fe:	bf00      	nop
 8007700:	0800868c 	.word	0x0800868c
 8007704:	080085b1 	.word	0x080085b1
 8007708:	08008631 	.word	0x08008631

0800770c <__lshift>:
 800770c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	460c      	mov	r4, r1
 8007712:	6849      	ldr	r1, [r1, #4]
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800771a:	68a3      	ldr	r3, [r4, #8]
 800771c:	4607      	mov	r7, r0
 800771e:	4691      	mov	r9, r2
 8007720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007724:	f108 0601 	add.w	r6, r8, #1
 8007728:	42b3      	cmp	r3, r6
 800772a:	db0b      	blt.n	8007744 <__lshift+0x38>
 800772c:	4638      	mov	r0, r7
 800772e:	f7ff fddf 	bl	80072f0 <_Balloc>
 8007732:	4605      	mov	r5, r0
 8007734:	b948      	cbnz	r0, 800774a <__lshift+0x3e>
 8007736:	4602      	mov	r2, r0
 8007738:	4b28      	ldr	r3, [pc, #160]	@ (80077dc <__lshift+0xd0>)
 800773a:	4829      	ldr	r0, [pc, #164]	@ (80077e0 <__lshift+0xd4>)
 800773c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007740:	f000 fb94 	bl	8007e6c <__assert_func>
 8007744:	3101      	adds	r1, #1
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	e7ee      	b.n	8007728 <__lshift+0x1c>
 800774a:	2300      	movs	r3, #0
 800774c:	f100 0114 	add.w	r1, r0, #20
 8007750:	f100 0210 	add.w	r2, r0, #16
 8007754:	4618      	mov	r0, r3
 8007756:	4553      	cmp	r3, sl
 8007758:	db33      	blt.n	80077c2 <__lshift+0xb6>
 800775a:	6920      	ldr	r0, [r4, #16]
 800775c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007760:	f104 0314 	add.w	r3, r4, #20
 8007764:	f019 091f 	ands.w	r9, r9, #31
 8007768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800776c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007770:	d02b      	beq.n	80077ca <__lshift+0xbe>
 8007772:	f1c9 0e20 	rsb	lr, r9, #32
 8007776:	468a      	mov	sl, r1
 8007778:	2200      	movs	r2, #0
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	fa00 f009 	lsl.w	r0, r0, r9
 8007780:	4310      	orrs	r0, r2
 8007782:	f84a 0b04 	str.w	r0, [sl], #4
 8007786:	f853 2b04 	ldr.w	r2, [r3], #4
 800778a:	459c      	cmp	ip, r3
 800778c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007790:	d8f3      	bhi.n	800777a <__lshift+0x6e>
 8007792:	ebac 0304 	sub.w	r3, ip, r4
 8007796:	3b15      	subs	r3, #21
 8007798:	f023 0303 	bic.w	r3, r3, #3
 800779c:	3304      	adds	r3, #4
 800779e:	f104 0015 	add.w	r0, r4, #21
 80077a2:	4584      	cmp	ip, r0
 80077a4:	bf38      	it	cc
 80077a6:	2304      	movcc	r3, #4
 80077a8:	50ca      	str	r2, [r1, r3]
 80077aa:	b10a      	cbz	r2, 80077b0 <__lshift+0xa4>
 80077ac:	f108 0602 	add.w	r6, r8, #2
 80077b0:	3e01      	subs	r6, #1
 80077b2:	4638      	mov	r0, r7
 80077b4:	612e      	str	r6, [r5, #16]
 80077b6:	4621      	mov	r1, r4
 80077b8:	f7ff fdda 	bl	8007370 <_Bfree>
 80077bc:	4628      	mov	r0, r5
 80077be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80077c6:	3301      	adds	r3, #1
 80077c8:	e7c5      	b.n	8007756 <__lshift+0x4a>
 80077ca:	3904      	subs	r1, #4
 80077cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80077d4:	459c      	cmp	ip, r3
 80077d6:	d8f9      	bhi.n	80077cc <__lshift+0xc0>
 80077d8:	e7ea      	b.n	80077b0 <__lshift+0xa4>
 80077da:	bf00      	nop
 80077dc:	08008620 	.word	0x08008620
 80077e0:	08008631 	.word	0x08008631

080077e4 <__mcmp>:
 80077e4:	690a      	ldr	r2, [r1, #16]
 80077e6:	4603      	mov	r3, r0
 80077e8:	6900      	ldr	r0, [r0, #16]
 80077ea:	1a80      	subs	r0, r0, r2
 80077ec:	b530      	push	{r4, r5, lr}
 80077ee:	d10e      	bne.n	800780e <__mcmp+0x2a>
 80077f0:	3314      	adds	r3, #20
 80077f2:	3114      	adds	r1, #20
 80077f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007800:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007804:	4295      	cmp	r5, r2
 8007806:	d003      	beq.n	8007810 <__mcmp+0x2c>
 8007808:	d205      	bcs.n	8007816 <__mcmp+0x32>
 800780a:	f04f 30ff 	mov.w	r0, #4294967295
 800780e:	bd30      	pop	{r4, r5, pc}
 8007810:	42a3      	cmp	r3, r4
 8007812:	d3f3      	bcc.n	80077fc <__mcmp+0x18>
 8007814:	e7fb      	b.n	800780e <__mcmp+0x2a>
 8007816:	2001      	movs	r0, #1
 8007818:	e7f9      	b.n	800780e <__mcmp+0x2a>
	...

0800781c <__mdiff>:
 800781c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007820:	4689      	mov	r9, r1
 8007822:	4606      	mov	r6, r0
 8007824:	4611      	mov	r1, r2
 8007826:	4648      	mov	r0, r9
 8007828:	4614      	mov	r4, r2
 800782a:	f7ff ffdb 	bl	80077e4 <__mcmp>
 800782e:	1e05      	subs	r5, r0, #0
 8007830:	d112      	bne.n	8007858 <__mdiff+0x3c>
 8007832:	4629      	mov	r1, r5
 8007834:	4630      	mov	r0, r6
 8007836:	f7ff fd5b 	bl	80072f0 <_Balloc>
 800783a:	4602      	mov	r2, r0
 800783c:	b928      	cbnz	r0, 800784a <__mdiff+0x2e>
 800783e:	4b3f      	ldr	r3, [pc, #252]	@ (800793c <__mdiff+0x120>)
 8007840:	f240 2137 	movw	r1, #567	@ 0x237
 8007844:	483e      	ldr	r0, [pc, #248]	@ (8007940 <__mdiff+0x124>)
 8007846:	f000 fb11 	bl	8007e6c <__assert_func>
 800784a:	2301      	movs	r3, #1
 800784c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007850:	4610      	mov	r0, r2
 8007852:	b003      	add	sp, #12
 8007854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007858:	bfbc      	itt	lt
 800785a:	464b      	movlt	r3, r9
 800785c:	46a1      	movlt	r9, r4
 800785e:	4630      	mov	r0, r6
 8007860:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007864:	bfba      	itte	lt
 8007866:	461c      	movlt	r4, r3
 8007868:	2501      	movlt	r5, #1
 800786a:	2500      	movge	r5, #0
 800786c:	f7ff fd40 	bl	80072f0 <_Balloc>
 8007870:	4602      	mov	r2, r0
 8007872:	b918      	cbnz	r0, 800787c <__mdiff+0x60>
 8007874:	4b31      	ldr	r3, [pc, #196]	@ (800793c <__mdiff+0x120>)
 8007876:	f240 2145 	movw	r1, #581	@ 0x245
 800787a:	e7e3      	b.n	8007844 <__mdiff+0x28>
 800787c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007880:	6926      	ldr	r6, [r4, #16]
 8007882:	60c5      	str	r5, [r0, #12]
 8007884:	f109 0310 	add.w	r3, r9, #16
 8007888:	f109 0514 	add.w	r5, r9, #20
 800788c:	f104 0e14 	add.w	lr, r4, #20
 8007890:	f100 0b14 	add.w	fp, r0, #20
 8007894:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007898:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	46d9      	mov	r9, fp
 80078a0:	f04f 0c00 	mov.w	ip, #0
 80078a4:	9b01      	ldr	r3, [sp, #4]
 80078a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80078aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80078ae:	9301      	str	r3, [sp, #4]
 80078b0:	fa1f f38a 	uxth.w	r3, sl
 80078b4:	4619      	mov	r1, r3
 80078b6:	b283      	uxth	r3, r0
 80078b8:	1acb      	subs	r3, r1, r3
 80078ba:	0c00      	lsrs	r0, r0, #16
 80078bc:	4463      	add	r3, ip
 80078be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80078c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80078cc:	4576      	cmp	r6, lr
 80078ce:	f849 3b04 	str.w	r3, [r9], #4
 80078d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078d6:	d8e5      	bhi.n	80078a4 <__mdiff+0x88>
 80078d8:	1b33      	subs	r3, r6, r4
 80078da:	3b15      	subs	r3, #21
 80078dc:	f023 0303 	bic.w	r3, r3, #3
 80078e0:	3415      	adds	r4, #21
 80078e2:	3304      	adds	r3, #4
 80078e4:	42a6      	cmp	r6, r4
 80078e6:	bf38      	it	cc
 80078e8:	2304      	movcc	r3, #4
 80078ea:	441d      	add	r5, r3
 80078ec:	445b      	add	r3, fp
 80078ee:	461e      	mov	r6, r3
 80078f0:	462c      	mov	r4, r5
 80078f2:	4544      	cmp	r4, r8
 80078f4:	d30e      	bcc.n	8007914 <__mdiff+0xf8>
 80078f6:	f108 0103 	add.w	r1, r8, #3
 80078fa:	1b49      	subs	r1, r1, r5
 80078fc:	f021 0103 	bic.w	r1, r1, #3
 8007900:	3d03      	subs	r5, #3
 8007902:	45a8      	cmp	r8, r5
 8007904:	bf38      	it	cc
 8007906:	2100      	movcc	r1, #0
 8007908:	440b      	add	r3, r1
 800790a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800790e:	b191      	cbz	r1, 8007936 <__mdiff+0x11a>
 8007910:	6117      	str	r7, [r2, #16]
 8007912:	e79d      	b.n	8007850 <__mdiff+0x34>
 8007914:	f854 1b04 	ldr.w	r1, [r4], #4
 8007918:	46e6      	mov	lr, ip
 800791a:	0c08      	lsrs	r0, r1, #16
 800791c:	fa1c fc81 	uxtah	ip, ip, r1
 8007920:	4471      	add	r1, lr
 8007922:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007926:	b289      	uxth	r1, r1
 8007928:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800792c:	f846 1b04 	str.w	r1, [r6], #4
 8007930:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007934:	e7dd      	b.n	80078f2 <__mdiff+0xd6>
 8007936:	3f01      	subs	r7, #1
 8007938:	e7e7      	b.n	800790a <__mdiff+0xee>
 800793a:	bf00      	nop
 800793c:	08008620 	.word	0x08008620
 8007940:	08008631 	.word	0x08008631

08007944 <__d2b>:
 8007944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007948:	460f      	mov	r7, r1
 800794a:	2101      	movs	r1, #1
 800794c:	ec59 8b10 	vmov	r8, r9, d0
 8007950:	4616      	mov	r6, r2
 8007952:	f7ff fccd 	bl	80072f0 <_Balloc>
 8007956:	4604      	mov	r4, r0
 8007958:	b930      	cbnz	r0, 8007968 <__d2b+0x24>
 800795a:	4602      	mov	r2, r0
 800795c:	4b23      	ldr	r3, [pc, #140]	@ (80079ec <__d2b+0xa8>)
 800795e:	4824      	ldr	r0, [pc, #144]	@ (80079f0 <__d2b+0xac>)
 8007960:	f240 310f 	movw	r1, #783	@ 0x30f
 8007964:	f000 fa82 	bl	8007e6c <__assert_func>
 8007968:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800796c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007970:	b10d      	cbz	r5, 8007976 <__d2b+0x32>
 8007972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	f1b8 0300 	subs.w	r3, r8, #0
 800797c:	d023      	beq.n	80079c6 <__d2b+0x82>
 800797e:	4668      	mov	r0, sp
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	f7ff fd7c 	bl	800747e <__lo0bits>
 8007986:	e9dd 1200 	ldrd	r1, r2, [sp]
 800798a:	b1d0      	cbz	r0, 80079c2 <__d2b+0x7e>
 800798c:	f1c0 0320 	rsb	r3, r0, #32
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	430b      	orrs	r3, r1
 8007996:	40c2      	lsrs	r2, r0
 8007998:	6163      	str	r3, [r4, #20]
 800799a:	9201      	str	r2, [sp, #4]
 800799c:	9b01      	ldr	r3, [sp, #4]
 800799e:	61a3      	str	r3, [r4, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	bf0c      	ite	eq
 80079a4:	2201      	moveq	r2, #1
 80079a6:	2202      	movne	r2, #2
 80079a8:	6122      	str	r2, [r4, #16]
 80079aa:	b1a5      	cbz	r5, 80079d6 <__d2b+0x92>
 80079ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80079b0:	4405      	add	r5, r0
 80079b2:	603d      	str	r5, [r7, #0]
 80079b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80079b8:	6030      	str	r0, [r6, #0]
 80079ba:	4620      	mov	r0, r4
 80079bc:	b003      	add	sp, #12
 80079be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079c2:	6161      	str	r1, [r4, #20]
 80079c4:	e7ea      	b.n	800799c <__d2b+0x58>
 80079c6:	a801      	add	r0, sp, #4
 80079c8:	f7ff fd59 	bl	800747e <__lo0bits>
 80079cc:	9b01      	ldr	r3, [sp, #4]
 80079ce:	6163      	str	r3, [r4, #20]
 80079d0:	3020      	adds	r0, #32
 80079d2:	2201      	movs	r2, #1
 80079d4:	e7e8      	b.n	80079a8 <__d2b+0x64>
 80079d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80079de:	6038      	str	r0, [r7, #0]
 80079e0:	6918      	ldr	r0, [r3, #16]
 80079e2:	f7ff fd2d 	bl	8007440 <__hi0bits>
 80079e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079ea:	e7e5      	b.n	80079b8 <__d2b+0x74>
 80079ec:	08008620 	.word	0x08008620
 80079f0:	08008631 	.word	0x08008631

080079f4 <__ssputs_r>:
 80079f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f8:	688e      	ldr	r6, [r1, #8]
 80079fa:	461f      	mov	r7, r3
 80079fc:	42be      	cmp	r6, r7
 80079fe:	680b      	ldr	r3, [r1, #0]
 8007a00:	4682      	mov	sl, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	4690      	mov	r8, r2
 8007a06:	d82d      	bhi.n	8007a64 <__ssputs_r+0x70>
 8007a08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a10:	d026      	beq.n	8007a60 <__ssputs_r+0x6c>
 8007a12:	6965      	ldr	r5, [r4, #20]
 8007a14:	6909      	ldr	r1, [r1, #16]
 8007a16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a1a:	eba3 0901 	sub.w	r9, r3, r1
 8007a1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a22:	1c7b      	adds	r3, r7, #1
 8007a24:	444b      	add	r3, r9
 8007a26:	106d      	asrs	r5, r5, #1
 8007a28:	429d      	cmp	r5, r3
 8007a2a:	bf38      	it	cc
 8007a2c:	461d      	movcc	r5, r3
 8007a2e:	0553      	lsls	r3, r2, #21
 8007a30:	d527      	bpl.n	8007a82 <__ssputs_r+0x8e>
 8007a32:	4629      	mov	r1, r5
 8007a34:	f7ff fbd0 	bl	80071d8 <_malloc_r>
 8007a38:	4606      	mov	r6, r0
 8007a3a:	b360      	cbz	r0, 8007a96 <__ssputs_r+0xa2>
 8007a3c:	6921      	ldr	r1, [r4, #16]
 8007a3e:	464a      	mov	r2, r9
 8007a40:	f000 fa06 	bl	8007e50 <memcpy>
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	6126      	str	r6, [r4, #16]
 8007a52:	6165      	str	r5, [r4, #20]
 8007a54:	444e      	add	r6, r9
 8007a56:	eba5 0509 	sub.w	r5, r5, r9
 8007a5a:	6026      	str	r6, [r4, #0]
 8007a5c:	60a5      	str	r5, [r4, #8]
 8007a5e:	463e      	mov	r6, r7
 8007a60:	42be      	cmp	r6, r7
 8007a62:	d900      	bls.n	8007a66 <__ssputs_r+0x72>
 8007a64:	463e      	mov	r6, r7
 8007a66:	6820      	ldr	r0, [r4, #0]
 8007a68:	4632      	mov	r2, r6
 8007a6a:	4641      	mov	r1, r8
 8007a6c:	f000 f9c6 	bl	8007dfc <memmove>
 8007a70:	68a3      	ldr	r3, [r4, #8]
 8007a72:	1b9b      	subs	r3, r3, r6
 8007a74:	60a3      	str	r3, [r4, #8]
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	4433      	add	r3, r6
 8007a7a:	6023      	str	r3, [r4, #0]
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a82:	462a      	mov	r2, r5
 8007a84:	f000 fa36 	bl	8007ef4 <_realloc_r>
 8007a88:	4606      	mov	r6, r0
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d1e0      	bne.n	8007a50 <__ssputs_r+0x5c>
 8007a8e:	6921      	ldr	r1, [r4, #16]
 8007a90:	4650      	mov	r0, sl
 8007a92:	f7ff fb2d 	bl	80070f0 <_free_r>
 8007a96:	230c      	movs	r3, #12
 8007a98:	f8ca 3000 	str.w	r3, [sl]
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa8:	e7e9      	b.n	8007a7e <__ssputs_r+0x8a>
	...

08007aac <_svfiprintf_r>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	4698      	mov	r8, r3
 8007ab2:	898b      	ldrh	r3, [r1, #12]
 8007ab4:	061b      	lsls	r3, r3, #24
 8007ab6:	b09d      	sub	sp, #116	@ 0x74
 8007ab8:	4607      	mov	r7, r0
 8007aba:	460d      	mov	r5, r1
 8007abc:	4614      	mov	r4, r2
 8007abe:	d510      	bpl.n	8007ae2 <_svfiprintf_r+0x36>
 8007ac0:	690b      	ldr	r3, [r1, #16]
 8007ac2:	b973      	cbnz	r3, 8007ae2 <_svfiprintf_r+0x36>
 8007ac4:	2140      	movs	r1, #64	@ 0x40
 8007ac6:	f7ff fb87 	bl	80071d8 <_malloc_r>
 8007aca:	6028      	str	r0, [r5, #0]
 8007acc:	6128      	str	r0, [r5, #16]
 8007ace:	b930      	cbnz	r0, 8007ade <_svfiprintf_r+0x32>
 8007ad0:	230c      	movs	r3, #12
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	b01d      	add	sp, #116	@ 0x74
 8007ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ade:	2340      	movs	r3, #64	@ 0x40
 8007ae0:	616b      	str	r3, [r5, #20]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ae6:	2320      	movs	r3, #32
 8007ae8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007af0:	2330      	movs	r3, #48	@ 0x30
 8007af2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c90 <_svfiprintf_r+0x1e4>
 8007af6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007afa:	f04f 0901 	mov.w	r9, #1
 8007afe:	4623      	mov	r3, r4
 8007b00:	469a      	mov	sl, r3
 8007b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b06:	b10a      	cbz	r2, 8007b0c <_svfiprintf_r+0x60>
 8007b08:	2a25      	cmp	r2, #37	@ 0x25
 8007b0a:	d1f9      	bne.n	8007b00 <_svfiprintf_r+0x54>
 8007b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b10:	d00b      	beq.n	8007b2a <_svfiprintf_r+0x7e>
 8007b12:	465b      	mov	r3, fp
 8007b14:	4622      	mov	r2, r4
 8007b16:	4629      	mov	r1, r5
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f7ff ff6b 	bl	80079f4 <__ssputs_r>
 8007b1e:	3001      	adds	r0, #1
 8007b20:	f000 80a7 	beq.w	8007c72 <_svfiprintf_r+0x1c6>
 8007b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b26:	445a      	add	r2, fp
 8007b28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 809f 	beq.w	8007c72 <_svfiprintf_r+0x1c6>
 8007b34:	2300      	movs	r3, #0
 8007b36:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b3e:	f10a 0a01 	add.w	sl, sl, #1
 8007b42:	9304      	str	r3, [sp, #16]
 8007b44:	9307      	str	r3, [sp, #28]
 8007b46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b4c:	4654      	mov	r4, sl
 8007b4e:	2205      	movs	r2, #5
 8007b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b54:	484e      	ldr	r0, [pc, #312]	@ (8007c90 <_svfiprintf_r+0x1e4>)
 8007b56:	f7f8 fb3b 	bl	80001d0 <memchr>
 8007b5a:	9a04      	ldr	r2, [sp, #16]
 8007b5c:	b9d8      	cbnz	r0, 8007b96 <_svfiprintf_r+0xea>
 8007b5e:	06d0      	lsls	r0, r2, #27
 8007b60:	bf44      	itt	mi
 8007b62:	2320      	movmi	r3, #32
 8007b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b68:	0711      	lsls	r1, r2, #28
 8007b6a:	bf44      	itt	mi
 8007b6c:	232b      	movmi	r3, #43	@ 0x2b
 8007b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b72:	f89a 3000 	ldrb.w	r3, [sl]
 8007b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b78:	d015      	beq.n	8007ba6 <_svfiprintf_r+0xfa>
 8007b7a:	9a07      	ldr	r2, [sp, #28]
 8007b7c:	4654      	mov	r4, sl
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f04f 0c0a 	mov.w	ip, #10
 8007b84:	4621      	mov	r1, r4
 8007b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b8a:	3b30      	subs	r3, #48	@ 0x30
 8007b8c:	2b09      	cmp	r3, #9
 8007b8e:	d94b      	bls.n	8007c28 <_svfiprintf_r+0x17c>
 8007b90:	b1b0      	cbz	r0, 8007bc0 <_svfiprintf_r+0x114>
 8007b92:	9207      	str	r2, [sp, #28]
 8007b94:	e014      	b.n	8007bc0 <_svfiprintf_r+0x114>
 8007b96:	eba0 0308 	sub.w	r3, r0, r8
 8007b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	46a2      	mov	sl, r4
 8007ba4:	e7d2      	b.n	8007b4c <_svfiprintf_r+0xa0>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	1d19      	adds	r1, r3, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	9103      	str	r1, [sp, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bfbb      	ittet	lt
 8007bb2:	425b      	neglt	r3, r3
 8007bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007bb8:	9307      	strge	r3, [sp, #28]
 8007bba:	9307      	strlt	r3, [sp, #28]
 8007bbc:	bfb8      	it	lt
 8007bbe:	9204      	strlt	r2, [sp, #16]
 8007bc0:	7823      	ldrb	r3, [r4, #0]
 8007bc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bc4:	d10a      	bne.n	8007bdc <_svfiprintf_r+0x130>
 8007bc6:	7863      	ldrb	r3, [r4, #1]
 8007bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bca:	d132      	bne.n	8007c32 <_svfiprintf_r+0x186>
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	1d1a      	adds	r2, r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	9203      	str	r2, [sp, #12]
 8007bd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bd8:	3402      	adds	r4, #2
 8007bda:	9305      	str	r3, [sp, #20]
 8007bdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ca0 <_svfiprintf_r+0x1f4>
 8007be0:	7821      	ldrb	r1, [r4, #0]
 8007be2:	2203      	movs	r2, #3
 8007be4:	4650      	mov	r0, sl
 8007be6:	f7f8 faf3 	bl	80001d0 <memchr>
 8007bea:	b138      	cbz	r0, 8007bfc <_svfiprintf_r+0x150>
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	eba0 000a 	sub.w	r0, r0, sl
 8007bf2:	2240      	movs	r2, #64	@ 0x40
 8007bf4:	4082      	lsls	r2, r0
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	3401      	adds	r4, #1
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c00:	4824      	ldr	r0, [pc, #144]	@ (8007c94 <_svfiprintf_r+0x1e8>)
 8007c02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c06:	2206      	movs	r2, #6
 8007c08:	f7f8 fae2 	bl	80001d0 <memchr>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d036      	beq.n	8007c7e <_svfiprintf_r+0x1d2>
 8007c10:	4b21      	ldr	r3, [pc, #132]	@ (8007c98 <_svfiprintf_r+0x1ec>)
 8007c12:	bb1b      	cbnz	r3, 8007c5c <_svfiprintf_r+0x1b0>
 8007c14:	9b03      	ldr	r3, [sp, #12]
 8007c16:	3307      	adds	r3, #7
 8007c18:	f023 0307 	bic.w	r3, r3, #7
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c22:	4433      	add	r3, r6
 8007c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c26:	e76a      	b.n	8007afe <_svfiprintf_r+0x52>
 8007c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	2001      	movs	r0, #1
 8007c30:	e7a8      	b.n	8007b84 <_svfiprintf_r+0xd8>
 8007c32:	2300      	movs	r3, #0
 8007c34:	3401      	adds	r4, #1
 8007c36:	9305      	str	r3, [sp, #20]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f04f 0c0a 	mov.w	ip, #10
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c44:	3a30      	subs	r2, #48	@ 0x30
 8007c46:	2a09      	cmp	r2, #9
 8007c48:	d903      	bls.n	8007c52 <_svfiprintf_r+0x1a6>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0c6      	beq.n	8007bdc <_svfiprintf_r+0x130>
 8007c4e:	9105      	str	r1, [sp, #20]
 8007c50:	e7c4      	b.n	8007bdc <_svfiprintf_r+0x130>
 8007c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c56:	4604      	mov	r4, r0
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e7f0      	b.n	8007c3e <_svfiprintf_r+0x192>
 8007c5c:	ab03      	add	r3, sp, #12
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	462a      	mov	r2, r5
 8007c62:	4b0e      	ldr	r3, [pc, #56]	@ (8007c9c <_svfiprintf_r+0x1f0>)
 8007c64:	a904      	add	r1, sp, #16
 8007c66:	4638      	mov	r0, r7
 8007c68:	f7fd fe84 	bl	8005974 <_printf_float>
 8007c6c:	1c42      	adds	r2, r0, #1
 8007c6e:	4606      	mov	r6, r0
 8007c70:	d1d6      	bne.n	8007c20 <_svfiprintf_r+0x174>
 8007c72:	89ab      	ldrh	r3, [r5, #12]
 8007c74:	065b      	lsls	r3, r3, #25
 8007c76:	f53f af2d 	bmi.w	8007ad4 <_svfiprintf_r+0x28>
 8007c7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c7c:	e72c      	b.n	8007ad8 <_svfiprintf_r+0x2c>
 8007c7e:	ab03      	add	r3, sp, #12
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	462a      	mov	r2, r5
 8007c84:	4b05      	ldr	r3, [pc, #20]	@ (8007c9c <_svfiprintf_r+0x1f0>)
 8007c86:	a904      	add	r1, sp, #16
 8007c88:	4638      	mov	r0, r7
 8007c8a:	f7fe f90b 	bl	8005ea4 <_printf_i>
 8007c8e:	e7ed      	b.n	8007c6c <_svfiprintf_r+0x1c0>
 8007c90:	08008788 	.word	0x08008788
 8007c94:	08008792 	.word	0x08008792
 8007c98:	08005975 	.word	0x08005975
 8007c9c:	080079f5 	.word	0x080079f5
 8007ca0:	0800878e 	.word	0x0800878e

08007ca4 <__sflush_r>:
 8007ca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cac:	0716      	lsls	r6, r2, #28
 8007cae:	4605      	mov	r5, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	d454      	bmi.n	8007d5e <__sflush_r+0xba>
 8007cb4:	684b      	ldr	r3, [r1, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dc02      	bgt.n	8007cc0 <__sflush_r+0x1c>
 8007cba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	dd48      	ble.n	8007d52 <__sflush_r+0xae>
 8007cc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cc2:	2e00      	cmp	r6, #0
 8007cc4:	d045      	beq.n	8007d52 <__sflush_r+0xae>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ccc:	682f      	ldr	r7, [r5, #0]
 8007cce:	6a21      	ldr	r1, [r4, #32]
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	d030      	beq.n	8007d36 <__sflush_r+0x92>
 8007cd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	0759      	lsls	r1, r3, #29
 8007cda:	d505      	bpl.n	8007ce8 <__sflush_r+0x44>
 8007cdc:	6863      	ldr	r3, [r4, #4]
 8007cde:	1ad2      	subs	r2, r2, r3
 8007ce0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ce2:	b10b      	cbz	r3, 8007ce8 <__sflush_r+0x44>
 8007ce4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ce6:	1ad2      	subs	r2, r2, r3
 8007ce8:	2300      	movs	r3, #0
 8007cea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cec:	6a21      	ldr	r1, [r4, #32]
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b0      	blx	r6
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	d106      	bne.n	8007d06 <__sflush_r+0x62>
 8007cf8:	6829      	ldr	r1, [r5, #0]
 8007cfa:	291d      	cmp	r1, #29
 8007cfc:	d82b      	bhi.n	8007d56 <__sflush_r+0xb2>
 8007cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8007da8 <__sflush_r+0x104>)
 8007d00:	410a      	asrs	r2, r1
 8007d02:	07d6      	lsls	r6, r2, #31
 8007d04:	d427      	bmi.n	8007d56 <__sflush_r+0xb2>
 8007d06:	2200      	movs	r2, #0
 8007d08:	6062      	str	r2, [r4, #4]
 8007d0a:	04d9      	lsls	r1, r3, #19
 8007d0c:	6922      	ldr	r2, [r4, #16]
 8007d0e:	6022      	str	r2, [r4, #0]
 8007d10:	d504      	bpl.n	8007d1c <__sflush_r+0x78>
 8007d12:	1c42      	adds	r2, r0, #1
 8007d14:	d101      	bne.n	8007d1a <__sflush_r+0x76>
 8007d16:	682b      	ldr	r3, [r5, #0]
 8007d18:	b903      	cbnz	r3, 8007d1c <__sflush_r+0x78>
 8007d1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d1e:	602f      	str	r7, [r5, #0]
 8007d20:	b1b9      	cbz	r1, 8007d52 <__sflush_r+0xae>
 8007d22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d26:	4299      	cmp	r1, r3
 8007d28:	d002      	beq.n	8007d30 <__sflush_r+0x8c>
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f7ff f9e0 	bl	80070f0 <_free_r>
 8007d30:	2300      	movs	r3, #0
 8007d32:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d34:	e00d      	b.n	8007d52 <__sflush_r+0xae>
 8007d36:	2301      	movs	r3, #1
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b0      	blx	r6
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	1c50      	adds	r0, r2, #1
 8007d40:	d1c9      	bne.n	8007cd6 <__sflush_r+0x32>
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0c6      	beq.n	8007cd6 <__sflush_r+0x32>
 8007d48:	2b1d      	cmp	r3, #29
 8007d4a:	d001      	beq.n	8007d50 <__sflush_r+0xac>
 8007d4c:	2b16      	cmp	r3, #22
 8007d4e:	d11e      	bne.n	8007d8e <__sflush_r+0xea>
 8007d50:	602f      	str	r7, [r5, #0]
 8007d52:	2000      	movs	r0, #0
 8007d54:	e022      	b.n	8007d9c <__sflush_r+0xf8>
 8007d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d5a:	b21b      	sxth	r3, r3
 8007d5c:	e01b      	b.n	8007d96 <__sflush_r+0xf2>
 8007d5e:	690f      	ldr	r7, [r1, #16]
 8007d60:	2f00      	cmp	r7, #0
 8007d62:	d0f6      	beq.n	8007d52 <__sflush_r+0xae>
 8007d64:	0793      	lsls	r3, r2, #30
 8007d66:	680e      	ldr	r6, [r1, #0]
 8007d68:	bf08      	it	eq
 8007d6a:	694b      	ldreq	r3, [r1, #20]
 8007d6c:	600f      	str	r7, [r1, #0]
 8007d6e:	bf18      	it	ne
 8007d70:	2300      	movne	r3, #0
 8007d72:	eba6 0807 	sub.w	r8, r6, r7
 8007d76:	608b      	str	r3, [r1, #8]
 8007d78:	f1b8 0f00 	cmp.w	r8, #0
 8007d7c:	dde9      	ble.n	8007d52 <__sflush_r+0xae>
 8007d7e:	6a21      	ldr	r1, [r4, #32]
 8007d80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d82:	4643      	mov	r3, r8
 8007d84:	463a      	mov	r2, r7
 8007d86:	4628      	mov	r0, r5
 8007d88:	47b0      	blx	r6
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	dc08      	bgt.n	8007da0 <__sflush_r+0xfc>
 8007d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d96:	81a3      	strh	r3, [r4, #12]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da0:	4407      	add	r7, r0
 8007da2:	eba8 0800 	sub.w	r8, r8, r0
 8007da6:	e7e7      	b.n	8007d78 <__sflush_r+0xd4>
 8007da8:	dfbffffe 	.word	0xdfbffffe

08007dac <_fflush_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	690b      	ldr	r3, [r1, #16]
 8007db0:	4605      	mov	r5, r0
 8007db2:	460c      	mov	r4, r1
 8007db4:	b913      	cbnz	r3, 8007dbc <_fflush_r+0x10>
 8007db6:	2500      	movs	r5, #0
 8007db8:	4628      	mov	r0, r5
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	b118      	cbz	r0, 8007dc6 <_fflush_r+0x1a>
 8007dbe:	6a03      	ldr	r3, [r0, #32]
 8007dc0:	b90b      	cbnz	r3, 8007dc6 <_fflush_r+0x1a>
 8007dc2:	f7fe fa1b 	bl	80061fc <__sinit>
 8007dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0f3      	beq.n	8007db6 <_fflush_r+0xa>
 8007dce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007dd0:	07d0      	lsls	r0, r2, #31
 8007dd2:	d404      	bmi.n	8007dde <_fflush_r+0x32>
 8007dd4:	0599      	lsls	r1, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_fflush_r+0x32>
 8007dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dda:	f7fe fb3a 	bl	8006452 <__retarget_lock_acquire_recursive>
 8007dde:	4628      	mov	r0, r5
 8007de0:	4621      	mov	r1, r4
 8007de2:	f7ff ff5f 	bl	8007ca4 <__sflush_r>
 8007de6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007de8:	07da      	lsls	r2, r3, #31
 8007dea:	4605      	mov	r5, r0
 8007dec:	d4e4      	bmi.n	8007db8 <_fflush_r+0xc>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	059b      	lsls	r3, r3, #22
 8007df2:	d4e1      	bmi.n	8007db8 <_fflush_r+0xc>
 8007df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007df6:	f7fe fb2d 	bl	8006454 <__retarget_lock_release_recursive>
 8007dfa:	e7dd      	b.n	8007db8 <_fflush_r+0xc>

08007dfc <memmove>:
 8007dfc:	4288      	cmp	r0, r1
 8007dfe:	b510      	push	{r4, lr}
 8007e00:	eb01 0402 	add.w	r4, r1, r2
 8007e04:	d902      	bls.n	8007e0c <memmove+0x10>
 8007e06:	4284      	cmp	r4, r0
 8007e08:	4623      	mov	r3, r4
 8007e0a:	d807      	bhi.n	8007e1c <memmove+0x20>
 8007e0c:	1e43      	subs	r3, r0, #1
 8007e0e:	42a1      	cmp	r1, r4
 8007e10:	d008      	beq.n	8007e24 <memmove+0x28>
 8007e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e1a:	e7f8      	b.n	8007e0e <memmove+0x12>
 8007e1c:	4402      	add	r2, r0
 8007e1e:	4601      	mov	r1, r0
 8007e20:	428a      	cmp	r2, r1
 8007e22:	d100      	bne.n	8007e26 <memmove+0x2a>
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e2e:	e7f7      	b.n	8007e20 <memmove+0x24>

08007e30 <_sbrk_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4d06      	ldr	r5, [pc, #24]	@ (8007e4c <_sbrk_r+0x1c>)
 8007e34:	2300      	movs	r3, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	602b      	str	r3, [r5, #0]
 8007e3c:	f7f9 fe00 	bl	8001a40 <_sbrk>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_sbrk_r+0x1a>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_sbrk_r+0x1a>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	2000069c 	.word	0x2000069c

08007e50 <memcpy>:
 8007e50:	440a      	add	r2, r1
 8007e52:	4291      	cmp	r1, r2
 8007e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e58:	d100      	bne.n	8007e5c <memcpy+0xc>
 8007e5a:	4770      	bx	lr
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e66:	4291      	cmp	r1, r2
 8007e68:	d1f9      	bne.n	8007e5e <memcpy+0xe>
 8007e6a:	bd10      	pop	{r4, pc}

08007e6c <__assert_func>:
 8007e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e6e:	4614      	mov	r4, r2
 8007e70:	461a      	mov	r2, r3
 8007e72:	4b09      	ldr	r3, [pc, #36]	@ (8007e98 <__assert_func+0x2c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4605      	mov	r5, r0
 8007e78:	68d8      	ldr	r0, [r3, #12]
 8007e7a:	b954      	cbnz	r4, 8007e92 <__assert_func+0x26>
 8007e7c:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <__assert_func+0x30>)
 8007e7e:	461c      	mov	r4, r3
 8007e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e84:	9100      	str	r1, [sp, #0]
 8007e86:	462b      	mov	r3, r5
 8007e88:	4905      	ldr	r1, [pc, #20]	@ (8007ea0 <__assert_func+0x34>)
 8007e8a:	f000 f86f 	bl	8007f6c <fiprintf>
 8007e8e:	f000 f87f 	bl	8007f90 <abort>
 8007e92:	4b04      	ldr	r3, [pc, #16]	@ (8007ea4 <__assert_func+0x38>)
 8007e94:	e7f4      	b.n	8007e80 <__assert_func+0x14>
 8007e96:	bf00      	nop
 8007e98:	20000018 	.word	0x20000018
 8007e9c:	080087de 	.word	0x080087de
 8007ea0:	080087b0 	.word	0x080087b0
 8007ea4:	080087a3 	.word	0x080087a3

08007ea8 <_calloc_r>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	fba1 5402 	umull	r5, r4, r1, r2
 8007eae:	b93c      	cbnz	r4, 8007ec0 <_calloc_r+0x18>
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7ff f991 	bl	80071d8 <_malloc_r>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	b928      	cbnz	r0, 8007ec6 <_calloc_r+0x1e>
 8007eba:	2600      	movs	r6, #0
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	220c      	movs	r2, #12
 8007ec2:	6002      	str	r2, [r0, #0]
 8007ec4:	e7f9      	b.n	8007eba <_calloc_r+0x12>
 8007ec6:	462a      	mov	r2, r5
 8007ec8:	4621      	mov	r1, r4
 8007eca:	f7fe fa44 	bl	8006356 <memset>
 8007ece:	e7f5      	b.n	8007ebc <_calloc_r+0x14>

08007ed0 <__ascii_mbtowc>:
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	b901      	cbnz	r1, 8007ed6 <__ascii_mbtowc+0x6>
 8007ed4:	a901      	add	r1, sp, #4
 8007ed6:	b142      	cbz	r2, 8007eea <__ascii_mbtowc+0x1a>
 8007ed8:	b14b      	cbz	r3, 8007eee <__ascii_mbtowc+0x1e>
 8007eda:	7813      	ldrb	r3, [r2, #0]
 8007edc:	600b      	str	r3, [r1, #0]
 8007ede:	7812      	ldrb	r2, [r2, #0]
 8007ee0:	1e10      	subs	r0, r2, #0
 8007ee2:	bf18      	it	ne
 8007ee4:	2001      	movne	r0, #1
 8007ee6:	b002      	add	sp, #8
 8007ee8:	4770      	bx	lr
 8007eea:	4610      	mov	r0, r2
 8007eec:	e7fb      	b.n	8007ee6 <__ascii_mbtowc+0x16>
 8007eee:	f06f 0001 	mvn.w	r0, #1
 8007ef2:	e7f8      	b.n	8007ee6 <__ascii_mbtowc+0x16>

08007ef4 <_realloc_r>:
 8007ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef8:	4680      	mov	r8, r0
 8007efa:	4615      	mov	r5, r2
 8007efc:	460c      	mov	r4, r1
 8007efe:	b921      	cbnz	r1, 8007f0a <_realloc_r+0x16>
 8007f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f04:	4611      	mov	r1, r2
 8007f06:	f7ff b967 	b.w	80071d8 <_malloc_r>
 8007f0a:	b92a      	cbnz	r2, 8007f18 <_realloc_r+0x24>
 8007f0c:	f7ff f8f0 	bl	80070f0 <_free_r>
 8007f10:	2400      	movs	r4, #0
 8007f12:	4620      	mov	r0, r4
 8007f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f18:	f000 f841 	bl	8007f9e <_malloc_usable_size_r>
 8007f1c:	4285      	cmp	r5, r0
 8007f1e:	4606      	mov	r6, r0
 8007f20:	d802      	bhi.n	8007f28 <_realloc_r+0x34>
 8007f22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f26:	d8f4      	bhi.n	8007f12 <_realloc_r+0x1e>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	f7ff f954 	bl	80071d8 <_malloc_r>
 8007f30:	4607      	mov	r7, r0
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d0ec      	beq.n	8007f10 <_realloc_r+0x1c>
 8007f36:	42b5      	cmp	r5, r6
 8007f38:	462a      	mov	r2, r5
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	bf28      	it	cs
 8007f3e:	4632      	movcs	r2, r6
 8007f40:	f7ff ff86 	bl	8007e50 <memcpy>
 8007f44:	4621      	mov	r1, r4
 8007f46:	4640      	mov	r0, r8
 8007f48:	f7ff f8d2 	bl	80070f0 <_free_r>
 8007f4c:	463c      	mov	r4, r7
 8007f4e:	e7e0      	b.n	8007f12 <_realloc_r+0x1e>

08007f50 <__ascii_wctomb>:
 8007f50:	4603      	mov	r3, r0
 8007f52:	4608      	mov	r0, r1
 8007f54:	b141      	cbz	r1, 8007f68 <__ascii_wctomb+0x18>
 8007f56:	2aff      	cmp	r2, #255	@ 0xff
 8007f58:	d904      	bls.n	8007f64 <__ascii_wctomb+0x14>
 8007f5a:	228a      	movs	r2, #138	@ 0x8a
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f62:	4770      	bx	lr
 8007f64:	700a      	strb	r2, [r1, #0]
 8007f66:	2001      	movs	r0, #1
 8007f68:	4770      	bx	lr
	...

08007f6c <fiprintf>:
 8007f6c:	b40e      	push	{r1, r2, r3}
 8007f6e:	b503      	push	{r0, r1, lr}
 8007f70:	4601      	mov	r1, r0
 8007f72:	ab03      	add	r3, sp, #12
 8007f74:	4805      	ldr	r0, [pc, #20]	@ (8007f8c <fiprintf+0x20>)
 8007f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f7a:	6800      	ldr	r0, [r0, #0]
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	f000 f83f 	bl	8008000 <_vfiprintf_r>
 8007f82:	b002      	add	sp, #8
 8007f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f88:	b003      	add	sp, #12
 8007f8a:	4770      	bx	lr
 8007f8c:	20000018 	.word	0x20000018

08007f90 <abort>:
 8007f90:	b508      	push	{r3, lr}
 8007f92:	2006      	movs	r0, #6
 8007f94:	f000 fa08 	bl	80083a8 <raise>
 8007f98:	2001      	movs	r0, #1
 8007f9a:	f7f9 fcd9 	bl	8001950 <_exit>

08007f9e <_malloc_usable_size_r>:
 8007f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa2:	1f18      	subs	r0, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bfbc      	itt	lt
 8007fa8:	580b      	ldrlt	r3, [r1, r0]
 8007faa:	18c0      	addlt	r0, r0, r3
 8007fac:	4770      	bx	lr

08007fae <__sfputc_r>:
 8007fae:	6893      	ldr	r3, [r2, #8]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	b410      	push	{r4}
 8007fb6:	6093      	str	r3, [r2, #8]
 8007fb8:	da08      	bge.n	8007fcc <__sfputc_r+0x1e>
 8007fba:	6994      	ldr	r4, [r2, #24]
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	db01      	blt.n	8007fc4 <__sfputc_r+0x16>
 8007fc0:	290a      	cmp	r1, #10
 8007fc2:	d103      	bne.n	8007fcc <__sfputc_r+0x1e>
 8007fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc8:	f000 b932 	b.w	8008230 <__swbuf_r>
 8007fcc:	6813      	ldr	r3, [r2, #0]
 8007fce:	1c58      	adds	r0, r3, #1
 8007fd0:	6010      	str	r0, [r2, #0]
 8007fd2:	7019      	strb	r1, [r3, #0]
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <__sfputs_r>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	4606      	mov	r6, r0
 8007fe0:	460f      	mov	r7, r1
 8007fe2:	4614      	mov	r4, r2
 8007fe4:	18d5      	adds	r5, r2, r3
 8007fe6:	42ac      	cmp	r4, r5
 8007fe8:	d101      	bne.n	8007fee <__sfputs_r+0x12>
 8007fea:	2000      	movs	r0, #0
 8007fec:	e007      	b.n	8007ffe <__sfputs_r+0x22>
 8007fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f7ff ffda 	bl	8007fae <__sfputc_r>
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	d1f3      	bne.n	8007fe6 <__sfputs_r+0xa>
 8007ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008000 <_vfiprintf_r>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	460d      	mov	r5, r1
 8008006:	b09d      	sub	sp, #116	@ 0x74
 8008008:	4614      	mov	r4, r2
 800800a:	4698      	mov	r8, r3
 800800c:	4606      	mov	r6, r0
 800800e:	b118      	cbz	r0, 8008018 <_vfiprintf_r+0x18>
 8008010:	6a03      	ldr	r3, [r0, #32]
 8008012:	b90b      	cbnz	r3, 8008018 <_vfiprintf_r+0x18>
 8008014:	f7fe f8f2 	bl	80061fc <__sinit>
 8008018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800801a:	07d9      	lsls	r1, r3, #31
 800801c:	d405      	bmi.n	800802a <_vfiprintf_r+0x2a>
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	059a      	lsls	r2, r3, #22
 8008022:	d402      	bmi.n	800802a <_vfiprintf_r+0x2a>
 8008024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008026:	f7fe fa14 	bl	8006452 <__retarget_lock_acquire_recursive>
 800802a:	89ab      	ldrh	r3, [r5, #12]
 800802c:	071b      	lsls	r3, r3, #28
 800802e:	d501      	bpl.n	8008034 <_vfiprintf_r+0x34>
 8008030:	692b      	ldr	r3, [r5, #16]
 8008032:	b99b      	cbnz	r3, 800805c <_vfiprintf_r+0x5c>
 8008034:	4629      	mov	r1, r5
 8008036:	4630      	mov	r0, r6
 8008038:	f000 f938 	bl	80082ac <__swsetup_r>
 800803c:	b170      	cbz	r0, 800805c <_vfiprintf_r+0x5c>
 800803e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008040:	07dc      	lsls	r4, r3, #31
 8008042:	d504      	bpl.n	800804e <_vfiprintf_r+0x4e>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	b01d      	add	sp, #116	@ 0x74
 800804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804e:	89ab      	ldrh	r3, [r5, #12]
 8008050:	0598      	lsls	r0, r3, #22
 8008052:	d4f7      	bmi.n	8008044 <_vfiprintf_r+0x44>
 8008054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008056:	f7fe f9fd 	bl	8006454 <__retarget_lock_release_recursive>
 800805a:	e7f3      	b.n	8008044 <_vfiprintf_r+0x44>
 800805c:	2300      	movs	r3, #0
 800805e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008060:	2320      	movs	r3, #32
 8008062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008066:	f8cd 800c 	str.w	r8, [sp, #12]
 800806a:	2330      	movs	r3, #48	@ 0x30
 800806c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800821c <_vfiprintf_r+0x21c>
 8008070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008074:	f04f 0901 	mov.w	r9, #1
 8008078:	4623      	mov	r3, r4
 800807a:	469a      	mov	sl, r3
 800807c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008080:	b10a      	cbz	r2, 8008086 <_vfiprintf_r+0x86>
 8008082:	2a25      	cmp	r2, #37	@ 0x25
 8008084:	d1f9      	bne.n	800807a <_vfiprintf_r+0x7a>
 8008086:	ebba 0b04 	subs.w	fp, sl, r4
 800808a:	d00b      	beq.n	80080a4 <_vfiprintf_r+0xa4>
 800808c:	465b      	mov	r3, fp
 800808e:	4622      	mov	r2, r4
 8008090:	4629      	mov	r1, r5
 8008092:	4630      	mov	r0, r6
 8008094:	f7ff ffa2 	bl	8007fdc <__sfputs_r>
 8008098:	3001      	adds	r0, #1
 800809a:	f000 80a7 	beq.w	80081ec <_vfiprintf_r+0x1ec>
 800809e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080a0:	445a      	add	r2, fp
 80080a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80080a4:	f89a 3000 	ldrb.w	r3, [sl]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 809f 	beq.w	80081ec <_vfiprintf_r+0x1ec>
 80080ae:	2300      	movs	r3, #0
 80080b0:	f04f 32ff 	mov.w	r2, #4294967295
 80080b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080b8:	f10a 0a01 	add.w	sl, sl, #1
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	9307      	str	r3, [sp, #28]
 80080c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80080c6:	4654      	mov	r4, sl
 80080c8:	2205      	movs	r2, #5
 80080ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ce:	4853      	ldr	r0, [pc, #332]	@ (800821c <_vfiprintf_r+0x21c>)
 80080d0:	f7f8 f87e 	bl	80001d0 <memchr>
 80080d4:	9a04      	ldr	r2, [sp, #16]
 80080d6:	b9d8      	cbnz	r0, 8008110 <_vfiprintf_r+0x110>
 80080d8:	06d1      	lsls	r1, r2, #27
 80080da:	bf44      	itt	mi
 80080dc:	2320      	movmi	r3, #32
 80080de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080e2:	0713      	lsls	r3, r2, #28
 80080e4:	bf44      	itt	mi
 80080e6:	232b      	movmi	r3, #43	@ 0x2b
 80080e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ec:	f89a 3000 	ldrb.w	r3, [sl]
 80080f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080f2:	d015      	beq.n	8008120 <_vfiprintf_r+0x120>
 80080f4:	9a07      	ldr	r2, [sp, #28]
 80080f6:	4654      	mov	r4, sl
 80080f8:	2000      	movs	r0, #0
 80080fa:	f04f 0c0a 	mov.w	ip, #10
 80080fe:	4621      	mov	r1, r4
 8008100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008104:	3b30      	subs	r3, #48	@ 0x30
 8008106:	2b09      	cmp	r3, #9
 8008108:	d94b      	bls.n	80081a2 <_vfiprintf_r+0x1a2>
 800810a:	b1b0      	cbz	r0, 800813a <_vfiprintf_r+0x13a>
 800810c:	9207      	str	r2, [sp, #28]
 800810e:	e014      	b.n	800813a <_vfiprintf_r+0x13a>
 8008110:	eba0 0308 	sub.w	r3, r0, r8
 8008114:	fa09 f303 	lsl.w	r3, r9, r3
 8008118:	4313      	orrs	r3, r2
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	46a2      	mov	sl, r4
 800811e:	e7d2      	b.n	80080c6 <_vfiprintf_r+0xc6>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	1d19      	adds	r1, r3, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	9103      	str	r1, [sp, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	bfbb      	ittet	lt
 800812c:	425b      	neglt	r3, r3
 800812e:	f042 0202 	orrlt.w	r2, r2, #2
 8008132:	9307      	strge	r3, [sp, #28]
 8008134:	9307      	strlt	r3, [sp, #28]
 8008136:	bfb8      	it	lt
 8008138:	9204      	strlt	r2, [sp, #16]
 800813a:	7823      	ldrb	r3, [r4, #0]
 800813c:	2b2e      	cmp	r3, #46	@ 0x2e
 800813e:	d10a      	bne.n	8008156 <_vfiprintf_r+0x156>
 8008140:	7863      	ldrb	r3, [r4, #1]
 8008142:	2b2a      	cmp	r3, #42	@ 0x2a
 8008144:	d132      	bne.n	80081ac <_vfiprintf_r+0x1ac>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	1d1a      	adds	r2, r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	9203      	str	r2, [sp, #12]
 800814e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008152:	3402      	adds	r4, #2
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800822c <_vfiprintf_r+0x22c>
 800815a:	7821      	ldrb	r1, [r4, #0]
 800815c:	2203      	movs	r2, #3
 800815e:	4650      	mov	r0, sl
 8008160:	f7f8 f836 	bl	80001d0 <memchr>
 8008164:	b138      	cbz	r0, 8008176 <_vfiprintf_r+0x176>
 8008166:	9b04      	ldr	r3, [sp, #16]
 8008168:	eba0 000a 	sub.w	r0, r0, sl
 800816c:	2240      	movs	r2, #64	@ 0x40
 800816e:	4082      	lsls	r2, r0
 8008170:	4313      	orrs	r3, r2
 8008172:	3401      	adds	r4, #1
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817a:	4829      	ldr	r0, [pc, #164]	@ (8008220 <_vfiprintf_r+0x220>)
 800817c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008180:	2206      	movs	r2, #6
 8008182:	f7f8 f825 	bl	80001d0 <memchr>
 8008186:	2800      	cmp	r0, #0
 8008188:	d03f      	beq.n	800820a <_vfiprintf_r+0x20a>
 800818a:	4b26      	ldr	r3, [pc, #152]	@ (8008224 <_vfiprintf_r+0x224>)
 800818c:	bb1b      	cbnz	r3, 80081d6 <_vfiprintf_r+0x1d6>
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	3307      	adds	r3, #7
 8008192:	f023 0307 	bic.w	r3, r3, #7
 8008196:	3308      	adds	r3, #8
 8008198:	9303      	str	r3, [sp, #12]
 800819a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819c:	443b      	add	r3, r7
 800819e:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a0:	e76a      	b.n	8008078 <_vfiprintf_r+0x78>
 80081a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a6:	460c      	mov	r4, r1
 80081a8:	2001      	movs	r0, #1
 80081aa:	e7a8      	b.n	80080fe <_vfiprintf_r+0xfe>
 80081ac:	2300      	movs	r3, #0
 80081ae:	3401      	adds	r4, #1
 80081b0:	9305      	str	r3, [sp, #20]
 80081b2:	4619      	mov	r1, r3
 80081b4:	f04f 0c0a 	mov.w	ip, #10
 80081b8:	4620      	mov	r0, r4
 80081ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081be:	3a30      	subs	r2, #48	@ 0x30
 80081c0:	2a09      	cmp	r2, #9
 80081c2:	d903      	bls.n	80081cc <_vfiprintf_r+0x1cc>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0c6      	beq.n	8008156 <_vfiprintf_r+0x156>
 80081c8:	9105      	str	r1, [sp, #20]
 80081ca:	e7c4      	b.n	8008156 <_vfiprintf_r+0x156>
 80081cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d0:	4604      	mov	r4, r0
 80081d2:	2301      	movs	r3, #1
 80081d4:	e7f0      	b.n	80081b8 <_vfiprintf_r+0x1b8>
 80081d6:	ab03      	add	r3, sp, #12
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	462a      	mov	r2, r5
 80081dc:	4b12      	ldr	r3, [pc, #72]	@ (8008228 <_vfiprintf_r+0x228>)
 80081de:	a904      	add	r1, sp, #16
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7fd fbc7 	bl	8005974 <_printf_float>
 80081e6:	4607      	mov	r7, r0
 80081e8:	1c78      	adds	r0, r7, #1
 80081ea:	d1d6      	bne.n	800819a <_vfiprintf_r+0x19a>
 80081ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ee:	07d9      	lsls	r1, r3, #31
 80081f0:	d405      	bmi.n	80081fe <_vfiprintf_r+0x1fe>
 80081f2:	89ab      	ldrh	r3, [r5, #12]
 80081f4:	059a      	lsls	r2, r3, #22
 80081f6:	d402      	bmi.n	80081fe <_vfiprintf_r+0x1fe>
 80081f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081fa:	f7fe f92b 	bl	8006454 <__retarget_lock_release_recursive>
 80081fe:	89ab      	ldrh	r3, [r5, #12]
 8008200:	065b      	lsls	r3, r3, #25
 8008202:	f53f af1f 	bmi.w	8008044 <_vfiprintf_r+0x44>
 8008206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008208:	e71e      	b.n	8008048 <_vfiprintf_r+0x48>
 800820a:	ab03      	add	r3, sp, #12
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	462a      	mov	r2, r5
 8008210:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <_vfiprintf_r+0x228>)
 8008212:	a904      	add	r1, sp, #16
 8008214:	4630      	mov	r0, r6
 8008216:	f7fd fe45 	bl	8005ea4 <_printf_i>
 800821a:	e7e4      	b.n	80081e6 <_vfiprintf_r+0x1e6>
 800821c:	08008788 	.word	0x08008788
 8008220:	08008792 	.word	0x08008792
 8008224:	08005975 	.word	0x08005975
 8008228:	08007fdd 	.word	0x08007fdd
 800822c:	0800878e 	.word	0x0800878e

08008230 <__swbuf_r>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	460e      	mov	r6, r1
 8008234:	4614      	mov	r4, r2
 8008236:	4605      	mov	r5, r0
 8008238:	b118      	cbz	r0, 8008242 <__swbuf_r+0x12>
 800823a:	6a03      	ldr	r3, [r0, #32]
 800823c:	b90b      	cbnz	r3, 8008242 <__swbuf_r+0x12>
 800823e:	f7fd ffdd 	bl	80061fc <__sinit>
 8008242:	69a3      	ldr	r3, [r4, #24]
 8008244:	60a3      	str	r3, [r4, #8]
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	071a      	lsls	r2, r3, #28
 800824a:	d501      	bpl.n	8008250 <__swbuf_r+0x20>
 800824c:	6923      	ldr	r3, [r4, #16]
 800824e:	b943      	cbnz	r3, 8008262 <__swbuf_r+0x32>
 8008250:	4621      	mov	r1, r4
 8008252:	4628      	mov	r0, r5
 8008254:	f000 f82a 	bl	80082ac <__swsetup_r>
 8008258:	b118      	cbz	r0, 8008262 <__swbuf_r+0x32>
 800825a:	f04f 37ff 	mov.w	r7, #4294967295
 800825e:	4638      	mov	r0, r7
 8008260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	6922      	ldr	r2, [r4, #16]
 8008266:	1a98      	subs	r0, r3, r2
 8008268:	6963      	ldr	r3, [r4, #20]
 800826a:	b2f6      	uxtb	r6, r6
 800826c:	4283      	cmp	r3, r0
 800826e:	4637      	mov	r7, r6
 8008270:	dc05      	bgt.n	800827e <__swbuf_r+0x4e>
 8008272:	4621      	mov	r1, r4
 8008274:	4628      	mov	r0, r5
 8008276:	f7ff fd99 	bl	8007dac <_fflush_r>
 800827a:	2800      	cmp	r0, #0
 800827c:	d1ed      	bne.n	800825a <__swbuf_r+0x2a>
 800827e:	68a3      	ldr	r3, [r4, #8]
 8008280:	3b01      	subs	r3, #1
 8008282:	60a3      	str	r3, [r4, #8]
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	6022      	str	r2, [r4, #0]
 800828a:	701e      	strb	r6, [r3, #0]
 800828c:	6962      	ldr	r2, [r4, #20]
 800828e:	1c43      	adds	r3, r0, #1
 8008290:	429a      	cmp	r2, r3
 8008292:	d004      	beq.n	800829e <__swbuf_r+0x6e>
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	07db      	lsls	r3, r3, #31
 8008298:	d5e1      	bpl.n	800825e <__swbuf_r+0x2e>
 800829a:	2e0a      	cmp	r6, #10
 800829c:	d1df      	bne.n	800825e <__swbuf_r+0x2e>
 800829e:	4621      	mov	r1, r4
 80082a0:	4628      	mov	r0, r5
 80082a2:	f7ff fd83 	bl	8007dac <_fflush_r>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d0d9      	beq.n	800825e <__swbuf_r+0x2e>
 80082aa:	e7d6      	b.n	800825a <__swbuf_r+0x2a>

080082ac <__swsetup_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4b29      	ldr	r3, [pc, #164]	@ (8008354 <__swsetup_r+0xa8>)
 80082b0:	4605      	mov	r5, r0
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	460c      	mov	r4, r1
 80082b6:	b118      	cbz	r0, 80082c0 <__swsetup_r+0x14>
 80082b8:	6a03      	ldr	r3, [r0, #32]
 80082ba:	b90b      	cbnz	r3, 80082c0 <__swsetup_r+0x14>
 80082bc:	f7fd ff9e 	bl	80061fc <__sinit>
 80082c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c4:	0719      	lsls	r1, r3, #28
 80082c6:	d422      	bmi.n	800830e <__swsetup_r+0x62>
 80082c8:	06da      	lsls	r2, r3, #27
 80082ca:	d407      	bmi.n	80082dc <__swsetup_r+0x30>
 80082cc:	2209      	movs	r2, #9
 80082ce:	602a      	str	r2, [r5, #0]
 80082d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d4:	81a3      	strh	r3, [r4, #12]
 80082d6:	f04f 30ff 	mov.w	r0, #4294967295
 80082da:	e033      	b.n	8008344 <__swsetup_r+0x98>
 80082dc:	0758      	lsls	r0, r3, #29
 80082de:	d512      	bpl.n	8008306 <__swsetup_r+0x5a>
 80082e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082e2:	b141      	cbz	r1, 80082f6 <__swsetup_r+0x4a>
 80082e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082e8:	4299      	cmp	r1, r3
 80082ea:	d002      	beq.n	80082f2 <__swsetup_r+0x46>
 80082ec:	4628      	mov	r0, r5
 80082ee:	f7fe feff 	bl	80070f0 <_free_r>
 80082f2:	2300      	movs	r3, #0
 80082f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082fc:	81a3      	strh	r3, [r4, #12]
 80082fe:	2300      	movs	r3, #0
 8008300:	6063      	str	r3, [r4, #4]
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	f043 0308 	orr.w	r3, r3, #8
 800830c:	81a3      	strh	r3, [r4, #12]
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	b94b      	cbnz	r3, 8008326 <__swsetup_r+0x7a>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800831c:	d003      	beq.n	8008326 <__swsetup_r+0x7a>
 800831e:	4621      	mov	r1, r4
 8008320:	4628      	mov	r0, r5
 8008322:	f000 f883 	bl	800842c <__smakebuf_r>
 8008326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832a:	f013 0201 	ands.w	r2, r3, #1
 800832e:	d00a      	beq.n	8008346 <__swsetup_r+0x9a>
 8008330:	2200      	movs	r2, #0
 8008332:	60a2      	str	r2, [r4, #8]
 8008334:	6962      	ldr	r2, [r4, #20]
 8008336:	4252      	negs	r2, r2
 8008338:	61a2      	str	r2, [r4, #24]
 800833a:	6922      	ldr	r2, [r4, #16]
 800833c:	b942      	cbnz	r2, 8008350 <__swsetup_r+0xa4>
 800833e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008342:	d1c5      	bne.n	80082d0 <__swsetup_r+0x24>
 8008344:	bd38      	pop	{r3, r4, r5, pc}
 8008346:	0799      	lsls	r1, r3, #30
 8008348:	bf58      	it	pl
 800834a:	6962      	ldrpl	r2, [r4, #20]
 800834c:	60a2      	str	r2, [r4, #8]
 800834e:	e7f4      	b.n	800833a <__swsetup_r+0x8e>
 8008350:	2000      	movs	r0, #0
 8008352:	e7f7      	b.n	8008344 <__swsetup_r+0x98>
 8008354:	20000018 	.word	0x20000018

08008358 <_raise_r>:
 8008358:	291f      	cmp	r1, #31
 800835a:	b538      	push	{r3, r4, r5, lr}
 800835c:	4605      	mov	r5, r0
 800835e:	460c      	mov	r4, r1
 8008360:	d904      	bls.n	800836c <_raise_r+0x14>
 8008362:	2316      	movs	r3, #22
 8008364:	6003      	str	r3, [r0, #0]
 8008366:	f04f 30ff 	mov.w	r0, #4294967295
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800836e:	b112      	cbz	r2, 8008376 <_raise_r+0x1e>
 8008370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008374:	b94b      	cbnz	r3, 800838a <_raise_r+0x32>
 8008376:	4628      	mov	r0, r5
 8008378:	f000 f830 	bl	80083dc <_getpid_r>
 800837c:	4622      	mov	r2, r4
 800837e:	4601      	mov	r1, r0
 8008380:	4628      	mov	r0, r5
 8008382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008386:	f000 b817 	b.w	80083b8 <_kill_r>
 800838a:	2b01      	cmp	r3, #1
 800838c:	d00a      	beq.n	80083a4 <_raise_r+0x4c>
 800838e:	1c59      	adds	r1, r3, #1
 8008390:	d103      	bne.n	800839a <_raise_r+0x42>
 8008392:	2316      	movs	r3, #22
 8008394:	6003      	str	r3, [r0, #0]
 8008396:	2001      	movs	r0, #1
 8008398:	e7e7      	b.n	800836a <_raise_r+0x12>
 800839a:	2100      	movs	r1, #0
 800839c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083a0:	4620      	mov	r0, r4
 80083a2:	4798      	blx	r3
 80083a4:	2000      	movs	r0, #0
 80083a6:	e7e0      	b.n	800836a <_raise_r+0x12>

080083a8 <raise>:
 80083a8:	4b02      	ldr	r3, [pc, #8]	@ (80083b4 <raise+0xc>)
 80083aa:	4601      	mov	r1, r0
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	f7ff bfd3 	b.w	8008358 <_raise_r>
 80083b2:	bf00      	nop
 80083b4:	20000018 	.word	0x20000018

080083b8 <_kill_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d07      	ldr	r5, [pc, #28]	@ (80083d8 <_kill_r+0x20>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	4611      	mov	r1, r2
 80083c4:	602b      	str	r3, [r5, #0]
 80083c6:	f7f9 fab3 	bl	8001930 <_kill>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d102      	bne.n	80083d4 <_kill_r+0x1c>
 80083ce:	682b      	ldr	r3, [r5, #0]
 80083d0:	b103      	cbz	r3, 80083d4 <_kill_r+0x1c>
 80083d2:	6023      	str	r3, [r4, #0]
 80083d4:	bd38      	pop	{r3, r4, r5, pc}
 80083d6:	bf00      	nop
 80083d8:	2000069c 	.word	0x2000069c

080083dc <_getpid_r>:
 80083dc:	f7f9 baa0 	b.w	8001920 <_getpid>

080083e0 <__swhatbuf_r>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	460c      	mov	r4, r1
 80083e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e8:	2900      	cmp	r1, #0
 80083ea:	b096      	sub	sp, #88	@ 0x58
 80083ec:	4615      	mov	r5, r2
 80083ee:	461e      	mov	r6, r3
 80083f0:	da0d      	bge.n	800840e <__swhatbuf_r+0x2e>
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083f8:	f04f 0100 	mov.w	r1, #0
 80083fc:	bf14      	ite	ne
 80083fe:	2340      	movne	r3, #64	@ 0x40
 8008400:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008404:	2000      	movs	r0, #0
 8008406:	6031      	str	r1, [r6, #0]
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	b016      	add	sp, #88	@ 0x58
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	466a      	mov	r2, sp
 8008410:	f000 f848 	bl	80084a4 <_fstat_r>
 8008414:	2800      	cmp	r0, #0
 8008416:	dbec      	blt.n	80083f2 <__swhatbuf_r+0x12>
 8008418:	9901      	ldr	r1, [sp, #4]
 800841a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800841e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008422:	4259      	negs	r1, r3
 8008424:	4159      	adcs	r1, r3
 8008426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800842a:	e7eb      	b.n	8008404 <__swhatbuf_r+0x24>

0800842c <__smakebuf_r>:
 800842c:	898b      	ldrh	r3, [r1, #12]
 800842e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008430:	079d      	lsls	r5, r3, #30
 8008432:	4606      	mov	r6, r0
 8008434:	460c      	mov	r4, r1
 8008436:	d507      	bpl.n	8008448 <__smakebuf_r+0x1c>
 8008438:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	6123      	str	r3, [r4, #16]
 8008440:	2301      	movs	r3, #1
 8008442:	6163      	str	r3, [r4, #20]
 8008444:	b003      	add	sp, #12
 8008446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008448:	ab01      	add	r3, sp, #4
 800844a:	466a      	mov	r2, sp
 800844c:	f7ff ffc8 	bl	80083e0 <__swhatbuf_r>
 8008450:	9f00      	ldr	r7, [sp, #0]
 8008452:	4605      	mov	r5, r0
 8008454:	4639      	mov	r1, r7
 8008456:	4630      	mov	r0, r6
 8008458:	f7fe febe 	bl	80071d8 <_malloc_r>
 800845c:	b948      	cbnz	r0, 8008472 <__smakebuf_r+0x46>
 800845e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008462:	059a      	lsls	r2, r3, #22
 8008464:	d4ee      	bmi.n	8008444 <__smakebuf_r+0x18>
 8008466:	f023 0303 	bic.w	r3, r3, #3
 800846a:	f043 0302 	orr.w	r3, r3, #2
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	e7e2      	b.n	8008438 <__smakebuf_r+0xc>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	6020      	str	r0, [r4, #0]
 8008476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800847a:	81a3      	strh	r3, [r4, #12]
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008482:	b15b      	cbz	r3, 800849c <__smakebuf_r+0x70>
 8008484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008488:	4630      	mov	r0, r6
 800848a:	f000 f81d 	bl	80084c8 <_isatty_r>
 800848e:	b128      	cbz	r0, 800849c <__smakebuf_r+0x70>
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	f023 0303 	bic.w	r3, r3, #3
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	81a3      	strh	r3, [r4, #12]
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	431d      	orrs	r5, r3
 80084a0:	81a5      	strh	r5, [r4, #12]
 80084a2:	e7cf      	b.n	8008444 <__smakebuf_r+0x18>

080084a4 <_fstat_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4d07      	ldr	r5, [pc, #28]	@ (80084c4 <_fstat_r+0x20>)
 80084a8:	2300      	movs	r3, #0
 80084aa:	4604      	mov	r4, r0
 80084ac:	4608      	mov	r0, r1
 80084ae:	4611      	mov	r1, r2
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	f7f9 fa9d 	bl	80019f0 <_fstat>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d102      	bne.n	80084c0 <_fstat_r+0x1c>
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	b103      	cbz	r3, 80084c0 <_fstat_r+0x1c>
 80084be:	6023      	str	r3, [r4, #0]
 80084c0:	bd38      	pop	{r3, r4, r5, pc}
 80084c2:	bf00      	nop
 80084c4:	2000069c 	.word	0x2000069c

080084c8 <_isatty_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4d06      	ldr	r5, [pc, #24]	@ (80084e4 <_isatty_r+0x1c>)
 80084cc:	2300      	movs	r3, #0
 80084ce:	4604      	mov	r4, r0
 80084d0:	4608      	mov	r0, r1
 80084d2:	602b      	str	r3, [r5, #0]
 80084d4:	f7f9 fa9c 	bl	8001a10 <_isatty>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d102      	bne.n	80084e2 <_isatty_r+0x1a>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	b103      	cbz	r3, 80084e2 <_isatty_r+0x1a>
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	2000069c 	.word	0x2000069c

080084e8 <_init>:
 80084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ea:	bf00      	nop
 80084ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ee:	bc08      	pop	{r3}
 80084f0:	469e      	mov	lr, r3
 80084f2:	4770      	bx	lr

080084f4 <_fini>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	bf00      	nop
 80084f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fa:	bc08      	pop	{r3}
 80084fc:	469e      	mov	lr, r3
 80084fe:	4770      	bx	lr
